
IMU_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800cff8  0800cff8  0000dff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d418  0800d418  0000f2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d418  0800d418  0000e418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d420  0800d420  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d420  0800d420  0000e420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d424  0800d424  0000e424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d428  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000231c  200002c8  0800d6ec  0000f2c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200025e4  0800d6ec  0000f5e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f02  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d8  00000000  00000000  000251f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  000288d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea3  00000000  00000000  00029bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e51  00000000  00000000  0002aa93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d21  00000000  00000000  000448e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933f8  00000000  00000000  0005b605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee9fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f0  00000000  00000000  000eea40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f4b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cfdc 	.word	0x0800cfdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800cfdc 	.word	0x0800cfdc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b9a0 	b.w	8000ec4 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f83c 	bl	8000c08 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2lz>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	f7ff ff99 	bl	8000adc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x1c>
 8000bac:	4620      	mov	r0, r4
 8000bae:	4629      	mov	r1, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fd0f 	bl	80005f8 <__aeabi_dmul>
 8000bda:	f7ff ffa7 	bl	8000b2c <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc90 	bl	8000504 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <__aeabi_d2ulz+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fd06 	bl	80005f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb48 	bl	8000288 <__aeabi_dsub>
 8000bf8:	f7ff ff98 	bl	8000b2c <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f001 f92e 	bl	800212c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f8e2 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f000 fa74 	bl	80013c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed8:	f000 fa1c 	bl	8001314 <MX_DMA_Init>
  MX_TIM9_Init();
 8000edc:	f000 f962 	bl	80011a4 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8000ee0:	f000 f99a 	bl	8001218 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000ee4:	f008 fd5e 	bl	80099a4 <MX_USB_DEVICE_Init>
  MX_USART6_UART_Init();
 8000ee8:	f000 f9ea 	bl	80012c0 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8000eec:	f000 f9be 	bl	800126c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ef0:	f000 f93c 	bl	800116c <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      get_IMU1(); // IMU 데이터를 업데이트
 8000ef4:	f000 fa8c 	bl	8001410 <get_IMU1>
      get_IMU2();
 8000ef8:	f000 fbee 	bl	80016d8 <get_IMU2>

      // Roll, Pitch, Yaw 데이터를 전송 버퍼에 넣기
      data_buffer[0] = 0xAA;
 8000efc:	4b41      	ldr	r3, [pc, #260]	@ (8001004 <main+0x13c>)
 8000efe:	22aa      	movs	r2, #170	@ 0xaa
 8000f00:	701a      	strb	r2, [r3, #0]
      memcpy(data_buffer + 1, &roll1, sizeof(roll1));
 8000f02:	4941      	ldr	r1, [pc, #260]	@ (8001008 <main+0x140>)
 8000f04:	4b41      	ldr	r3, [pc, #260]	@ (800100c <main+0x144>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	600a      	str	r2, [r1, #0]
 8000f0c:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 9, &pitch1, sizeof(pitch1));
 8000f0e:	4940      	ldr	r1, [pc, #256]	@ (8001010 <main+0x148>)
 8000f10:	4b40      	ldr	r3, [pc, #256]	@ (8001014 <main+0x14c>)
 8000f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f16:	600a      	str	r2, [r1, #0]
 8000f18:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 17, &yaw1, sizeof(yaw1));
 8000f1a:	493f      	ldr	r1, [pc, #252]	@ (8001018 <main+0x150>)
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800101c <main+0x154>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	600a      	str	r2, [r1, #0]
 8000f24:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 25, &gyro_x1, sizeof(gyro_x1));
 8000f26:	493e      	ldr	r1, [pc, #248]	@ (8001020 <main+0x158>)
 8000f28:	4b3e      	ldr	r3, [pc, #248]	@ (8001024 <main+0x15c>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	600a      	str	r2, [r1, #0]
 8000f30:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 33, &gyro_y1, sizeof(gyro_y1));
 8000f32:	493d      	ldr	r1, [pc, #244]	@ (8001028 <main+0x160>)
 8000f34:	4b3d      	ldr	r3, [pc, #244]	@ (800102c <main+0x164>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	600a      	str	r2, [r1, #0]
 8000f3c:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 41, &gyro_z1, sizeof(gyro_z1));
 8000f3e:	493c      	ldr	r1, [pc, #240]	@ (8001030 <main+0x168>)
 8000f40:	4b3c      	ldr	r3, [pc, #240]	@ (8001034 <main+0x16c>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	600a      	str	r2, [r1, #0]
 8000f48:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 49, &accel_x1, sizeof(accel_x1));
 8000f4a:	493b      	ldr	r1, [pc, #236]	@ (8001038 <main+0x170>)
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800103c <main+0x174>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	600a      	str	r2, [r1, #0]
 8000f54:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 57, &accel_y1, sizeof(accel_y1));
 8000f56:	493a      	ldr	r1, [pc, #232]	@ (8001040 <main+0x178>)
 8000f58:	4b3a      	ldr	r3, [pc, #232]	@ (8001044 <main+0x17c>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	600a      	str	r2, [r1, #0]
 8000f60:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 65, &accel_z1, sizeof(accel_z1));
 8000f62:	4939      	ldr	r1, [pc, #228]	@ (8001048 <main+0x180>)
 8000f64:	4b39      	ldr	r3, [pc, #228]	@ (800104c <main+0x184>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	600a      	str	r2, [r1, #0]
 8000f6c:	604b      	str	r3, [r1, #4]

      memcpy(data_buffer + 73, &roll2, sizeof(roll2));
 8000f6e:	4938      	ldr	r1, [pc, #224]	@ (8001050 <main+0x188>)
 8000f70:	4b38      	ldr	r3, [pc, #224]	@ (8001054 <main+0x18c>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	600a      	str	r2, [r1, #0]
 8000f78:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 81, &pitch2, sizeof(pitch2));
 8000f7a:	4937      	ldr	r1, [pc, #220]	@ (8001058 <main+0x190>)
 8000f7c:	4b37      	ldr	r3, [pc, #220]	@ (800105c <main+0x194>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	600a      	str	r2, [r1, #0]
 8000f84:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 89, &yaw2, sizeof(yaw2));
 8000f86:	4936      	ldr	r1, [pc, #216]	@ (8001060 <main+0x198>)
 8000f88:	4b36      	ldr	r3, [pc, #216]	@ (8001064 <main+0x19c>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	600a      	str	r2, [r1, #0]
 8000f90:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 97, &gyro_x2, sizeof(gyro_x2));
 8000f92:	4935      	ldr	r1, [pc, #212]	@ (8001068 <main+0x1a0>)
 8000f94:	4b35      	ldr	r3, [pc, #212]	@ (800106c <main+0x1a4>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	600a      	str	r2, [r1, #0]
 8000f9c:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 105, &gyro_y2, sizeof(gyro_y2));
 8000f9e:	4934      	ldr	r1, [pc, #208]	@ (8001070 <main+0x1a8>)
 8000fa0:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <main+0x1ac>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	600a      	str	r2, [r1, #0]
 8000fa8:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 113, &gyro_z2, sizeof(gyro_z2));
 8000faa:	4933      	ldr	r1, [pc, #204]	@ (8001078 <main+0x1b0>)
 8000fac:	4b33      	ldr	r3, [pc, #204]	@ (800107c <main+0x1b4>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	600a      	str	r2, [r1, #0]
 8000fb4:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 121, &accel_x2, sizeof(accel_x2));
 8000fb6:	4932      	ldr	r1, [pc, #200]	@ (8001080 <main+0x1b8>)
 8000fb8:	4b32      	ldr	r3, [pc, #200]	@ (8001084 <main+0x1bc>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	600a      	str	r2, [r1, #0]
 8000fc0:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 129, &accel_y2, sizeof(accel_y2));
 8000fc2:	4931      	ldr	r1, [pc, #196]	@ (8001088 <main+0x1c0>)
 8000fc4:	4b31      	ldr	r3, [pc, #196]	@ (800108c <main+0x1c4>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	600a      	str	r2, [r1, #0]
 8000fcc:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 137, &accel_z2, sizeof(accel_z2));
 8000fce:	4930      	ldr	r1, [pc, #192]	@ (8001090 <main+0x1c8>)
 8000fd0:	4b30      	ldr	r3, [pc, #192]	@ (8001094 <main+0x1cc>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	600a      	str	r2, [r1, #0]
 8000fd8:	604b      	str	r3, [r1, #4]

      data_buffer[145] = 0xBB;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <main+0x13c>)
 8000fdc:	22bb      	movs	r2, #187	@ 0xbb
 8000fde:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

      // USB CDC를 통해 데이터 전송
      if (CDC_Transmit_FS(data_buffer, sizeof(data_buffer)) == USBD_OK) {
 8000fe2:	2192      	movs	r1, #146	@ 0x92
 8000fe4:	4807      	ldr	r0, [pc, #28]	@ (8001004 <main+0x13c>)
 8000fe6:	f008 fd9b 	bl	8009b20 <CDC_Transmit_FS>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d104      	bne.n	8000ffa <main+0x132>
         HAL_Delay(500); // 100ms 대기 (전송 주기)
 8000ff0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ff4:	f001 f90c 	bl	8002210 <HAL_Delay>
 8000ff8:	e77c      	b.n	8000ef4 <main+0x2c>
      } else {
         HAL_Delay(10); // 실패 시 잠시 대기 후 재시도
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f001 f908 	bl	8002210 <HAL_Delay>
      get_IMU1(); // IMU 데이터를 업데이트
 8001000:	e778      	b.n	8000ef4 <main+0x2c>
 8001002:	bf00      	nop
 8001004:	200004b8 	.word	0x200004b8
 8001008:	200004b9 	.word	0x200004b9
 800100c:	20000350 	.word	0x20000350
 8001010:	200004c1 	.word	0x200004c1
 8001014:	20000358 	.word	0x20000358
 8001018:	200004c9 	.word	0x200004c9
 800101c:	20000360 	.word	0x20000360
 8001020:	200004d1 	.word	0x200004d1
 8001024:	20000368 	.word	0x20000368
 8001028:	200004d9 	.word	0x200004d9
 800102c:	20000370 	.word	0x20000370
 8001030:	200004e1 	.word	0x200004e1
 8001034:	20000378 	.word	0x20000378
 8001038:	200004e9 	.word	0x200004e9
 800103c:	20000380 	.word	0x20000380
 8001040:	200004f1 	.word	0x200004f1
 8001044:	20000388 	.word	0x20000388
 8001048:	200004f9 	.word	0x200004f9
 800104c:	20000390 	.word	0x20000390
 8001050:	20000501 	.word	0x20000501
 8001054:	20000398 	.word	0x20000398
 8001058:	20000509 	.word	0x20000509
 800105c:	200003a0 	.word	0x200003a0
 8001060:	20000511 	.word	0x20000511
 8001064:	200003a8 	.word	0x200003a8
 8001068:	20000519 	.word	0x20000519
 800106c:	200003b0 	.word	0x200003b0
 8001070:	20000521 	.word	0x20000521
 8001074:	200003b8 	.word	0x200003b8
 8001078:	20000529 	.word	0x20000529
 800107c:	200003c0 	.word	0x200003c0
 8001080:	20000531 	.word	0x20000531
 8001084:	200003c8 	.word	0x200003c8
 8001088:	20000539 	.word	0x20000539
 800108c:	200003d0 	.word	0x200003d0
 8001090:	20000541 	.word	0x20000541
 8001094:	200003d8 	.word	0x200003d8

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	@ 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	@ 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00a f8a3 	bl	800b1f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <SystemClock_Config+0xcc>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <SystemClock_Config+0xcc>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80010cc:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <SystemClock_Config+0xcc>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <SystemClock_Config+0xd0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010e4:	4a20      	ldr	r2, [pc, #128]	@ (8001168 <SystemClock_Config+0xd0>)
 80010e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2310      	movs	r3, #16
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001108:	2300      	movs	r3, #0
 800110a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800110c:	2310      	movs	r3, #16
 800110e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001110:	23c0      	movs	r3, #192	@ 0xc0
 8001112:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001118:	2304      	movs	r3, #4
 800111a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f003 f983 	bl	800442c <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800112c:	f000 fc38 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fbe6 	bl	800491c <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001156:	f000 fc23 	bl	80019a0 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	@ 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2043      	movs	r0, #67	@ 0x43
 8001176:	f001 f94a 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800117a:	2043      	movs	r0, #67	@ 0x43
 800117c:	f001 f963 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2025      	movs	r0, #37	@ 0x25
 8001186:	f001 f942 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800118a:	2025      	movs	r0, #37	@ 0x25
 800118c:	f001 f95b 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2026      	movs	r0, #38	@ 0x26
 8001196:	f001 f93a 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800119a:	2026      	movs	r0, #38	@ 0x26
 800119c:	f001 f953 	bl	8002446 <HAL_NVIC_EnableIRQ>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	463b      	mov	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <MX_TIM9_Init+0x6c>)
 80011b8:	4a16      	ldr	r2, [pc, #88]	@ (8001214 <MX_TIM9_Init+0x70>)
 80011ba:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8399;
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_TIM9_Init+0x6c>)
 80011be:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80011c2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_TIM9_Init+0x6c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_TIM9_Init+0x6c>)
 80011cc:	2263      	movs	r2, #99	@ 0x63
 80011ce:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_TIM9_Init+0x6c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <MX_TIM9_Init+0x6c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <MX_TIM9_Init+0x6c>)
 80011de:	f003 fd7d 	bl	8004cdc <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80011e8:	f000 fbda 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	@ (8001210 <MX_TIM9_Init+0x6c>)
 80011f8:	f003 fdbf 	bl	8004d7a <HAL_TIM_ConfigClockSource>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001202:	f000 fbcd 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000054c 	.word	0x2000054c
 8001214:	40014000 	.word	0x40014000

08001218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_USART1_UART_Init+0x4c>)
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_USART1_UART_Init+0x50>)
 8001220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <MX_USART1_UART_Init+0x4c>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_USART1_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_USART1_UART_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <MX_USART1_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_USART1_UART_Init+0x4c>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_USART1_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_USART1_UART_Init+0x4c>)
 8001250:	f003 ff80 	bl	8005154 <HAL_UART_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800125a:	f000 fba1 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000594 	.word	0x20000594
 8001268:	40011000 	.word	0x40011000

0800126c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001272:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <MX_USART2_UART_Init+0x50>)
 8001274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f003 ff56 	bl	8005154 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ae:	f000 fb77 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200005dc 	.word	0x200005dc
 80012bc:	40004400 	.word	0x40004400

080012c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_USART6_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <MX_USART6_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_USART6_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_USART6_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_USART6_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <MX_USART6_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_USART6_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <MX_USART6_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_USART6_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_USART6_UART_Init+0x4c>)
 80012f8:	f003 ff2c 	bl	8005154 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 fb4d 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000624 	.word	0x20000624
 8001310:	40011400 	.word	0x40011400

08001314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <MX_DMA_Init+0xa8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a26      	ldr	r2, [pc, #152]	@ (80013bc <MX_DMA_Init+0xa8>)
 8001324:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <MX_DMA_Init+0xa8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <MX_DMA_Init+0xa8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <MX_DMA_Init+0xa8>)
 8001340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <MX_DMA_Init+0xa8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2010      	movs	r0, #16
 8001358:	f001 f859 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800135c:	2010      	movs	r0, #16
 800135e:	f001 f872 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2011      	movs	r0, #17
 8001368:	f001 f851 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800136c:	2011      	movs	r0, #17
 800136e:	f001 f86a 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	203a      	movs	r0, #58	@ 0x3a
 8001378:	f001 f849 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800137c:	203a      	movs	r0, #58	@ 0x3a
 800137e:	f001 f862 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2044      	movs	r0, #68	@ 0x44
 8001388:	f001 f841 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800138c:	2044      	movs	r0, #68	@ 0x44
 800138e:	f001 f85a 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2045      	movs	r0, #69	@ 0x45
 8001398:	f001 f839 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800139c:	2045      	movs	r0, #69	@ 0x45
 800139e:	f001 f852 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2046      	movs	r0, #70	@ 0x46
 80013a8:	f001 f831 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80013ac:	2046      	movs	r0, #70	@ 0x46
 80013ae:	f001 f84a 	bl	8002446 <HAL_NVIC_EnableIRQ>

}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_GPIO_Init+0x4c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <MX_GPIO_Init+0x4c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <MX_GPIO_Init+0x4c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_GPIO_Init+0x4c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a08      	ldr	r2, [pc, #32]	@ (800140c <MX_GPIO_Init+0x4c>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_GPIO_Init+0x4c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <get_IMU1>:

/* USER CODE BEGIN 4 */
void get_IMU1()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart1, IMU1array, 50);  // 수신 데이터 크기 확장
 8001416:	2232      	movs	r2, #50	@ 0x32
 8001418:	499b      	ldr	r1, [pc, #620]	@ (8001688 <get_IMU1+0x278>)
 800141a:	489c      	ldr	r0, [pc, #624]	@ (800168c <get_IMU1+0x27c>)
 800141c:	f003 feea 	bl	80051f4 <HAL_UART_Receive_DMA>
    int cnt0 = 0, pos = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 50; i++) {
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	e0c1      	b.n	80015b2 <get_IMU1+0x1a2>
        if (IMU1array[i] == ',') {
 800142e:	4a96      	ldr	r2, [pc, #600]	@ (8001688 <get_IMU1+0x278>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b2c      	cmp	r3, #44	@ 0x2c
 8001438:	f040 80b8 	bne.w	80015ac <get_IMU1+0x19c>
            switch (cnt0++) {
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	60fa      	str	r2, [r7, #12]
 8001442:	2b08      	cmp	r3, #8
 8001444:	f200 80af 	bhi.w	80015a6 <get_IMU1+0x196>
 8001448:	a201      	add	r2, pc, #4	@ (adr r2, 8001450 <get_IMU1+0x40>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	08001475 	.word	0x08001475
 8001454:	08001497 	.word	0x08001497
 8001458:	080014b9 	.word	0x080014b9
 800145c:	080014db 	.word	0x080014db
 8001460:	080014fd 	.word	0x080014fd
 8001464:	0800151f 	.word	0x0800151f
 8001468:	08001541 	.word	0x08001541
 800146c:	08001563 	.word	0x08001563
 8001470:	08001585 	.word	0x08001585
                case 0: strncpy(alpha1, (char *)IMU1array + pos, i - pos); alpha1[i - pos] = '\0'; break;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4a84      	ldr	r2, [pc, #528]	@ (8001688 <get_IMU1+0x278>)
 8001478:	1899      	adds	r1, r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	461a      	mov	r2, r3
 8001482:	4883      	ldr	r0, [pc, #524]	@ (8001690 <get_IMU1+0x280>)
 8001484:	f009 fecf 	bl	800b226 <strncpy>
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	4a80      	ldr	r2, [pc, #512]	@ (8001690 <get_IMU1+0x280>)
 8001490:	2100      	movs	r1, #0
 8001492:	54d1      	strb	r1, [r2, r3]
 8001494:	e087      	b.n	80015a6 <get_IMU1+0x196>
                case 1: strncpy(beta1, (char *)IMU1array + pos, i - pos); beta1[i - pos] = '\0'; break;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	4a7b      	ldr	r2, [pc, #492]	@ (8001688 <get_IMU1+0x278>)
 800149a:	1899      	adds	r1, r3, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	487b      	ldr	r0, [pc, #492]	@ (8001694 <get_IMU1+0x284>)
 80014a6:	f009 febe 	bl	800b226 <strncpy>
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	4a78      	ldr	r2, [pc, #480]	@ (8001694 <get_IMU1+0x284>)
 80014b2:	2100      	movs	r1, #0
 80014b4:	54d1      	strb	r1, [r2, r3]
 80014b6:	e076      	b.n	80015a6 <get_IMU1+0x196>
                case 2: strncpy(gamm1, (char *)IMU1array + pos, i - pos); gamm1[i - pos] = '\0'; break;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4a73      	ldr	r2, [pc, #460]	@ (8001688 <get_IMU1+0x278>)
 80014bc:	1899      	adds	r1, r3, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	4874      	ldr	r0, [pc, #464]	@ (8001698 <get_IMU1+0x288>)
 80014c8:	f009 fead 	bl	800b226 <strncpy>
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4a71      	ldr	r2, [pc, #452]	@ (8001698 <get_IMU1+0x288>)
 80014d4:	2100      	movs	r1, #0
 80014d6:	54d1      	strb	r1, [r2, r3]
 80014d8:	e065      	b.n	80015a6 <get_IMU1+0x196>
                case 3: strncpy(gyro_x1_str, (char *)IMU1array + pos, i - pos); gyro_x1_str[i - pos] = '\0'; break;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001688 <get_IMU1+0x278>)
 80014de:	1899      	adds	r1, r3, r2
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	486c      	ldr	r0, [pc, #432]	@ (800169c <get_IMU1+0x28c>)
 80014ea:	f009 fe9c 	bl	800b226 <strncpy>
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	4a69      	ldr	r2, [pc, #420]	@ (800169c <get_IMU1+0x28c>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	54d1      	strb	r1, [r2, r3]
 80014fa:	e054      	b.n	80015a6 <get_IMU1+0x196>
                case 4: strncpy(gyro_y1_str, (char *)IMU1array + pos, i - pos); gyro_y1_str[i - pos] = '\0'; break;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4a62      	ldr	r2, [pc, #392]	@ (8001688 <get_IMU1+0x278>)
 8001500:	1899      	adds	r1, r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	461a      	mov	r2, r3
 800150a:	4865      	ldr	r0, [pc, #404]	@ (80016a0 <get_IMU1+0x290>)
 800150c:	f009 fe8b 	bl	800b226 <strncpy>
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4a62      	ldr	r2, [pc, #392]	@ (80016a0 <get_IMU1+0x290>)
 8001518:	2100      	movs	r1, #0
 800151a:	54d1      	strb	r1, [r2, r3]
 800151c:	e043      	b.n	80015a6 <get_IMU1+0x196>
                case 5: strncpy(gyro_z1_str, (char *)IMU1array + pos, i - pos); gyro_z1_str[i - pos] = '\0'; break;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	4a59      	ldr	r2, [pc, #356]	@ (8001688 <get_IMU1+0x278>)
 8001522:	1899      	adds	r1, r3, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	461a      	mov	r2, r3
 800152c:	485d      	ldr	r0, [pc, #372]	@ (80016a4 <get_IMU1+0x294>)
 800152e:	f009 fe7a 	bl	800b226 <strncpy>
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	4a5a      	ldr	r2, [pc, #360]	@ (80016a4 <get_IMU1+0x294>)
 800153a:	2100      	movs	r1, #0
 800153c:	54d1      	strb	r1, [r2, r3]
 800153e:	e032      	b.n	80015a6 <get_IMU1+0x196>
                case 6: strncpy(accel_x1_str, (char *)IMU1array + pos, i - pos); accel_x1_str[i - pos] = '\0'; break;
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4a51      	ldr	r2, [pc, #324]	@ (8001688 <get_IMU1+0x278>)
 8001544:	1899      	adds	r1, r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	461a      	mov	r2, r3
 800154e:	4856      	ldr	r0, [pc, #344]	@ (80016a8 <get_IMU1+0x298>)
 8001550:	f009 fe69 	bl	800b226 <strncpy>
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	4a53      	ldr	r2, [pc, #332]	@ (80016a8 <get_IMU1+0x298>)
 800155c:	2100      	movs	r1, #0
 800155e:	54d1      	strb	r1, [r2, r3]
 8001560:	e021      	b.n	80015a6 <get_IMU1+0x196>
                case 7: strncpy(accel_y1_str, (char *)IMU1array + pos, i - pos); accel_y1_str[i - pos] = '\0'; break;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	4a48      	ldr	r2, [pc, #288]	@ (8001688 <get_IMU1+0x278>)
 8001566:	1899      	adds	r1, r3, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	461a      	mov	r2, r3
 8001570:	484e      	ldr	r0, [pc, #312]	@ (80016ac <get_IMU1+0x29c>)
 8001572:	f009 fe58 	bl	800b226 <strncpy>
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	4a4b      	ldr	r2, [pc, #300]	@ (80016ac <get_IMU1+0x29c>)
 800157e:	2100      	movs	r1, #0
 8001580:	54d1      	strb	r1, [r2, r3]
 8001582:	e010      	b.n	80015a6 <get_IMU1+0x196>
                case 8: strncpy(accel_z1_str, (char *)IMU1array + pos, i - pos); accel_z1_str[i - pos] = '\0'; break;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4a40      	ldr	r2, [pc, #256]	@ (8001688 <get_IMU1+0x278>)
 8001588:	1899      	adds	r1, r3, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	461a      	mov	r2, r3
 8001592:	4847      	ldr	r0, [pc, #284]	@ (80016b0 <get_IMU1+0x2a0>)
 8001594:	f009 fe47 	bl	800b226 <strncpy>
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	4a44      	ldr	r2, [pc, #272]	@ (80016b0 <get_IMU1+0x2a0>)
 80015a0:	2100      	movs	r1, #0
 80015a2:	54d1      	strb	r1, [r2, r3]
 80015a4:	bf00      	nop
            }
            pos = i + 1;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 50; i++) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b31      	cmp	r3, #49	@ 0x31
 80015b6:	f77f af3a 	ble.w	800142e <get_IMU1+0x1e>
        }
    }
    roll1 = strtod(alpha1, NULL);
 80015ba:	2100      	movs	r1, #0
 80015bc:	4834      	ldr	r0, [pc, #208]	@ (8001690 <get_IMU1+0x280>)
 80015be:	f009 fd07 	bl	800afd0 <strtod>
 80015c2:	eeb0 7a40 	vmov.f32	s14, s0
 80015c6:	eef0 7a60 	vmov.f32	s15, s1
 80015ca:	4b3a      	ldr	r3, [pc, #232]	@ (80016b4 <get_IMU1+0x2a4>)
 80015cc:	ed83 7b00 	vstr	d7, [r3]
    pitch1 = strtod(beta1, NULL);
 80015d0:	2100      	movs	r1, #0
 80015d2:	4830      	ldr	r0, [pc, #192]	@ (8001694 <get_IMU1+0x284>)
 80015d4:	f009 fcfc 	bl	800afd0 <strtod>
 80015d8:	eeb0 7a40 	vmov.f32	s14, s0
 80015dc:	eef0 7a60 	vmov.f32	s15, s1
 80015e0:	4b35      	ldr	r3, [pc, #212]	@ (80016b8 <get_IMU1+0x2a8>)
 80015e2:	ed83 7b00 	vstr	d7, [r3]
    yaw1 = strtod(gamm1, NULL);
 80015e6:	2100      	movs	r1, #0
 80015e8:	482b      	ldr	r0, [pc, #172]	@ (8001698 <get_IMU1+0x288>)
 80015ea:	f009 fcf1 	bl	800afd0 <strtod>
 80015ee:	eeb0 7a40 	vmov.f32	s14, s0
 80015f2:	eef0 7a60 	vmov.f32	s15, s1
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <get_IMU1+0x2ac>)
 80015f8:	ed83 7b00 	vstr	d7, [r3]
    gyro_x1 = strtod(gyro_x1_str, NULL);
 80015fc:	2100      	movs	r1, #0
 80015fe:	4827      	ldr	r0, [pc, #156]	@ (800169c <get_IMU1+0x28c>)
 8001600:	f009 fce6 	bl	800afd0 <strtod>
 8001604:	eeb0 7a40 	vmov.f32	s14, s0
 8001608:	eef0 7a60 	vmov.f32	s15, s1
 800160c:	4b2c      	ldr	r3, [pc, #176]	@ (80016c0 <get_IMU1+0x2b0>)
 800160e:	ed83 7b00 	vstr	d7, [r3]
    gyro_y1 = strtod(gyro_y1_str, NULL);
 8001612:	2100      	movs	r1, #0
 8001614:	4822      	ldr	r0, [pc, #136]	@ (80016a0 <get_IMU1+0x290>)
 8001616:	f009 fcdb 	bl	800afd0 <strtod>
 800161a:	eeb0 7a40 	vmov.f32	s14, s0
 800161e:	eef0 7a60 	vmov.f32	s15, s1
 8001622:	4b28      	ldr	r3, [pc, #160]	@ (80016c4 <get_IMU1+0x2b4>)
 8001624:	ed83 7b00 	vstr	d7, [r3]
    gyro_z1 = strtod(gyro_z1_str, NULL);
 8001628:	2100      	movs	r1, #0
 800162a:	481e      	ldr	r0, [pc, #120]	@ (80016a4 <get_IMU1+0x294>)
 800162c:	f009 fcd0 	bl	800afd0 <strtod>
 8001630:	eeb0 7a40 	vmov.f32	s14, s0
 8001634:	eef0 7a60 	vmov.f32	s15, s1
 8001638:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <get_IMU1+0x2b8>)
 800163a:	ed83 7b00 	vstr	d7, [r3]
    accel_x1 = strtod(accel_x1_str, NULL);
 800163e:	2100      	movs	r1, #0
 8001640:	4819      	ldr	r0, [pc, #100]	@ (80016a8 <get_IMU1+0x298>)
 8001642:	f009 fcc5 	bl	800afd0 <strtod>
 8001646:	eeb0 7a40 	vmov.f32	s14, s0
 800164a:	eef0 7a60 	vmov.f32	s15, s1
 800164e:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <get_IMU1+0x2bc>)
 8001650:	ed83 7b00 	vstr	d7, [r3]
    accel_y1 = strtod(accel_y1_str, NULL);
 8001654:	2100      	movs	r1, #0
 8001656:	4815      	ldr	r0, [pc, #84]	@ (80016ac <get_IMU1+0x29c>)
 8001658:	f009 fcba 	bl	800afd0 <strtod>
 800165c:	eeb0 7a40 	vmov.f32	s14, s0
 8001660:	eef0 7a60 	vmov.f32	s15, s1
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <get_IMU1+0x2c0>)
 8001666:	ed83 7b00 	vstr	d7, [r3]
    accel_z1 = strtod(accel_z1_str, NULL);
 800166a:	2100      	movs	r1, #0
 800166c:	4810      	ldr	r0, [pc, #64]	@ (80016b0 <get_IMU1+0x2a0>)
 800166e:	f009 fcaf 	bl	800afd0 <strtod>
 8001672:	eeb0 7a40 	vmov.f32	s14, s0
 8001676:	eef0 7a60 	vmov.f32	s15, s1
 800167a:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <get_IMU1+0x2c4>)
 800167c:	ed83 7b00 	vstr	d7, [r3]
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200002e4 	.word	0x200002e4
 800168c:	20000594 	.word	0x20000594
 8001690:	200003e0 	.word	0x200003e0
 8001694:	200003ec 	.word	0x200003ec
 8001698:	200003f8 	.word	0x200003f8
 800169c:	20000404 	.word	0x20000404
 80016a0:	20000410 	.word	0x20000410
 80016a4:	2000041c 	.word	0x2000041c
 80016a8:	20000428 	.word	0x20000428
 80016ac:	20000434 	.word	0x20000434
 80016b0:	20000440 	.word	0x20000440
 80016b4:	20000350 	.word	0x20000350
 80016b8:	20000358 	.word	0x20000358
 80016bc:	20000360 	.word	0x20000360
 80016c0:	20000368 	.word	0x20000368
 80016c4:	20000370 	.word	0x20000370
 80016c8:	20000378 	.word	0x20000378
 80016cc:	20000380 	.word	0x20000380
 80016d0:	20000388 	.word	0x20000388
 80016d4:	20000390 	.word	0x20000390

080016d8 <get_IMU2>:

void get_IMU2()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart6, IMU2array, 50);
 80016de:	2232      	movs	r2, #50	@ 0x32
 80016e0:	499b      	ldr	r1, [pc, #620]	@ (8001950 <get_IMU2+0x278>)
 80016e2:	489c      	ldr	r0, [pc, #624]	@ (8001954 <get_IMU2+0x27c>)
 80016e4:	f003 fd86 	bl	80051f4 <HAL_UART_Receive_DMA>
    int cnt0 = 0, pos = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 50; i++) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	e0c1      	b.n	800187a <get_IMU2+0x1a2>
        if (IMU2array[i] == ',') {
 80016f6:	4a96      	ldr	r2, [pc, #600]	@ (8001950 <get_IMU2+0x278>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b2c      	cmp	r3, #44	@ 0x2c
 8001700:	f040 80b8 	bne.w	8001874 <get_IMU2+0x19c>
            switch (cnt0++) {
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	60fa      	str	r2, [r7, #12]
 800170a:	2b08      	cmp	r3, #8
 800170c:	f200 80af 	bhi.w	800186e <get_IMU2+0x196>
 8001710:	a201      	add	r2, pc, #4	@ (adr r2, 8001718 <get_IMU2+0x40>)
 8001712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001716:	bf00      	nop
 8001718:	0800173d 	.word	0x0800173d
 800171c:	0800175f 	.word	0x0800175f
 8001720:	08001781 	.word	0x08001781
 8001724:	080017a3 	.word	0x080017a3
 8001728:	080017c5 	.word	0x080017c5
 800172c:	080017e7 	.word	0x080017e7
 8001730:	08001809 	.word	0x08001809
 8001734:	0800182b 	.word	0x0800182b
 8001738:	0800184d 	.word	0x0800184d
                case 0: strncpy(alpha2, (char *)IMU2array + pos, i - pos); alpha2[i - pos] = '\0'; break;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4a84      	ldr	r2, [pc, #528]	@ (8001950 <get_IMU2+0x278>)
 8001740:	1899      	adds	r1, r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	461a      	mov	r2, r3
 800174a:	4883      	ldr	r0, [pc, #524]	@ (8001958 <get_IMU2+0x280>)
 800174c:	f009 fd6b 	bl	800b226 <strncpy>
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	4a80      	ldr	r2, [pc, #512]	@ (8001958 <get_IMU2+0x280>)
 8001758:	2100      	movs	r1, #0
 800175a:	54d1      	strb	r1, [r2, r3]
 800175c:	e087      	b.n	800186e <get_IMU2+0x196>
                case 1: strncpy(beta2, (char *)IMU2array + pos, i - pos); beta2[i - pos] = '\0'; break;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	4a7b      	ldr	r2, [pc, #492]	@ (8001950 <get_IMU2+0x278>)
 8001762:	1899      	adds	r1, r3, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	461a      	mov	r2, r3
 800176c:	487b      	ldr	r0, [pc, #492]	@ (800195c <get_IMU2+0x284>)
 800176e:	f009 fd5a 	bl	800b226 <strncpy>
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	4a78      	ldr	r2, [pc, #480]	@ (800195c <get_IMU2+0x284>)
 800177a:	2100      	movs	r1, #0
 800177c:	54d1      	strb	r1, [r2, r3]
 800177e:	e076      	b.n	800186e <get_IMU2+0x196>
                case 2: strncpy(gamm2, (char *)IMU2array + pos, i - pos); gamm2[i - pos] = '\0'; break;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4a73      	ldr	r2, [pc, #460]	@ (8001950 <get_IMU2+0x278>)
 8001784:	1899      	adds	r1, r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	461a      	mov	r2, r3
 800178e:	4874      	ldr	r0, [pc, #464]	@ (8001960 <get_IMU2+0x288>)
 8001790:	f009 fd49 	bl	800b226 <strncpy>
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	4a71      	ldr	r2, [pc, #452]	@ (8001960 <get_IMU2+0x288>)
 800179c:	2100      	movs	r1, #0
 800179e:	54d1      	strb	r1, [r2, r3]
 80017a0:	e065      	b.n	800186e <get_IMU2+0x196>
                case 3: strncpy(gyro_x2_str, (char *)IMU2array + pos, i - pos); gyro_x2_str[i - pos] = '\0'; break;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001950 <get_IMU2+0x278>)
 80017a6:	1899      	adds	r1, r3, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	486c      	ldr	r0, [pc, #432]	@ (8001964 <get_IMU2+0x28c>)
 80017b2:	f009 fd38 	bl	800b226 <strncpy>
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	4a69      	ldr	r2, [pc, #420]	@ (8001964 <get_IMU2+0x28c>)
 80017be:	2100      	movs	r1, #0
 80017c0:	54d1      	strb	r1, [r2, r3]
 80017c2:	e054      	b.n	800186e <get_IMU2+0x196>
                case 4: strncpy(gyro_y2_str, (char *)IMU2array + pos, i - pos); gyro_y2_str[i - pos] = '\0'; break;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4a62      	ldr	r2, [pc, #392]	@ (8001950 <get_IMU2+0x278>)
 80017c8:	1899      	adds	r1, r3, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	4865      	ldr	r0, [pc, #404]	@ (8001968 <get_IMU2+0x290>)
 80017d4:	f009 fd27 	bl	800b226 <strncpy>
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	4a62      	ldr	r2, [pc, #392]	@ (8001968 <get_IMU2+0x290>)
 80017e0:	2100      	movs	r1, #0
 80017e2:	54d1      	strb	r1, [r2, r3]
 80017e4:	e043      	b.n	800186e <get_IMU2+0x196>
                case 5: strncpy(gyro_z2_str, (char *)(char *)IMU2array + pos, i - pos); gyro_z2_str[i - pos] = '\0'; break;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	4a59      	ldr	r2, [pc, #356]	@ (8001950 <get_IMU2+0x278>)
 80017ea:	1899      	adds	r1, r3, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	485d      	ldr	r0, [pc, #372]	@ (800196c <get_IMU2+0x294>)
 80017f6:	f009 fd16 	bl	800b226 <strncpy>
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	4a5a      	ldr	r2, [pc, #360]	@ (800196c <get_IMU2+0x294>)
 8001802:	2100      	movs	r1, #0
 8001804:	54d1      	strb	r1, [r2, r3]
 8001806:	e032      	b.n	800186e <get_IMU2+0x196>
                case 6: strncpy(accel_x2_str, (char *)IMU2array + pos, i - pos); accel_x2_str[i - pos] = '\0'; break;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4a51      	ldr	r2, [pc, #324]	@ (8001950 <get_IMU2+0x278>)
 800180c:	1899      	adds	r1, r3, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	461a      	mov	r2, r3
 8001816:	4856      	ldr	r0, [pc, #344]	@ (8001970 <get_IMU2+0x298>)
 8001818:	f009 fd05 	bl	800b226 <strncpy>
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	4a53      	ldr	r2, [pc, #332]	@ (8001970 <get_IMU2+0x298>)
 8001824:	2100      	movs	r1, #0
 8001826:	54d1      	strb	r1, [r2, r3]
 8001828:	e021      	b.n	800186e <get_IMU2+0x196>
                case 7: strncpy(accel_y2_str, (char *)IMU2array + pos, i - pos); accel_y2_str[i - pos] = '\0'; break;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	4a48      	ldr	r2, [pc, #288]	@ (8001950 <get_IMU2+0x278>)
 800182e:	1899      	adds	r1, r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	461a      	mov	r2, r3
 8001838:	484e      	ldr	r0, [pc, #312]	@ (8001974 <get_IMU2+0x29c>)
 800183a:	f009 fcf4 	bl	800b226 <strncpy>
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	4a4b      	ldr	r2, [pc, #300]	@ (8001974 <get_IMU2+0x29c>)
 8001846:	2100      	movs	r1, #0
 8001848:	54d1      	strb	r1, [r2, r3]
 800184a:	e010      	b.n	800186e <get_IMU2+0x196>
                case 8: strncpy(accel_z2_str, (char *)IMU2array + pos, i - pos); accel_z2_str[i - pos] = '\0'; break;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4a40      	ldr	r2, [pc, #256]	@ (8001950 <get_IMU2+0x278>)
 8001850:	1899      	adds	r1, r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	461a      	mov	r2, r3
 800185a:	4847      	ldr	r0, [pc, #284]	@ (8001978 <get_IMU2+0x2a0>)
 800185c:	f009 fce3 	bl	800b226 <strncpy>
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	4a44      	ldr	r2, [pc, #272]	@ (8001978 <get_IMU2+0x2a0>)
 8001868:	2100      	movs	r1, #0
 800186a:	54d1      	strb	r1, [r2, r3]
 800186c:	bf00      	nop
            }
            pos = i + 1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3301      	adds	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 50; i++) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3301      	adds	r3, #1
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b31      	cmp	r3, #49	@ 0x31
 800187e:	f77f af3a 	ble.w	80016f6 <get_IMU2+0x1e>
        }
    }
    roll2 = strtod(alpha2, NULL);
 8001882:	2100      	movs	r1, #0
 8001884:	4834      	ldr	r0, [pc, #208]	@ (8001958 <get_IMU2+0x280>)
 8001886:	f009 fba3 	bl	800afd0 <strtod>
 800188a:	eeb0 7a40 	vmov.f32	s14, s0
 800188e:	eef0 7a60 	vmov.f32	s15, s1
 8001892:	4b3a      	ldr	r3, [pc, #232]	@ (800197c <get_IMU2+0x2a4>)
 8001894:	ed83 7b00 	vstr	d7, [r3]
    pitch2 = strtod(beta2, NULL);
 8001898:	2100      	movs	r1, #0
 800189a:	4830      	ldr	r0, [pc, #192]	@ (800195c <get_IMU2+0x284>)
 800189c:	f009 fb98 	bl	800afd0 <strtod>
 80018a0:	eeb0 7a40 	vmov.f32	s14, s0
 80018a4:	eef0 7a60 	vmov.f32	s15, s1
 80018a8:	4b35      	ldr	r3, [pc, #212]	@ (8001980 <get_IMU2+0x2a8>)
 80018aa:	ed83 7b00 	vstr	d7, [r3]
    yaw2 = strtod(gamm2, NULL);
 80018ae:	2100      	movs	r1, #0
 80018b0:	482b      	ldr	r0, [pc, #172]	@ (8001960 <get_IMU2+0x288>)
 80018b2:	f009 fb8d 	bl	800afd0 <strtod>
 80018b6:	eeb0 7a40 	vmov.f32	s14, s0
 80018ba:	eef0 7a60 	vmov.f32	s15, s1
 80018be:	4b31      	ldr	r3, [pc, #196]	@ (8001984 <get_IMU2+0x2ac>)
 80018c0:	ed83 7b00 	vstr	d7, [r3]
    gyro_x2 = strtod(gyro_x2_str, NULL);
 80018c4:	2100      	movs	r1, #0
 80018c6:	4827      	ldr	r0, [pc, #156]	@ (8001964 <get_IMU2+0x28c>)
 80018c8:	f009 fb82 	bl	800afd0 <strtod>
 80018cc:	eeb0 7a40 	vmov.f32	s14, s0
 80018d0:	eef0 7a60 	vmov.f32	s15, s1
 80018d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001988 <get_IMU2+0x2b0>)
 80018d6:	ed83 7b00 	vstr	d7, [r3]
    gyro_y2 = strtod(gyro_y2_str, NULL);
 80018da:	2100      	movs	r1, #0
 80018dc:	4822      	ldr	r0, [pc, #136]	@ (8001968 <get_IMU2+0x290>)
 80018de:	f009 fb77 	bl	800afd0 <strtod>
 80018e2:	eeb0 7a40 	vmov.f32	s14, s0
 80018e6:	eef0 7a60 	vmov.f32	s15, s1
 80018ea:	4b28      	ldr	r3, [pc, #160]	@ (800198c <get_IMU2+0x2b4>)
 80018ec:	ed83 7b00 	vstr	d7, [r3]
    gyro_z2 = strtod(gyro_z2_str, NULL);
 80018f0:	2100      	movs	r1, #0
 80018f2:	481e      	ldr	r0, [pc, #120]	@ (800196c <get_IMU2+0x294>)
 80018f4:	f009 fb6c 	bl	800afd0 <strtod>
 80018f8:	eeb0 7a40 	vmov.f32	s14, s0
 80018fc:	eef0 7a60 	vmov.f32	s15, s1
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <get_IMU2+0x2b8>)
 8001902:	ed83 7b00 	vstr	d7, [r3]
    accel_x2 = strtod(accel_x2_str, NULL);
 8001906:	2100      	movs	r1, #0
 8001908:	4819      	ldr	r0, [pc, #100]	@ (8001970 <get_IMU2+0x298>)
 800190a:	f009 fb61 	bl	800afd0 <strtod>
 800190e:	eeb0 7a40 	vmov.f32	s14, s0
 8001912:	eef0 7a60 	vmov.f32	s15, s1
 8001916:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <get_IMU2+0x2bc>)
 8001918:	ed83 7b00 	vstr	d7, [r3]
    accel_y2 = strtod(accel_y2_str, NULL);
 800191c:	2100      	movs	r1, #0
 800191e:	4815      	ldr	r0, [pc, #84]	@ (8001974 <get_IMU2+0x29c>)
 8001920:	f009 fb56 	bl	800afd0 <strtod>
 8001924:	eeb0 7a40 	vmov.f32	s14, s0
 8001928:	eef0 7a60 	vmov.f32	s15, s1
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <get_IMU2+0x2c0>)
 800192e:	ed83 7b00 	vstr	d7, [r3]
    accel_z2 = strtod(accel_z2_str, NULL);
 8001932:	2100      	movs	r1, #0
 8001934:	4810      	ldr	r0, [pc, #64]	@ (8001978 <get_IMU2+0x2a0>)
 8001936:	f009 fb4b 	bl	800afd0 <strtod>
 800193a:	eeb0 7a40 	vmov.f32	s14, s0
 800193e:	eef0 7a60 	vmov.f32	s15, s1
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <get_IMU2+0x2c4>)
 8001944:	ed83 7b00 	vstr	d7, [r3]
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000318 	.word	0x20000318
 8001954:	20000624 	.word	0x20000624
 8001958:	2000044c 	.word	0x2000044c
 800195c:	20000458 	.word	0x20000458
 8001960:	20000464 	.word	0x20000464
 8001964:	20000470 	.word	0x20000470
 8001968:	2000047c 	.word	0x2000047c
 800196c:	20000488 	.word	0x20000488
 8001970:	20000494 	.word	0x20000494
 8001974:	200004a0 	.word	0x200004a0
 8001978:	200004ac 	.word	0x200004ac
 800197c:	20000398 	.word	0x20000398
 8001980:	200003a0 	.word	0x200003a0
 8001984:	200003a8 	.word	0x200003a8
 8001988:	200003b0 	.word	0x200003b0
 800198c:	200003b8 	.word	0x200003b8
 8001990:	200003c0 	.word	0x200003c0
 8001994:	200003c8 	.word	0x200003c8
 8001998:	200003d0 	.word	0x200003d0
 800199c:	200003d8 	.word	0x200003d8

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <Error_Handler+0x8>

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	4a0f      	ldr	r2, [pc, #60]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0b      	ldr	r2, [pc, #44]	@ (8001a38 <HAL_TIM_Base_MspInit+0x3c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10d      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1e:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40014000 	.word	0x40014000
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08e      	sub	sp, #56	@ 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a90      	ldr	r2, [pc, #576]	@ (8001ca0 <HAL_UART_MspInit+0x260>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	f040 808c 	bne.w	8001b7c <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
 8001a68:	4b8e      	ldr	r3, [pc, #568]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6c:	4a8d      	ldr	r2, [pc, #564]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a74:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	623b      	str	r3, [r7, #32]
 8001a7e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	4b87      	ldr	r3, [pc, #540]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a88:	4a86      	ldr	r2, [pc, #536]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a90:	4b84      	ldr	r3, [pc, #528]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	487b      	ldr	r0, [pc, #492]	@ (8001ca8 <HAL_UART_MspInit+0x268>)
 8001aba:	f001 f8e1 	bl	8002c80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001abe:	4b7b      	ldr	r3, [pc, #492]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001ac0:	4a7b      	ldr	r2, [pc, #492]	@ (8001cb0 <HAL_UART_MspInit+0x270>)
 8001ac2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ac4:	4b79      	ldr	r3, [pc, #484]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001ac6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001aca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001acc:	4b77      	ldr	r3, [pc, #476]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad2:	4b76      	ldr	r3, [pc, #472]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad8:	4b74      	ldr	r3, [pc, #464]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001ada:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ade:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ae0:	4b72      	ldr	r3, [pc, #456]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae6:	4b71      	ldr	r3, [pc, #452]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001aec:	4b6f      	ldr	r3, [pc, #444]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001af2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001af4:	4b6d      	ldr	r3, [pc, #436]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001afa:	4b6c      	ldr	r3, [pc, #432]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b00:	486a      	ldr	r0, [pc, #424]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001b02:	f000 fcbb 	bl	800247c <HAL_DMA_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001b0c:	f7ff ff48 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a66      	ldr	r2, [pc, #408]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001b14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b16:	4a65      	ldr	r2, [pc, #404]	@ (8001cac <HAL_UART_MspInit+0x26c>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001b1c:	4b65      	ldr	r3, [pc, #404]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b1e:	4a66      	ldr	r2, [pc, #408]	@ (8001cb8 <HAL_UART_MspInit+0x278>)
 8001b20:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001b22:	4b64      	ldr	r3, [pc, #400]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b28:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2a:	4b62      	ldr	r3, [pc, #392]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b2c:	2240      	movs	r2, #64	@ 0x40
 8001b2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b30:	4b60      	ldr	r3, [pc, #384]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b36:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b3c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b44:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b50:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b52:	4b58      	ldr	r3, [pc, #352]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b58:	4b56      	ldr	r3, [pc, #344]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b5e:	4855      	ldr	r0, [pc, #340]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b60:	f000 fc8c 	bl	800247c <HAL_DMA_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001b6a:	f7ff ff19 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a50      	ldr	r2, [pc, #320]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b72:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b74:	4a4f      	ldr	r2, [pc, #316]	@ (8001cb4 <HAL_UART_MspInit+0x274>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b7a:	e139      	b.n	8001df0 <HAL_UART_MspInit+0x3b0>
  else if(huart->Instance==USART2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a4e      	ldr	r2, [pc, #312]	@ (8001cbc <HAL_UART_MspInit+0x27c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	f040 80a4 	bne.w	8001cd0 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	4b45      	ldr	r3, [pc, #276]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	4a44      	ldr	r2, [pc, #272]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b98:	4b42      	ldr	r3, [pc, #264]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bac:	4a3d      	ldr	r2, [pc, #244]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca4 <HAL_UART_MspInit+0x264>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bc0:	230c      	movs	r3, #12
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4833      	ldr	r0, [pc, #204]	@ (8001ca8 <HAL_UART_MspInit+0x268>)
 8001bdc:	f001 f850 	bl	8002c80 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001be0:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001be2:	4a38      	ldr	r2, [pc, #224]	@ (8001cc4 <HAL_UART_MspInit+0x284>)
 8001be4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001be6:	4b36      	ldr	r3, [pc, #216]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001be8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bee:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf4:	4b32      	ldr	r3, [pc, #200]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfa:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001bfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c00:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c02:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c14:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c16:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c1c:	4b28      	ldr	r3, [pc, #160]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c22:	4827      	ldr	r0, [pc, #156]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001c24:	f000 fc2a 	bl	800247c <HAL_DMA_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8001c2e:	f7ff feb7 	bl	80019a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a22      	ldr	r2, [pc, #136]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001c36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c38:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <HAL_UART_MspInit+0x280>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c3e:	4b22      	ldr	r3, [pc, #136]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c40:	4a22      	ldr	r2, [pc, #136]	@ (8001ccc <HAL_UART_MspInit+0x28c>)
 8001c42:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c44:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c4e:	2240      	movs	r2, #64	@ 0x40
 8001c50:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c5e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c72:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c80:	4811      	ldr	r0, [pc, #68]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c82:	f000 fbfb 	bl	800247c <HAL_DMA_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_MspInit+0x250>
      Error_Handler();
 8001c8c:	f7ff fe88 	bl	80019a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c94:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <HAL_UART_MspInit+0x288>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c9c:	e0a8      	b.n	8001df0 <HAL_UART_MspInit+0x3b0>
 8001c9e:	bf00      	nop
 8001ca0:	40011000 	.word	0x40011000
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	2000066c 	.word	0x2000066c
 8001cb0:	40026488 	.word	0x40026488
 8001cb4:	200006cc 	.word	0x200006cc
 8001cb8:	400264b8 	.word	0x400264b8
 8001cbc:	40004400 	.word	0x40004400
 8001cc0:	2000072c 	.word	0x2000072c
 8001cc4:	40026088 	.word	0x40026088
 8001cc8:	2000078c 	.word	0x2000078c
 8001ccc:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART6)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a48      	ldr	r2, [pc, #288]	@ (8001df8 <HAL_UART_MspInit+0x3b8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	f040 808a 	bne.w	8001df0 <HAL_UART_MspInit+0x3b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	4b46      	ldr	r3, [pc, #280]	@ (8001dfc <HAL_UART_MspInit+0x3bc>)
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	4a45      	ldr	r2, [pc, #276]	@ (8001dfc <HAL_UART_MspInit+0x3bc>)
 8001ce6:	f043 0320 	orr.w	r3, r3, #32
 8001cea:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cec:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <HAL_UART_MspInit+0x3bc>)
 8001cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dfc <HAL_UART_MspInit+0x3bc>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	4a3e      	ldr	r2, [pc, #248]	@ (8001dfc <HAL_UART_MspInit+0x3bc>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d08:	4b3c      	ldr	r3, [pc, #240]	@ (8001dfc <HAL_UART_MspInit+0x3bc>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d14:	23c0      	movs	r3, #192	@ 0xc0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d24:	2308      	movs	r3, #8
 8001d26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4834      	ldr	r0, [pc, #208]	@ (8001e00 <HAL_UART_MspInit+0x3c0>)
 8001d30:	f000 ffa6 	bl	8002c80 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8001d34:	4b33      	ldr	r3, [pc, #204]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d36:	4a34      	ldr	r2, [pc, #208]	@ (8001e08 <HAL_UART_MspInit+0x3c8>)
 8001d38:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001d3a:	4b32      	ldr	r3, [pc, #200]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d3c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001d40:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d42:	4b30      	ldr	r3, [pc, #192]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d48:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d54:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d56:	4b2b      	ldr	r3, [pc, #172]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d5c:	4b29      	ldr	r3, [pc, #164]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001d62:	4b28      	ldr	r3, [pc, #160]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d68:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d6a:	4b26      	ldr	r3, [pc, #152]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d70:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001d76:	4823      	ldr	r0, [pc, #140]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d78:	f000 fb80 	bl	800247c <HAL_DMA_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_UART_MspInit+0x346>
      Error_Handler();
 8001d82:	f7ff fe0d 	bl	80019a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e04 <HAL_UART_MspInit+0x3c4>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001d94:	4a1e      	ldr	r2, [pc, #120]	@ (8001e10 <HAL_UART_MspInit+0x3d0>)
 8001d96:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001d9a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001d9e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001da2:	2240      	movs	r2, #64	@ 0x40
 8001da4:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da6:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dac:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001db4:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dba:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001dc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dc6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001dd4:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001dd6:	f000 fb51 	bl	800247c <HAL_DMA_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8001de0:	f7ff fdde 	bl	80019a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001de8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dea:	4a08      	ldr	r2, [pc, #32]	@ (8001e0c <HAL_UART_MspInit+0x3cc>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001df0:	bf00      	nop
 8001df2:	3738      	adds	r7, #56	@ 0x38
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40011400 	.word	0x40011400
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020800 	.word	0x40020800
 8001e04:	200007ec 	.word	0x200007ec
 8001e08:	40026440 	.word	0x40026440
 8001e0c:	2000084c 	.word	0x2000084c
 8001e10:	400264a0 	.word	0x400264a0

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <NMI_Handler+0x4>

08001e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <BusFault_Handler+0x4>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <UsageFault_Handler+0x4>

08001e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6a:	f000 f9b1 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <DMA1_Stream5_IRQHandler+0x10>)
 8001e7a:	f000 fc97 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000072c 	.word	0x2000072c

08001e88 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e8c:	4802      	ldr	r0, [pc, #8]	@ (8001e98 <DMA1_Stream6_IRQHandler+0x10>)
 8001e8e:	f000 fc8d 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000078c 	.word	0x2000078c

08001e9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <USART1_IRQHandler+0x10>)
 8001ea2:	f003 f9cd 	bl	8005240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000594 	.word	0x20000594

08001eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <USART2_IRQHandler+0x10>)
 8001eb6:	f003 f9c3 	bl	8005240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200005dc 	.word	0x200005dc

08001ec4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <DMA2_Stream2_IRQHandler+0x10>)
 8001eca:	f000 fc6f 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200007ec 	.word	0x200007ec

08001ed8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <OTG_FS_IRQHandler+0x10>)
 8001ede:	f001 f997 	bl	8003210 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20001d94 	.word	0x20001d94

08001eec <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <DMA2_Stream5_IRQHandler+0x10>)
 8001ef2:	f000 fc5b 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000066c 	.word	0x2000066c

08001f00 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <DMA2_Stream6_IRQHandler+0x10>)
 8001f06:	f000 fc51 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000084c 	.word	0x2000084c

08001f14 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f18:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <DMA2_Stream7_IRQHandler+0x10>)
 8001f1a:	f000 fc47 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200006cc 	.word	0x200006cc

08001f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return 1;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_kill>:

int _kill(int pid, int sig)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f42:	f009 f9c9 	bl	800b2d8 <__errno>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2216      	movs	r2, #22
 8001f4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_exit>:

void _exit (int status)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ffe7 	bl	8001f38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f6a:	bf00      	nop
 8001f6c:	e7fd      	b.n	8001f6a <_exit+0x12>

08001f6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e00a      	b.n	8001f96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f80:	f3af 8000 	nop.w
 8001f84:	4601      	mov	r1, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	60ba      	str	r2, [r7, #8]
 8001f8c:	b2ca      	uxtb	r2, r1
 8001f8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dbf0      	blt.n	8001f80 <_read+0x12>
  }

  return len;
 8001f9e:	687b      	ldr	r3, [r7, #4]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	e009      	b.n	8001fce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	60ba      	str	r2, [r7, #8]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dbf1      	blt.n	8001fba <_write+0x12>
  }
  return len;
 8001fd6:	687b      	ldr	r3, [r7, #4]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <_close>:

int _close(int file)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002008:	605a      	str	r2, [r3, #4]
  return 0;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_isatty>:

int _isatty(int file)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002020:	2301      	movs	r3, #1
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <_sbrk+0x5c>)
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <_sbrk+0x60>)
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <_sbrk+0x64>)
 8002066:	4a12      	ldr	r2, [pc, #72]	@ (80020b0 <_sbrk+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d207      	bcs.n	8002088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002078:	f009 f92e 	bl	800b2d8 <__errno>
 800207c:	4603      	mov	r3, r0
 800207e:	220c      	movs	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002086:	e009      	b.n	800209c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002088:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208e:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	@ (80020ac <_sbrk+0x64>)
 8002098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20018000 	.word	0x20018000
 80020a8:	00000400 	.word	0x00000400
 80020ac:	200008ac 	.word	0x200008ac
 80020b0:	200025e8 	.word	0x200025e8

080020b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <SystemInit+0x20>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020be:	4a05      	ldr	r2, [pc, #20]	@ (80020d4 <SystemInit+0x20>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002110 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020dc:	f7ff ffea 	bl	80020b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e0:	480c      	ldr	r0, [pc, #48]	@ (8002114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020e2:	490d      	ldr	r1, [pc, #52]	@ (8002118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e4:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e8:	e002      	b.n	80020f0 <LoopCopyDataInit>

080020ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ee:	3304      	adds	r3, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f4:	d3f9      	bcc.n	80020ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020fc:	e001      	b.n	8002102 <LoopFillZerobss>

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002100:	3204      	adds	r2, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002106:	f009 f8ed 	bl	800b2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210a:	f7fe fedd 	bl	8000ec8 <main>
  bx  lr    
 800210e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002110:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002118:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 800211c:	0800d428 	.word	0x0800d428
  ldr r2, =_sbss
 8002120:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002124:	200025e4 	.word	0x200025e4

08002128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC_IRQHandler>
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002130:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <HAL_Init+0x40>)
 8002136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800213a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <HAL_Init+0x40>)
 8002142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	@ (800216c <HAL_Init+0x40>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 f94f 	bl	80023f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	200f      	movs	r0, #15
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff fc24 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f967 	bl	8002462 <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021ac:	f000 f92f 	bl	800240e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	@ (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000004 	.word	0x20000004

080021d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_IncTick+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_IncTick+0x24>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_IncTick+0x24>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000008 	.word	0x20000008
 80021f4:	200008b0 	.word	0x200008b0

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b03      	ldr	r3, [pc, #12]	@ (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200008b0 	.word	0x200008b0

08002210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff ffee 	bl	80021f8 <HAL_GetTick>
 800221c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002228:	d005      	beq.n	8002236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <HAL_Delay+0x44>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002236:	bf00      	nop
 8002238:	f7ff ffde 	bl	80021f8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d8f7      	bhi.n	8002238 <HAL_Delay+0x28>
  {
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000008 	.word	0x20000008

08002258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a4:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <__NVIC_GetPriorityGrouping+0x18>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 0307 	and.w	r3, r3, #7
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db0b      	blt.n	80022e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	4907      	ldr	r1, [pc, #28]	@ (80022f4 <__NVIC_EnableIRQ+0x38>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2001      	movs	r0, #1
 80022de:	fa00 f202 	lsl.w	r2, r0, r2
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	2b00      	cmp	r3, #0
 800230a:	db0a      	blt.n	8002322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	490c      	ldr	r1, [pc, #48]	@ (8002344 <__NVIC_SetPriority+0x4c>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	440b      	add	r3, r1
 800231c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002320:	e00a      	b.n	8002338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4908      	ldr	r1, [pc, #32]	@ (8002348 <__NVIC_SetPriority+0x50>)
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	3b04      	subs	r3, #4
 8002330:	0112      	lsls	r2, r2, #4
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	440b      	add	r3, r1
 8002336:	761a      	strb	r2, [r3, #24]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000e100 	.word	0xe000e100
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	@ 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f1c3 0307 	rsb	r3, r3, #7
 8002366:	2b04      	cmp	r3, #4
 8002368:	bf28      	it	cs
 800236a:	2304      	movcs	r3, #4
 800236c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3304      	adds	r3, #4
 8002372:	2b06      	cmp	r3, #6
 8002374:	d902      	bls.n	800237c <NVIC_EncodePriority+0x30>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3b03      	subs	r3, #3
 800237a:	e000      	b.n	800237e <NVIC_EncodePriority+0x32>
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	401a      	ands	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002394:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43d9      	mvns	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	4313      	orrs	r3, r2
         );
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3724      	adds	r7, #36	@ 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c4:	d301      	bcc.n	80023ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00f      	b.n	80023ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <SysTick_Config+0x40>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d2:	210f      	movs	r1, #15
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023d8:	f7ff ff8e 	bl	80022f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023dc:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <SysTick_Config+0x40>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e2:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <SysTick_Config+0x40>)
 80023e4:	2207      	movs	r2, #7
 80023e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	e000e010 	.word	0xe000e010

080023f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ff29 	bl	8002258 <__NVIC_SetPriorityGrouping>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002420:	f7ff ff3e 	bl	80022a0 <__NVIC_GetPriorityGrouping>
 8002424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	6978      	ldr	r0, [r7, #20]
 800242c:	f7ff ff8e 	bl	800234c <NVIC_EncodePriority>
 8002430:	4602      	mov	r2, r0
 8002432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff5d 	bl	80022f8 <__NVIC_SetPriority>
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff31 	bl	80022bc <__NVIC_EnableIRQ>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ffa2 	bl	80023b4 <SysTick_Config>
 8002470:	4603      	mov	r3, r0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff feb6 	bl	80021f8 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e099      	b.n	80025cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b8:	e00f      	b.n	80024da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ba:	f7ff fe9d 	bl	80021f8 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d908      	bls.n	80024da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2203      	movs	r2, #3
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e078      	b.n	80025cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e8      	bne.n	80024ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <HAL_DMA_Init+0x158>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002506:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	2b04      	cmp	r3, #4
 8002532:	d107      	bne.n	8002544 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253c:	4313      	orrs	r3, r2
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0307 	bic.w	r3, r3, #7
 800255a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	2b04      	cmp	r3, #4
 800256c:	d117      	bne.n	800259e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fb01 	bl	8002b88 <DMA_CheckFifoParam>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2240      	movs	r2, #64	@ 0x40
 8002590:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800259a:	2301      	movs	r3, #1
 800259c:	e016      	b.n	80025cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fab8 	bl	8002b1c <DMA_CalcBaseAndBitshift>
 80025ac:	4603      	mov	r3, r0
 80025ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	223f      	movs	r2, #63	@ 0x3f
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	f010803f 	.word	0xf010803f

080025d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_DMA_Start_IT+0x26>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e040      	b.n	8002680 <HAL_DMA_Start_IT+0xa8>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d12f      	bne.n	8002672 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fa4a 	bl	8002ac0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002630:	223f      	movs	r2, #63	@ 0x3f
 8002632:	409a      	lsls	r2, r3
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0216 	orr.w	r2, r2, #22
 8002646:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0208 	orr.w	r2, r2, #8
 800265e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e005      	b.n	800267e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800267a:	2302      	movs	r3, #2
 800267c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800267e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002696:	f7ff fdaf 	bl	80021f8 <HAL_GetTick>
 800269a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d008      	beq.n	80026ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2280      	movs	r2, #128	@ 0x80
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e052      	b.n	8002760 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0216 	bic.w	r2, r2, #22
 80026c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d103      	bne.n	80026ea <HAL_DMA_Abort+0x62>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0208 	bic.w	r2, r2, #8
 80026f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800270a:	e013      	b.n	8002734 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800270c:	f7ff fd74 	bl	80021f8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b05      	cmp	r3, #5
 8002718:	d90c      	bls.n	8002734 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2203      	movs	r2, #3
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e015      	b.n	8002760 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1e4      	bne.n	800270c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	223f      	movs	r2, #63	@ 0x3f
 8002748:	409a      	lsls	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d004      	beq.n	8002786 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2280      	movs	r2, #128	@ 0x80
 8002780:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00c      	b.n	80027a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2205      	movs	r2, #5
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027b8:	4b8e      	ldr	r3, [pc, #568]	@ (80029f4 <HAL_DMA_IRQHandler+0x248>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a8e      	ldr	r2, [pc, #568]	@ (80029f8 <HAL_DMA_IRQHandler+0x24c>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0a9b      	lsrs	r3, r3, #10
 80027c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d6:	2208      	movs	r2, #8
 80027d8:	409a      	lsls	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01a      	beq.n	8002818 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0204 	bic.w	r2, r2, #4
 80027fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	2208      	movs	r2, #8
 8002806:	409a      	lsls	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281c:	2201      	movs	r2, #1
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283a:	2201      	movs	r2, #1
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002846:	f043 0202 	orr.w	r2, r3, #2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002852:	2204      	movs	r2, #4
 8002854:	409a      	lsls	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d012      	beq.n	8002884 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	2204      	movs	r2, #4
 8002872:	409a      	lsls	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f043 0204 	orr.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	2210      	movs	r2, #16
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d043      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d03c      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	2210      	movs	r2, #16
 80028a8:	409a      	lsls	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d018      	beq.n	80028ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d108      	bne.n	80028dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d024      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
 80028da:	e01f      	b.n	800291c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e016      	b.n	800291c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0208 	bic.w	r2, r2, #8
 800290a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	2220      	movs	r2, #32
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 808f 	beq.w	8002a4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8087 	beq.w	8002a4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002942:	2220      	movs	r2, #32
 8002944:	409a      	lsls	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b05      	cmp	r3, #5
 8002954:	d136      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0216 	bic.w	r2, r2, #22
 8002964:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002974:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <HAL_DMA_IRQHandler+0x1da>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0208 	bic.w	r2, r2, #8
 8002994:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	223f      	movs	r2, #63	@ 0x3f
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d07e      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
        }
        return;
 80029c2:	e079      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01d      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10d      	bne.n	80029fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d031      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
 80029f0:	e02c      	b.n	8002a4c <HAL_DMA_IRQHandler+0x2a0>
 80029f2:	bf00      	nop
 80029f4:	20000000 	.word	0x20000000
 80029f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d023      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
 8002a0c:	e01e      	b.n	8002a4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10f      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0210 	bic.w	r2, r2, #16
 8002a2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d032      	beq.n	8002aba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d022      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2205      	movs	r2, #5
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d307      	bcc.n	8002a94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f2      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x2cc>
 8002a92:	e000      	b.n	8002a96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
 8002ab6:	e000      	b.n	8002aba <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ab8:	bf00      	nop
    }
  }
}
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002adc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b40      	cmp	r3, #64	@ 0x40
 8002aec:	d108      	bne.n	8002b00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002afe:	e007      	b.n	8002b10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	60da      	str	r2, [r3, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	3b10      	subs	r3, #16
 8002b2c:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <DMA_CalcBaseAndBitshift+0x64>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b36:	4a13      	ldr	r2, [pc, #76]	@ (8002b84 <DMA_CalcBaseAndBitshift+0x68>)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d909      	bls.n	8002b5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	1d1a      	adds	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b5c:	e007      	b.n	8002b6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	aaaaaaab 	.word	0xaaaaaaab
 8002b84:	0800d058 	.word	0x0800d058

08002b88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11f      	bne.n	8002be2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d856      	bhi.n	8002c56 <DMA_CheckFifoParam+0xce>
 8002ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb0 <DMA_CheckFifoParam+0x28>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002bc1 	.word	0x08002bc1
 8002bb4:	08002bd3 	.word	0x08002bd3
 8002bb8:	08002bc1 	.word	0x08002bc1
 8002bbc:	08002c57 	.word	0x08002c57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d046      	beq.n	8002c5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e043      	b.n	8002c5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bda:	d140      	bne.n	8002c5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be0:	e03d      	b.n	8002c5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bea:	d121      	bne.n	8002c30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d837      	bhi.n	8002c62 <DMA_CheckFifoParam+0xda>
 8002bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf8 <DMA_CheckFifoParam+0x70>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c0f 	.word	0x08002c0f
 8002c00:	08002c09 	.word	0x08002c09
 8002c04:	08002c21 	.word	0x08002c21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0c:	e030      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d025      	beq.n	8002c66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1e:	e022      	b.n	8002c66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c28:	d11f      	bne.n	8002c6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c2e:	e01c      	b.n	8002c6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d903      	bls.n	8002c3e <DMA_CheckFifoParam+0xb6>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d003      	beq.n	8002c44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c3c:	e018      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
      break;
 8002c42:	e015      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00e      	beq.n	8002c6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      break;
 8002c54:	e00b      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c56:	bf00      	nop
 8002c58:	e00a      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e008      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e006      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
 8002c64:	e004      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
 8002c68:	e002      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	@ 0x24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e159      	b.n	8002f50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f040 8148 	bne.w	8002f4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d005      	beq.n	8002cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d130      	bne.n	8002d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 0201 	and.w	r2, r3, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d017      	beq.n	8002d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d123      	bne.n	8002dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	08da      	lsrs	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3208      	adds	r2, #8
 8002d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	220f      	movs	r2, #15
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	08da      	lsrs	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3208      	adds	r2, #8
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a2 	beq.w	8002f4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	4b57      	ldr	r3, [pc, #348]	@ (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	4a56      	ldr	r2, [pc, #344]	@ (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e16:	4b54      	ldr	r3, [pc, #336]	@ (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e22:	4a52      	ldr	r2, [pc, #328]	@ (8002f6c <HAL_GPIO_Init+0x2ec>)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a49      	ldr	r2, [pc, #292]	@ (8002f70 <HAL_GPIO_Init+0x2f0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x202>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a48      	ldr	r2, [pc, #288]	@ (8002f74 <HAL_GPIO_Init+0x2f4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x1fe>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a47      	ldr	r2, [pc, #284]	@ (8002f78 <HAL_GPIO_Init+0x2f8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x1fa>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a46      	ldr	r2, [pc, #280]	@ (8002f7c <HAL_GPIO_Init+0x2fc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x1f6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a45      	ldr	r2, [pc, #276]	@ (8002f80 <HAL_GPIO_Init+0x300>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x1f2>
 8002e6e:	2304      	movs	r3, #4
 8002e70:	e008      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e72:	2307      	movs	r3, #7
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e76:	2303      	movs	r3, #3
 8002e78:	e004      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e002      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_GPIO_Init+0x204>
 8002e82:	2300      	movs	r3, #0
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f002 0203 	and.w	r2, r2, #3
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	4093      	lsls	r3, r2
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e94:	4935      	ldr	r1, [pc, #212]	@ (8002f6c <HAL_GPIO_Init+0x2ec>)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea2:	4b38      	ldr	r3, [pc, #224]	@ (8002f84 <HAL_GPIO_Init+0x304>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8002f84 <HAL_GPIO_Init+0x304>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f84 <HAL_GPIO_Init+0x304>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef0:	4a24      	ldr	r2, [pc, #144]	@ (8002f84 <HAL_GPIO_Init+0x304>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef6:	4b23      	ldr	r3, [pc, #140]	@ (8002f84 <HAL_GPIO_Init+0x304>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002f84 <HAL_GPIO_Init+0x304>)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f20:	4b18      	ldr	r3, [pc, #96]	@ (8002f84 <HAL_GPIO_Init+0x304>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f44:	4a0f      	ldr	r2, [pc, #60]	@ (8002f84 <HAL_GPIO_Init+0x304>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	f67f aea2 	bls.w	8002c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	@ 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40020400 	.word	0x40020400
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020c00 	.word	0x40020c00
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40013c00 	.word	0x40013c00

08002f88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e101      	b.n	800319e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f006 fefb 	bl	8009db0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fc8:	d102      	bne.n	8002fd0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fae2 	bl	800659e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7c1a      	ldrb	r2, [r3, #16]
 8002fe2:	f88d 2000 	strb.w	r2, [sp]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fea:	f003 f9c1 	bl	8006370 <USB_CoreInit>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0ce      	b.n	800319e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fada 	bl	80065c0 <USB_SetCurrentMode>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0bf      	b.n	800319e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	e04a      	b.n	80030ba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3315      	adds	r3, #21
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3314      	adds	r3, #20
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	b298      	uxth	r0, r3
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	332e      	adds	r3, #46	@ 0x2e
 8003060:	4602      	mov	r2, r0
 8003062:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3318      	adds	r3, #24
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	331c      	adds	r3, #28
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3320      	adds	r3, #32
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3324      	adds	r3, #36	@ 0x24
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	3301      	adds	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	791b      	ldrb	r3, [r3, #4]
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d3af      	bcc.n	8003024 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	e044      	b.n	8003154 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	3301      	adds	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	791b      	ldrb	r3, [r3, #4]
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	429a      	cmp	r2, r3
 800315c:	d3b5      	bcc.n	80030ca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7c1a      	ldrb	r2, [r3, #16]
 8003166:	f88d 2000 	strb.w	r2, [sp]
 800316a:	3304      	adds	r3, #4
 800316c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800316e:	f003 fa73 	bl	8006658 <USB_DevInit>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e00c      	b.n	800319e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f004 fabd 	bl	8007716 <USB_DevDisconnect>

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_PCD_Start+0x1c>
 80031be:	2302      	movs	r3, #2
 80031c0:	e022      	b.n	8003208 <HAL_PCD_Start+0x62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 f9c4 	bl	800657c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f004 fa6b 	bl	80076d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b08d      	sub	sp, #52	@ 0x34
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f004 fb29 	bl	800787e <USB_GetMode>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 848c 	bne.w	8003b4c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f004 fa8d 	bl	8007758 <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8482 	beq.w	8003b4a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f004 fa7a 	bl	8007758 <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d107      	bne.n	800327e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f002 0202 	and.w	r2, r2, #2
 800327c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fa68 	bl	8007758 <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b10      	cmp	r3, #16
 8003290:	d161      	bne.n	8003356 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0210 	bic.w	r2, r2, #16
 80032a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 020f 	and.w	r2, r3, #15
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	3304      	adds	r3, #4
 80032c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	0c5b      	lsrs	r3, r3, #17
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d124      	bne.n	8003318 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d035      	beq.n	8003346 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	6a38      	ldr	r0, [r7, #32]
 80032ee:	f004 f89f 	bl	8007430 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032fe:	441a      	add	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003310:	441a      	add	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	615a      	str	r2, [r3, #20]
 8003316:	e016      	b.n	8003346 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	0c5b      	lsrs	r3, r3, #17
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	2b06      	cmp	r3, #6
 8003322:	d110      	bne.n	8003346 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800332a:	2208      	movs	r2, #8
 800332c:	4619      	mov	r1, r3
 800332e:	6a38      	ldr	r0, [r7, #32]
 8003330:	f004 f87e 	bl	8007430 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003340:	441a      	add	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0210 	orr.w	r2, r2, #16
 8003354:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f004 f9fc 	bl	8007758 <USB_ReadInterrupts>
 8003360:	4603      	mov	r3, r0
 8003362:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003366:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800336a:	f040 80a7 	bne.w	80034bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f004 fa01 	bl	800777e <USB_ReadDevAllOutEpInterrupt>
 800337c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800337e:	e099      	b.n	80034b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 808e 	beq.w	80034a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f004 fa25 	bl	80077e6 <USB_ReadDevOutEPInterrupt>
 800339c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b4:	461a      	mov	r2, r3
 80033b6:	2301      	movs	r3, #1
 80033b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fea3 	bl	8004108 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00c      	beq.n	80033e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	2308      	movs	r3, #8
 80033dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 ff79 	bl	80042d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fc:	461a      	mov	r2, r3
 80033fe:	2310      	movs	r3, #16
 8003400:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d030      	beq.n	800346e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003414:	2b80      	cmp	r3, #128	@ 0x80
 8003416:	d109      	bne.n	800342c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003426:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800342a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800342c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	3304      	adds	r3, #4
 8003440:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	78db      	ldrb	r3, [r3, #3]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d108      	bne.n	800345c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	b2db      	uxtb	r3, r3
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f006 fda8 	bl	8009fac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003468:	461a      	mov	r2, r3
 800346a:	2302      	movs	r3, #2
 800346c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003484:	461a      	mov	r2, r3
 8003486:	2320      	movs	r3, #32
 8003488:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a0:	461a      	mov	r2, r3
 80034a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	3301      	adds	r3, #1
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f47f af62 	bne.w	8003380 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f004 f949 	bl	8007758 <USB_ReadInterrupts>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034d0:	f040 80db 	bne.w	800368a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f004 f96a 	bl	80077b2 <USB_ReadDevAllInEpInterrupt>
 80034de:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80034e4:	e0cd      	b.n	8003682 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80c2 	beq.w	8003676 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f004 f990 	bl	8007822 <USB_ReadDevInEPInterrupt>
 8003502:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d057      	beq.n	80035be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	2201      	movs	r2, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	69f9      	ldr	r1, [r7, #28]
 800352a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800352e:	4013      	ands	r3, r2
 8003530:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800353e:	461a      	mov	r2, r3
 8003540:	2301      	movs	r3, #1
 8003542:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	799b      	ldrb	r3, [r3, #6]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d132      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3320      	adds	r3, #32
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4403      	add	r3, r0
 800356c:	331c      	adds	r3, #28
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4419      	add	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4403      	add	r3, r0
 8003580:	3320      	adds	r3, #32
 8003582:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	2b00      	cmp	r3, #0
 8003588:	d113      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x3a2>
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3324      	adds	r3, #36	@ 0x24
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d108      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035aa:	461a      	mov	r2, r3
 80035ac:	2101      	movs	r1, #1
 80035ae:	f004 f997 	bl	80078e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f006 fc72 	bl	8009ea2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d4:	461a      	mov	r2, r3
 80035d6:	2308      	movs	r3, #8
 80035d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f0:	461a      	mov	r2, r3
 80035f2:	2310      	movs	r3, #16
 80035f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360c:	461a      	mov	r2, r3
 800360e:	2340      	movs	r3, #64	@ 0x40
 8003610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d023      	beq.n	8003664 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800361c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800361e:	6a38      	ldr	r0, [r7, #32]
 8003620:	f003 f97e 	bl	8006920 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	3310      	adds	r3, #16
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	78db      	ldrb	r3, [r3, #3]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d108      	bne.n	8003652 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2200      	movs	r2, #0
 8003644:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	b2db      	uxtb	r3, r3
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f006 fcbf 	bl	8009fd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800365e:	461a      	mov	r2, r3
 8003660:	2302      	movs	r3, #2
 8003662:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800366e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fcbd 	bl	8003ff0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	3301      	adds	r3, #1
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f af2e 	bne.w	80034e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f004 f862 	bl	8007758 <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800369a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800369e:	d122      	bne.n	80036e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d108      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036c6:	2100      	movs	r1, #0
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fea3 	bl	8004414 <HAL_PCDEx_LPM_Callback>
 80036ce:	e002      	b.n	80036d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f006 fc5d 	bl	8009f90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80036e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f004 f834 	bl	8007758 <USB_ReadInterrupts>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036fa:	d112      	bne.n	8003722 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d102      	bne.n	8003712 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f006 fc19 	bl	8009f44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003720:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f004 f816 	bl	8007758 <USB_ReadInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003736:	f040 80b7 	bne.w	80038a8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2110      	movs	r1, #16
 8003754:	4618      	mov	r0, r3
 8003756:	f003 f8e3 	bl	8006920 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375a:	2300      	movs	r3, #0
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800375e:	e046      	b.n	80037ee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800376c:	461a      	mov	r2, r3
 800376e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003772:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003784:	0151      	lsls	r1, r2, #5
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	440a      	add	r2, r1
 800378a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800378e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003792:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a0:	461a      	mov	r2, r3
 80037a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037b8:	0151      	lsls	r1, r2, #5
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	440a      	add	r2, r1
 80037be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037d8:	0151      	lsls	r1, r2, #5
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	440a      	add	r2, r1
 80037de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ea:	3301      	adds	r3, #1
 80037ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	791b      	ldrb	r3, [r3, #4]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d3b2      	bcc.n	8003760 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003808:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800380c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7bdb      	ldrb	r3, [r3, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003826:	f043 030b 	orr.w	r3, r3, #11
 800382a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800383c:	f043 030b 	orr.w	r3, r3, #11
 8003840:	6453      	str	r3, [r2, #68]	@ 0x44
 8003842:	e015      	b.n	8003870 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003852:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003856:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800385a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800386a:	f043 030b 	orr.w	r3, r3, #11
 800386e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800387e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003882:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003892:	461a      	mov	r2, r3
 8003894:	f004 f824 	bl	80078e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80038a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f003 ff53 	bl	8007758 <USB_ReadInterrupts>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038bc:	d123      	bne.n	8003906 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f003 ffe9 	bl	800789a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f003 f8a0 	bl	8006a12 <USB_GetDevSpeed>
 80038d2:	4603      	mov	r3, r0
 80038d4:	461a      	mov	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681c      	ldr	r4, [r3, #0]
 80038de:	f001 f9c9 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 80038e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038e8:	461a      	mov	r2, r3
 80038ea:	4620      	mov	r0, r4
 80038ec:	f002 fda4 	bl	8006438 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f006 fafe 	bl	8009ef2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003904:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f003 ff24 	bl	8007758 <USB_ReadInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b08      	cmp	r3, #8
 8003918:	d10a      	bne.n	8003930 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f006 fadb 	bl	8009ed6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f002 0208 	and.w	r2, r2, #8
 800392e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f003 ff0f 	bl	8007758 <USB_ReadInterrupts>
 800393a:	4603      	mov	r3, r0
 800393c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003940:	2b80      	cmp	r3, #128	@ 0x80
 8003942:	d123      	bne.n	800398c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003950:	2301      	movs	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
 8003954:	e014      	b.n	8003980 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d105      	bne.n	800397a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	b2db      	uxtb	r3, r3
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fb0a 	bl	8003f8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	3301      	adds	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	791b      	ldrb	r3, [r3, #4]
 8003984:	461a      	mov	r2, r3
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	4293      	cmp	r3, r2
 800398a:	d3e4      	bcc.n	8003956 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f003 fee1 	bl	8007758 <USB_ReadInterrupts>
 8003996:	4603      	mov	r3, r0
 8003998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800399c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039a0:	d13c      	bne.n	8003a1c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039a2:	2301      	movs	r3, #1
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a6:	e02b      	b.n	8003a00 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	3318      	adds	r3, #24
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d115      	bne.n	80039fa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da12      	bge.n	80039fa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3317      	adds	r3, #23
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	4619      	mov	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 faca 	bl	8003f8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	3301      	adds	r3, #1
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	461a      	mov	r2, r3
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d3cd      	bcc.n	80039a8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f003 fe99 	bl	8007758 <USB_ReadInterrupts>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a30:	d156      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a32:	2301      	movs	r3, #1
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a36:	e045      	b.n	8003ac4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d12e      	bne.n	8003abe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da2b      	bge.n	8003abe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d121      	bne.n	8003abe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aba:	6053      	str	r3, [r2, #4]
            break;
 8003abc:	e008      	b.n	8003ad0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	791b      	ldrb	r3, [r3, #4]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d3b3      	bcc.n	8003a38 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f003 fe37 	bl	8007758 <USB_ReadInterrupts>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af4:	d10a      	bne.n	8003b0c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f006 fa7c 	bl	8009ff4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f003 fe21 	bl	8007758 <USB_ReadInterrupts>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d115      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f006 fa6c 	bl	800a010 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	e000      	b.n	8003b4c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003b4a:	bf00      	nop
    }
  }
}
 8003b4c:	3734      	adds	r7, #52	@ 0x34
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd90      	pop	{r4, r7, pc}

08003b52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_PCD_SetAddress+0x1a>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e012      	b.n	8003b92 <HAL_PCD_SetAddress+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f003 fd80 	bl	8007688 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	4608      	mov	r0, r1
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4603      	mov	r3, r0
 8003baa:	70fb      	strb	r3, [r7, #3]
 8003bac:	460b      	mov	r3, r1
 8003bae:	803b      	strh	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da0f      	bge.n	8003be0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	f003 020f 	and.w	r2, r3, #15
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	3310      	adds	r3, #16
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	705a      	strb	r2, [r3, #1]
 8003bde:	e00f      	b.n	8003c00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 020f 	and.w	r2, r3, #15
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003c0c:	883b      	ldrh	r3, [r7, #0]
 8003c0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	78ba      	ldrb	r2, [r7, #2]
 8003c1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	785b      	ldrb	r3, [r3, #1]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d004      	beq.n	8003c2e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c2e:	78bb      	ldrb	r3, [r7, #2]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d102      	bne.n	8003c3a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_PCD_EP_Open+0xae>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e00e      	b.n	8003c66 <HAL_PCD_EP_Open+0xcc>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68f9      	ldr	r1, [r7, #12]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f002 ff00 	bl	8006a5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c64:	7afb      	ldrb	r3, [r7, #11]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	da0f      	bge.n	8003ca2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	3310      	adds	r3, #16
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	3304      	adds	r3, #4
 8003c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	705a      	strb	r2, [r3, #1]
 8003ca0:	e00f      	b.n	8003cc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3304      	adds	r3, #4
 8003cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_PCD_EP_Close+0x6e>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e00e      	b.n	8003cfa <HAL_PCD_EP_Close+0x8c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f002 ff3e 	bl	8006b6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d12:	7afb      	ldrb	r3, [r7, #11]
 8003d14:	f003 020f 	and.w	r2, r3, #15
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4413      	add	r3, r2
 8003d28:	3304      	adds	r3, #4
 8003d2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d44:	7afb      	ldrb	r3, [r7, #11]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	799b      	ldrb	r3, [r3, #6]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d102      	bne.n	8003d5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	799b      	ldrb	r3, [r3, #6]
 8003d66:	461a      	mov	r2, r3
 8003d68:	6979      	ldr	r1, [r7, #20]
 8003d6a:	f002 ffdb 	bl	8006d24 <USB_EPStartXfer>

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	f003 020f 	and.w	r2, r3, #15
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	460b      	mov	r3, r1
 8003db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db8:	7afb      	ldrb	r3, [r7, #11]
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	3310      	adds	r3, #16
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2200      	movs	r2, #0
 8003de0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2201      	movs	r2, #1
 8003de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de8:	7afb      	ldrb	r3, [r7, #11]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	799b      	ldrb	r3, [r3, #6]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d102      	bne.n	8003e02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	799b      	ldrb	r3, [r3, #6]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6979      	ldr	r1, [r7, #20]
 8003e0e:	f002 ff89 	bl	8006d24 <USB_EPStartXfer>

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	7912      	ldrb	r2, [r2, #4]
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e04f      	b.n	8003eda <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da0f      	bge.n	8003e62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 020f 	and.w	r2, r3, #15
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	3310      	adds	r3, #16
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	3304      	adds	r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	705a      	strb	r2, [r3, #1]
 8003e60:	e00d      	b.n	8003e7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	3304      	adds	r3, #4
 8003e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_PCD_EP_SetStall+0x82>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e01d      	b.n	8003eda <HAL_PCD_EP_SetStall+0xbe>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f003 fb17 	bl	80074e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	7999      	ldrb	r1, [r3, #6]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f003 fd08 	bl	80078e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	7912      	ldrb	r2, [r2, #4]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e042      	b.n	8003f86 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	da0f      	bge.n	8003f28 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	f003 020f 	and.w	r2, r3, #15
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	3310      	adds	r3, #16
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	705a      	strb	r2, [r3, #1]
 8003f26:	e00f      	b.n	8003f48 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 020f 	and.w	r2, r3, #15
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3304      	adds	r3, #4
 8003f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_PCD_EP_ClrStall+0x86>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e00e      	b.n	8003f86 <HAL_PCD_EP_ClrStall+0xa4>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f003 fb20 	bl	80075bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	da0c      	bge.n	8003fbc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	3310      	adds	r3, #16
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	e00c      	b.n	8003fd6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	f003 020f 	and.w	r2, r3, #15
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68f9      	ldr	r1, [r7, #12]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f003 f93f 	bl	8007260 <USB_EPStopXfer>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	@ 0x28
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	3310      	adds	r3, #16
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	3304      	adds	r3, #4
 8004016:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	429a      	cmp	r2, r3
 8004022:	d901      	bls.n	8004028 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e06b      	b.n	8004100 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	429a      	cmp	r2, r3
 800403c:	d902      	bls.n	8004044 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	3303      	adds	r3, #3
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800404c:	e02a      	b.n	80040a4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	429a      	cmp	r2, r3
 8004062:	d902      	bls.n	800406a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3303      	adds	r3, #3
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	68d9      	ldr	r1, [r3, #12]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4603      	mov	r3, r0
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f003 f994 	bl	80073b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	441a      	add	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	441a      	add	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d809      	bhi.n	80040ce <PCD_WriteEmptyTxFifo+0xde>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d203      	bcs.n	80040ce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1bf      	bne.n	800404e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d811      	bhi.n	80040fe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	2201      	movs	r2, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	6939      	ldr	r1, [r7, #16]
 80040f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040fa:	4013      	ands	r3, r2
 80040fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	333c      	adds	r3, #60	@ 0x3c
 8004120:	3304      	adds	r3, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	799b      	ldrb	r3, [r3, #6]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d17b      	bne.n	8004236 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d015      	beq.n	8004174 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	4a61      	ldr	r2, [pc, #388]	@ (80042d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	f240 80b9 	bls.w	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80b3 	beq.w	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416a:	461a      	mov	r2, r3
 800416c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004170:	6093      	str	r3, [r2, #8]
 8004172:	e0a7      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418a:	461a      	mov	r2, r3
 800418c:	2320      	movs	r3, #32
 800418e:	6093      	str	r3, [r2, #8]
 8004190:	e098      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 8093 	bne.w	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	4a4b      	ldr	r2, [pc, #300]	@ (80042d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d90f      	bls.n	80041c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041c2:	6093      	str	r3, [r2, #8]
 80041c4:	e07e      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	0159      	lsls	r1, r3, #5
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	440b      	add	r3, r1
 80041e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f2:	1ad2      	subs	r2, r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d114      	bne.n	8004228 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004210:	461a      	mov	r2, r3
 8004212:	2101      	movs	r1, #1
 8004214:	f003 fb64 	bl	80078e0 <USB_EP0_OutStart>
 8004218:	e006      	b.n	8004228 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	441a      	add	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f005 fe1c 	bl	8009e6c <HAL_PCD_DataOutStageCallback>
 8004234:	e046      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4a26      	ldr	r2, [pc, #152]	@ (80042d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d124      	bne.n	8004288 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800425a:	6093      	str	r3, [r2, #8]
 800425c:	e032      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004274:	461a      	mov	r2, r3
 8004276:	2320      	movs	r3, #32
 8004278:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f005 fdf3 	bl	8009e6c <HAL_PCD_DataOutStageCallback>
 8004286:	e01d      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d114      	bne.n	80042b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042b0:	461a      	mov	r2, r3
 80042b2:	2100      	movs	r1, #0
 80042b4:	f003 fb14 	bl	80078e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4619      	mov	r1, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f005 fdd4 	bl	8009e6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	4f54300a 	.word	0x4f54300a
 80042d4:	4f54310a 	.word	0x4f54310a

080042d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	333c      	adds	r3, #60	@ 0x3c
 80042f0:	3304      	adds	r3, #4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a15      	ldr	r2, [pc, #84]	@ (8004360 <PCD_EP_OutSetupPacket_int+0x88>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d90e      	bls.n	800432c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004324:	461a      	mov	r2, r3
 8004326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800432a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f005 fd8b 	bl	8009e48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a0a      	ldr	r2, [pc, #40]	@ (8004360 <PCD_EP_OutSetupPacket_int+0x88>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d90c      	bls.n	8004354 <PCD_EP_OutSetupPacket_int+0x7c>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	799b      	ldrb	r3, [r3, #6]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d108      	bne.n	8004354 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800434c:	461a      	mov	r2, r3
 800434e:	2101      	movs	r1, #1
 8004350:	f003 fac6 	bl	80078e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	4f54300a 	.word	0x4f54300a

08004364 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
 8004370:	4613      	mov	r3, r2
 8004372:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004382:	883b      	ldrh	r3, [r7, #0]
 8004384:	0419      	lsls	r1, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	430a      	orrs	r2, r1
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004390:	e028      	b.n	80043e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4413      	add	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e00d      	b.n	80043c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	3340      	adds	r3, #64	@ 0x40
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	4413      	add	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	3301      	adds	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d3ec      	bcc.n	80043a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043cc:	883b      	ldrh	r3, [r7, #0]
 80043ce:	0418      	lsls	r0, r3, #16
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	4302      	orrs	r2, r0
 80043dc:	3340      	adds	r3, #64	@ 0x40
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	460b      	mov	r3, r1
 80043fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e267      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d075      	beq.n	8004536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800444a:	4b88      	ldr	r3, [pc, #544]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d00c      	beq.n	8004470 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004456:	4b85      	ldr	r3, [pc, #532]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800445e:	2b08      	cmp	r3, #8
 8004460:	d112      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004462:	4b82      	ldr	r3, [pc, #520]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800446e:	d10b      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	4b7e      	ldr	r3, [pc, #504]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d05b      	beq.n	8004534 <HAL_RCC_OscConfig+0x108>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d157      	bne.n	8004534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e242      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004490:	d106      	bne.n	80044a0 <HAL_RCC_OscConfig+0x74>
 8004492:	4b76      	ldr	r3, [pc, #472]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a75      	ldr	r2, [pc, #468]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x98>
 80044aa:	4b70      	ldr	r3, [pc, #448]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a6f      	ldr	r2, [pc, #444]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b6d      	ldr	r3, [pc, #436]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6c      	ldr	r2, [pc, #432]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044c4:	4b69      	ldr	r3, [pc, #420]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a68      	ldr	r2, [pc, #416]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b66      	ldr	r3, [pc, #408]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a65      	ldr	r2, [pc, #404]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fd fe88 	bl	80021f8 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fd fe84 	bl	80021f8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	@ 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e207      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b5b      	ldr	r3, [pc, #364]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xc0>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd fe74 	bl	80021f8 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7fd fe70 	bl	80021f8 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	@ 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1f3      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b51      	ldr	r3, [pc, #324]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0xe8>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004542:	4b4a      	ldr	r3, [pc, #296]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b47      	ldr	r3, [pc, #284]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455a:	4b44      	ldr	r3, [pc, #272]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b41      	ldr	r3, [pc, #260]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1c7      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b3b      	ldr	r3, [pc, #236]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4937      	ldr	r1, [pc, #220]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b34      	ldr	r3, [pc, #208]	@ (8004670 <HAL_RCC_OscConfig+0x244>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd fe29 	bl	80021f8 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fd fe25 	bl	80021f8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1a8      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b2b      	ldr	r3, [pc, #172]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b28      	ldr	r3, [pc, #160]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4925      	ldr	r1, [pc, #148]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b24      	ldr	r3, [pc, #144]	@ (8004670 <HAL_RCC_OscConfig+0x244>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fe08 	bl	80021f8 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fd fe04 	bl	80021f8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e187      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d036      	beq.n	8004684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <HAL_RCC_OscConfig+0x248>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fd fde8 	bl	80021f8 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462c:	f7fd fde4 	bl	80021f8 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e167      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x200>
 800464a:	e01b      	b.n	8004684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464c:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <HAL_RCC_OscConfig+0x248>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7fd fdd1 	bl	80021f8 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	e00e      	b.n	8004678 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465a:	f7fd fdcd 	bl	80021f8 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d907      	bls.n	8004678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e150      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
 800466c:	40023800 	.word	0x40023800
 8004670:	42470000 	.word	0x42470000
 8004674:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	4b88      	ldr	r3, [pc, #544]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800467a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ea      	bne.n	800465a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8097 	beq.w	80047c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004696:	4b81      	ldr	r3, [pc, #516]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	4b7d      	ldr	r3, [pc, #500]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	4a7c      	ldr	r2, [pc, #496]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046b2:	4b7a      	ldr	r3, [pc, #488]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046be:	2301      	movs	r3, #1
 80046c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c2:	4b77      	ldr	r3, [pc, #476]	@ (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d118      	bne.n	8004700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ce:	4b74      	ldr	r3, [pc, #464]	@ (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a73      	ldr	r2, [pc, #460]	@ (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046da:	f7fd fd8d 	bl	80021f8 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e2:	f7fd fd89 	bl	80021f8 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e10c      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f4:	4b6a      	ldr	r3, [pc, #424]	@ (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0x2ea>
 8004708:	4b64      	ldr	r3, [pc, #400]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470c:	4a63      	ldr	r2, [pc, #396]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	6713      	str	r3, [r2, #112]	@ 0x70
 8004714:	e01c      	b.n	8004750 <HAL_RCC_OscConfig+0x324>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b05      	cmp	r3, #5
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x30c>
 800471e:	4b5f      	ldr	r3, [pc, #380]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	4a5e      	ldr	r2, [pc, #376]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	6713      	str	r3, [r2, #112]	@ 0x70
 800472a:	4b5c      	ldr	r3, [pc, #368]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472e:	4a5b      	ldr	r2, [pc, #364]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	6713      	str	r3, [r2, #112]	@ 0x70
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0x324>
 8004738:	4b58      	ldr	r3, [pc, #352]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	4a57      	ldr	r2, [pc, #348]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	@ 0x70
 8004744:	4b55      	ldr	r3, [pc, #340]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004748:	4a54      	ldr	r2, [pc, #336]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800474a:	f023 0304 	bic.w	r3, r3, #4
 800474e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d015      	beq.n	8004784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd fd4e 	bl	80021f8 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475e:	e00a      	b.n	8004776 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004760:	f7fd fd4a 	bl	80021f8 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e0cb      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004776:	4b49      	ldr	r3, [pc, #292]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ee      	beq.n	8004760 <HAL_RCC_OscConfig+0x334>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004784:	f7fd fd38 	bl	80021f8 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fd fd34 	bl	80021f8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e0b5      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a2:	4b3e      	ldr	r3, [pc, #248]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ee      	bne.n	800478c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b4:	4b39      	ldr	r3, [pc, #228]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80047b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b8:	4a38      	ldr	r2, [pc, #224]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80047ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80a1 	beq.w	800490c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ca:	4b34      	ldr	r3, [pc, #208]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d05c      	beq.n	8004890 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d141      	bne.n	8004862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b31      	ldr	r3, [pc, #196]	@ (80048a4 <HAL_RCC_OscConfig+0x478>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fd fd08 	bl	80021f8 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fd fd04 	bl	80021f8 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e087      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	4b27      	ldr	r3, [pc, #156]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	019b      	lsls	r3, r3, #6
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	3b01      	subs	r3, #1
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	491b      	ldr	r1, [pc, #108]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004834:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <HAL_RCC_OscConfig+0x478>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fd fcdd 	bl	80021f8 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004842:	f7fd fcd9 	bl	80021f8 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e05c      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004854:	4b11      	ldr	r3, [pc, #68]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x416>
 8004860:	e054      	b.n	800490c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004862:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <HAL_RCC_OscConfig+0x478>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fd fcc6 	bl	80021f8 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004870:	f7fd fcc2 	bl	80021f8 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e045      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004882:	4b06      	ldr	r3, [pc, #24]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x444>
 800488e:	e03d      	b.n	800490c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e038      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
 800489c:	40023800 	.word	0x40023800
 80048a0:	40007000 	.word	0x40007000
 80048a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <HAL_RCC_OscConfig+0x4ec>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d028      	beq.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d121      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d11a      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	3b01      	subs	r3, #1
 80048f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800

0800491c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0cc      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004930:	4b68      	ldr	r3, [pc, #416]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d90c      	bls.n	8004958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b65      	ldr	r3, [pc, #404]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b63      	ldr	r3, [pc, #396]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0b8      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004970:	4b59      	ldr	r3, [pc, #356]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4a58      	ldr	r2, [pc, #352]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800497a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004988:	4b53      	ldr	r3, [pc, #332]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4a52      	ldr	r2, [pc, #328]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b50      	ldr	r3, [pc, #320]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	494d      	ldr	r1, [pc, #308]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d044      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b47      	ldr	r3, [pc, #284]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d119      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d003      	beq.n	80049da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	4b3f      	ldr	r3, [pc, #252]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ea:	4b3b      	ldr	r3, [pc, #236]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e067      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fa:	4b37      	ldr	r3, [pc, #220]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f023 0203 	bic.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4934      	ldr	r1, [pc, #208]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a0c:	f7fd fbf4 	bl	80021f8 <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a14:	f7fd fbf0 	bl	80021f8 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e04f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 020c 	and.w	r2, r3, #12
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d1eb      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d20c      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b22      	ldr	r3, [pc, #136]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b20      	ldr	r3, [pc, #128]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e032      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b19      	ldr	r3, [pc, #100]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4916      	ldr	r1, [pc, #88]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a8e:	4b12      	ldr	r3, [pc, #72]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	490e      	ldr	r1, [pc, #56]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aa2:	f000 f821 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	490a      	ldr	r1, [pc, #40]	@ (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004ab4:	5ccb      	ldrb	r3, [r1, r3]
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	4a09      	ldr	r2, [pc, #36]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004abe:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fd fb54 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023c00 	.word	0x40023c00
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	0800d040 	.word	0x0800d040
 8004ae0:	20000000 	.word	0x20000000
 8004ae4:	20000004 	.word	0x20000004

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aec:	b090      	sub	sp, #64	@ 0x40
 8004aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b00:	4b59      	ldr	r3, [pc, #356]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d00d      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x40>
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	f200 80a1 	bhi.w	8004c54 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x34>
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d003      	beq.n	8004b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b1a:	e09b      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b53      	ldr	r3, [pc, #332]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b20:	e09b      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b22:	4b53      	ldr	r3, [pc, #332]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b26:	e098      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b28:	4b4f      	ldr	r3, [pc, #316]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b32:	4b4d      	ldr	r3, [pc, #308]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d028      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	2200      	movs	r2, #0
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b50:	2100      	movs	r1, #0
 8004b52:	4b47      	ldr	r3, [pc, #284]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b54:	fb03 f201 	mul.w	r2, r3, r1
 8004b58:	2300      	movs	r3, #0
 8004b5a:	fb00 f303 	mul.w	r3, r0, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	4a43      	ldr	r2, [pc, #268]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b62:	fba0 1202 	umull	r1, r2, r0, r2
 8004b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b68:	460a      	mov	r2, r1
 8004b6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b6e:	4413      	add	r3, r2
 8004b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b74:	2200      	movs	r2, #0
 8004b76:	61bb      	str	r3, [r7, #24]
 8004b78:	61fa      	str	r2, [r7, #28]
 8004b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b82:	f7fb fff3 	bl	8000b6c <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b8e:	e053      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b90:	4b35      	ldr	r3, [pc, #212]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	2200      	movs	r2, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	617a      	str	r2, [r7, #20]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ba2:	f04f 0b00 	mov.w	fp, #0
 8004ba6:	4652      	mov	r2, sl
 8004ba8:	465b      	mov	r3, fp
 8004baa:	f04f 0000 	mov.w	r0, #0
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	0159      	lsls	r1, r3, #5
 8004bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb8:	0150      	lsls	r0, r2, #5
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	ebb2 080a 	subs.w	r8, r2, sl
 8004bc2:	eb63 090b 	sbc.w	r9, r3, fp
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bda:	ebb2 0408 	subs.w	r4, r2, r8
 8004bde:	eb63 0509 	sbc.w	r5, r3, r9
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	00eb      	lsls	r3, r5, #3
 8004bec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf0:	00e2      	lsls	r2, r4, #3
 8004bf2:	4614      	mov	r4, r2
 8004bf4:	461d      	mov	r5, r3
 8004bf6:	eb14 030a 	adds.w	r3, r4, sl
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	eb45 030b 	adc.w	r3, r5, fp
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c0e:	4629      	mov	r1, r5
 8004c10:	028b      	lsls	r3, r1, #10
 8004c12:	4621      	mov	r1, r4
 8004c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c18:	4621      	mov	r1, r4
 8004c1a:	028a      	lsls	r2, r1, #10
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c22:	2200      	movs	r2, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	60fa      	str	r2, [r7, #12]
 8004c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c2c:	f7fb ff9e 	bl	8000b6c <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4613      	mov	r3, r2
 8004c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c38:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	3301      	adds	r3, #1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004c48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c52:	e002      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c54:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3740      	adds	r7, #64	@ 0x40
 8004c60:	46bd      	mov	sp, r7
 8004c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	017d7840 	.word	0x017d7840

08004c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000000 	.word	0x20000000

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c90:	f7ff fff0 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4903      	ldr	r1, [pc, #12]	@ (8004cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	0800d050 	.word	0x0800d050

08004cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cb8:	f7ff ffdc 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0b5b      	lsrs	r3, r3, #13
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4903      	ldr	r1, [pc, #12]	@ (8004cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800d050 	.word	0x0800d050

08004cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e041      	b.n	8004d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc fe7a 	bl	80019fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 f8f4 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_ConfigClockSource+0x1c>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e0b4      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x186>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004db4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dbc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dce:	d03e      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0xd4>
 8004dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dd4:	f200 8087 	bhi.w	8004ee6 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ddc:	f000 8086 	beq.w	8004eec <HAL_TIM_ConfigClockSource+0x172>
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de4:	d87f      	bhi.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16c>
 8004de6:	2b70      	cmp	r3, #112	@ 0x70
 8004de8:	d01a      	beq.n	8004e20 <HAL_TIM_ConfigClockSource+0xa6>
 8004dea:	2b70      	cmp	r3, #112	@ 0x70
 8004dec:	d87b      	bhi.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16c>
 8004dee:	2b60      	cmp	r3, #96	@ 0x60
 8004df0:	d050      	beq.n	8004e94 <HAL_TIM_ConfigClockSource+0x11a>
 8004df2:	2b60      	cmp	r3, #96	@ 0x60
 8004df4:	d877      	bhi.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16c>
 8004df6:	2b50      	cmp	r3, #80	@ 0x50
 8004df8:	d03c      	beq.n	8004e74 <HAL_TIM_ConfigClockSource+0xfa>
 8004dfa:	2b50      	cmp	r3, #80	@ 0x50
 8004dfc:	d873      	bhi.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfe:	2b40      	cmp	r3, #64	@ 0x40
 8004e00:	d058      	beq.n	8004eb4 <HAL_TIM_ConfigClockSource+0x13a>
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	d86f      	bhi.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16c>
 8004e06:	2b30      	cmp	r3, #48	@ 0x30
 8004e08:	d064      	beq.n	8004ed4 <HAL_TIM_ConfigClockSource+0x15a>
 8004e0a:	2b30      	cmp	r3, #48	@ 0x30
 8004e0c:	d86b      	bhi.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d060      	beq.n	8004ed4 <HAL_TIM_ConfigClockSource+0x15a>
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d867      	bhi.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16c>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d05c      	beq.n	8004ed4 <HAL_TIM_ConfigClockSource+0x15a>
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d05a      	beq.n	8004ed4 <HAL_TIM_ConfigClockSource+0x15a>
 8004e1e:	e062      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e30:	f000 f970 	bl	8005114 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e42:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	609a      	str	r2, [r3, #8]
      break;
 8004e4c:	e04f      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e5e:	f000 f959 	bl	8005114 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e70:	609a      	str	r2, [r3, #8]
      break;
 8004e72:	e03c      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e80:	461a      	mov	r2, r3
 8004e82:	f000 f8cd 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2150      	movs	r1, #80	@ 0x50
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 f926 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004e92:	e02c      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f000 f8ec 	bl	800507e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2160      	movs	r1, #96	@ 0x60
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f916 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004eb2:	e01c      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f000 f8ad 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2140      	movs	r1, #64	@ 0x40
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 f906 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004ed2:	e00c      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f000 f8fd 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004ee4:	e003      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8004eea:	e000      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004eec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3a      	ldr	r2, [pc, #232]	@ (8005004 <TIM_Base_SetConfig+0xfc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00f      	beq.n	8004f40 <TIM_Base_SetConfig+0x38>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f26:	d00b      	beq.n	8004f40 <TIM_Base_SetConfig+0x38>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a37      	ldr	r2, [pc, #220]	@ (8005008 <TIM_Base_SetConfig+0x100>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_Base_SetConfig+0x38>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a36      	ldr	r2, [pc, #216]	@ (800500c <TIM_Base_SetConfig+0x104>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x38>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a35      	ldr	r2, [pc, #212]	@ (8005010 <TIM_Base_SetConfig+0x108>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2b      	ldr	r2, [pc, #172]	@ (8005004 <TIM_Base_SetConfig+0xfc>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01b      	beq.n	8004f92 <TIM_Base_SetConfig+0x8a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f60:	d017      	beq.n	8004f92 <TIM_Base_SetConfig+0x8a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a28      	ldr	r2, [pc, #160]	@ (8005008 <TIM_Base_SetConfig+0x100>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <TIM_Base_SetConfig+0x8a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a27      	ldr	r2, [pc, #156]	@ (800500c <TIM_Base_SetConfig+0x104>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00f      	beq.n	8004f92 <TIM_Base_SetConfig+0x8a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a26      	ldr	r2, [pc, #152]	@ (8005010 <TIM_Base_SetConfig+0x108>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <TIM_Base_SetConfig+0x8a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a25      	ldr	r2, [pc, #148]	@ (8005014 <TIM_Base_SetConfig+0x10c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <TIM_Base_SetConfig+0x8a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a24      	ldr	r2, [pc, #144]	@ (8005018 <TIM_Base_SetConfig+0x110>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_Base_SetConfig+0x8a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a23      	ldr	r2, [pc, #140]	@ (800501c <TIM_Base_SetConfig+0x114>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d108      	bne.n	8004fa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0e      	ldr	r2, [pc, #56]	@ (8005004 <TIM_Base_SetConfig+0xfc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d103      	bne.n	8004fd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f023 0201 	bic.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	611a      	str	r2, [r3, #16]
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40000c00 	.word	0x40000c00
 8005014:	40014000 	.word	0x40014000
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800

08005020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800504a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 030a 	bic.w	r3, r3, #10
 800505c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f023 0210 	bic.w	r2, r3, #16
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	031b      	lsls	r3, r3, #12
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f043 0307 	orr.w	r3, r3, #7
 8005100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800512e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	021a      	lsls	r2, r3, #8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	431a      	orrs	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4313      	orrs	r3, r2
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e042      	b.n	80051ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc fc60 	bl	8001a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2224      	movs	r2, #36	@ 0x24
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fe75 	bl	8005e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695a      	ldr	r2, [r3, #20]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b20      	cmp	r3, #32
 800520c:	d112      	bne.n	8005234 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_UART_Receive_DMA+0x26>
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e00b      	b.n	8005236 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	461a      	mov	r2, r3
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fbcc 	bl	80059c8 <UART_Start_Receive_DMA>
 8005230:	4603      	mov	r3, r0
 8005232:	e000      	b.n	8005236 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0ba      	sub	sp, #232	@ 0xe8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005266:	2300      	movs	r3, #0
 8005268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800526c:	2300      	movs	r3, #0
 800526e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800527e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <HAL_UART_IRQHandler+0x66>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fd33 	bl	8005d0a <UART_Receive_IT>
      return;
 80052a4:	e25b      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 80de 	beq.w	800546c <HAL_UART_IRQHandler+0x22c>
 80052b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80d1 	beq.w	800546c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_UART_IRQHandler+0xae>
 80052d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e6:	f043 0201 	orr.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <HAL_UART_IRQHandler+0xd2>
 80052fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f043 0202 	orr.w	r2, r3, #2
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_UART_IRQHandler+0xf6>
 800531e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	f043 0204 	orr.w	r2, r3, #4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d011      	beq.n	8005366 <HAL_UART_IRQHandler+0x126>
 8005342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d105      	bne.n	800535a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800534e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f043 0208 	orr.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 81f2 	beq.w	8005754 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_UART_IRQHandler+0x14e>
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fcbe 	bl	8005d0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005398:	2b40      	cmp	r3, #64	@ 0x40
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <HAL_UART_IRQHandler+0x17a>
 80053b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04f      	beq.n	800545a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fbc6 	bl	8005b4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ca:	2b40      	cmp	r3, #64	@ 0x40
 80053cc:	d141      	bne.n	8005452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3314      	adds	r3, #20
 80053d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3314      	adds	r3, #20
 80053f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1d9      	bne.n	80053ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d013      	beq.n	800544a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	4a7e      	ldr	r2, [pc, #504]	@ (8005620 <HAL_UART_IRQHandler+0x3e0>)
 8005428:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd f99a 	bl	8002768 <HAL_DMA_Abort_IT>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005444:	4610      	mov	r0, r2
 8005446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	e00e      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f9a8 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	e00a      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f9a4 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005458:	e006      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f9a0 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005466:	e175      	b.n	8005754 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005468:	bf00      	nop
    return;
 800546a:	e173      	b.n	8005754 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005470:	2b01      	cmp	r3, #1
 8005472:	f040 814f 	bne.w	8005714 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8148 	beq.w	8005714 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8141 	beq.w	8005714 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	f040 80b6 	bne.w	8005624 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8145 	beq.w	8005758 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054d6:	429a      	cmp	r2, r3
 80054d8:	f080 813e 	bcs.w	8005758 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ee:	f000 8088 	beq.w	8005602 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800550c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800551e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800552a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1d9      	bne.n	80054f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800554e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005562:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005566:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800556a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e1      	bne.n	800553e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800558a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800558c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800559e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e3      	bne.n	800557a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e3      	bne.n	80055c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fd f843 	bl	8002688 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005610:	b29b      	uxth	r3, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	b29b      	uxth	r3, r3
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8cb 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800561e:	e09b      	b.n	8005758 <HAL_UART_IRQHandler+0x518>
 8005620:	08005c13 	.word	0x08005c13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800562c:	b29b      	uxth	r3, r3
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 808e 	beq.w	800575c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8089 	beq.w	800575c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	330c      	adds	r3, #12
 8005650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800566e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005670:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800567c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e3      	bne.n	800564a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	623b      	str	r3, [r7, #32]
   return(result);
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e3      	bne.n	8005682 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056ec:	61fa      	str	r2, [r7, #28]
 80056ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	617b      	str	r3, [r7, #20]
   return(result);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e3      	bne.n	80056c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005706:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f851 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005712:	e023      	b.n	800575c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <HAL_UART_IRQHandler+0x4f4>
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fa84 	bl	8005c3a <UART_Transmit_IT>
    return;
 8005732:	e014      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <HAL_UART_IRQHandler+0x51e>
 8005740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fac4 	bl	8005cda <UART_EndTransmit_IT>
    return;
 8005752:	e004      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
    return;
 8005754:	bf00      	nop
 8005756:	e002      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
      return;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
      return;
 800575c:	bf00      	nop
  }
}
 800575e:	37e8      	adds	r7, #232	@ 0xe8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b09c      	sub	sp, #112	@ 0x70
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d172      	bne.n	80058ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80057e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057ea:	2200      	movs	r2, #0
 80057ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800580e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005810:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005814:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800581c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	667b      	str	r3, [r7, #100]	@ 0x64
 800583a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3314      	adds	r3, #20
 8005840:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005842:	647a      	str	r2, [r7, #68]	@ 0x44
 8005844:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3314      	adds	r3, #20
 800585c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	623b      	str	r3, [r7, #32]
   return(result);
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800586c:	663b      	str	r3, [r7, #96]	@ 0x60
 800586e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3314      	adds	r3, #20
 8005874:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005876:	633a      	str	r2, [r7, #48]	@ 0x30
 8005878:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800587c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e5      	bne.n	8005856 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800588a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800588c:	2220      	movs	r2, #32
 800588e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005896:	2b01      	cmp	r3, #1
 8005898:	d119      	bne.n	80058ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f023 0310 	bic.w	r3, r3, #16
 80058b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80058ba:	61fa      	str	r2, [r7, #28]
 80058bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	69b9      	ldr	r1, [r7, #24]
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	617b      	str	r3, [r7, #20]
   return(result);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e5      	bne.n	800589a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058d0:	2200      	movs	r2, #0
 80058d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d106      	bne.n	80058ea <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058e0:	4619      	mov	r1, r3
 80058e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80058e4:	f7ff ff66 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058e8:	e002      	b.n	80058f0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80058ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80058ec:	f7ff ff44 	bl	8005778 <HAL_UART_RxCpltCallback>
}
 80058f0:	bf00      	nop
 80058f2:	3770      	adds	r7, #112	@ 0x70
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005910:	2b01      	cmp	r3, #1
 8005912:	d108      	bne.n	8005926 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	b29b      	uxth	r3, r3
 800591c:	4619      	mov	r1, r3
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7ff ff48 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005924:	e002      	b.n	800592c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff ff30 	bl	800578c <HAL_UART_RxHalfCpltCallback>
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005950:	2b80      	cmp	r3, #128	@ 0x80
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b21      	cmp	r3, #33	@ 0x21
 8005966:	d108      	bne.n	800597a <UART_DMAError+0x46>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2200      	movs	r2, #0
 8005972:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005974:	68b8      	ldr	r0, [r7, #8]
 8005976:	f000 f8c1 	bl	8005afc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005984:	2b40      	cmp	r3, #64	@ 0x40
 8005986:	bf0c      	ite	eq
 8005988:	2301      	moveq	r3, #1
 800598a:	2300      	movne	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b22      	cmp	r3, #34	@ 0x22
 800599a:	d108      	bne.n	80059ae <UART_DMAError+0x7a>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2200      	movs	r2, #0
 80059a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80059a8:	68b8      	ldr	r0, [r7, #8]
 80059aa:	f000 f8cf 	bl	8005b4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b2:	f043 0210 	orr.w	r2, r3, #16
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ba:	68b8      	ldr	r0, [r7, #8]
 80059bc:	f7ff fef0 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b098      	sub	sp, #96	@ 0x60
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	88fa      	ldrh	r2, [r7, #6]
 80059e0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2222      	movs	r2, #34	@ 0x22
 80059ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f4:	4a3e      	ldr	r2, [pc, #248]	@ (8005af0 <UART_Start_Receive_DMA+0x128>)
 80059f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fc:	4a3d      	ldr	r2, [pc, #244]	@ (8005af4 <UART_Start_Receive_DMA+0x12c>)
 80059fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a04:	4a3c      	ldr	r2, [pc, #240]	@ (8005af8 <UART_Start_Receive_DMA+0x130>)
 8005a06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005a10:	f107 0308 	add.w	r3, r7, #8
 8005a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	f7fc fdd6 	bl	80025d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d019      	beq.n	8005a7e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	330c      	adds	r3, #12
 8005a50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e5      	bne.n	8005a4a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3314      	adds	r3, #20
 8005a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3314      	adds	r3, #20
 8005a9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a9e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005aa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e5      	bne.n	8005a7e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3314      	adds	r3, #20
 8005ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ac8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ad2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6a39      	ldr	r1, [r7, #32]
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e5      	bne.n	8005ab2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3760      	adds	r7, #96	@ 0x60
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	080057cd 	.word	0x080057cd
 8005af4:	080058f9 	.word	0x080058f9
 8005af8:	08005935 	.word	0x08005935

08005afc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	@ 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	61ba      	str	r2, [r7, #24]
 8005b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6979      	ldr	r1, [r7, #20]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	613b      	str	r3, [r7, #16]
   return(result);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e5      	bne.n	8005b04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005b40:	bf00      	nop
 8005b42:	3724      	adds	r7, #36	@ 0x24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b095      	sub	sp, #84	@ 0x54
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b74:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e5      	bne.n	8005b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3314      	adds	r3, #20
 8005ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ba8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e5      	bne.n	8005b88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d119      	bne.n	8005bf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f023 0310 	bic.w	r3, r3, #16
 8005bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005be4:	61ba      	str	r2, [r7, #24]
 8005be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6979      	ldr	r1, [r7, #20]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e5      	bne.n	8005bc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c06:	bf00      	nop
 8005c08:	3754      	adds	r7, #84	@ 0x54
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff fdb7 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b21      	cmp	r3, #33	@ 0x21
 8005c4c:	d13e      	bne.n	8005ccc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c56:	d114      	bne.n	8005c82 <UART_Transmit_IT+0x48>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d110      	bne.n	8005c82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	1c9a      	adds	r2, r3, #2
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]
 8005c80:	e008      	b.n	8005c94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	1c59      	adds	r1, r3, #1
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6211      	str	r1, [r2, #32]
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10f      	bne.n	8005cc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e000      	b.n	8005cce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ccc:	2302      	movs	r3, #2
  }
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fd32 	bl	8005764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b08c      	sub	sp, #48	@ 0x30
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b22      	cmp	r3, #34	@ 0x22
 8005d1c:	f040 80ae 	bne.w	8005e7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d28:	d117      	bne.n	8005d5a <UART_Receive_IT+0x50>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d113      	bne.n	8005d5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d52:	1c9a      	adds	r2, r3, #2
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d58:	e026      	b.n	8005da8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d6c:	d007      	beq.n	8005d7e <UART_Receive_IT+0x74>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <UART_Receive_IT+0x82>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	e008      	b.n	8005d9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	4619      	mov	r1, r3
 8005db6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d15d      	bne.n	8005e78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0220 	bic.w	r2, r2, #32
 8005dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d135      	bne.n	8005e6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	613b      	str	r3, [r7, #16]
   return(result);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f023 0310 	bic.w	r3, r3, #16
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	330c      	adds	r3, #12
 8005e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e28:	623a      	str	r2, [r7, #32]
 8005e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	69f9      	ldr	r1, [r7, #28]
 8005e2e:	6a3a      	ldr	r2, [r7, #32]
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e5      	bne.n	8005e08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0310 	and.w	r3, r3, #16
 8005e46:	2b10      	cmp	r3, #16
 8005e48:	d10a      	bne.n	8005e60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fca4 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
 8005e6c:	e002      	b.n	8005e74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fc82 	bl	8005778 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	e002      	b.n	8005e7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e000      	b.n	8005e7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3730      	adds	r7, #48	@ 0x30
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e8c:	b0c0      	sub	sp, #256	@ 0x100
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea4:	68d9      	ldr	r1, [r3, #12]
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	ea40 0301 	orr.w	r3, r0, r1
 8005eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ee0:	f021 010c 	bic.w	r1, r1, #12
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f02:	6999      	ldr	r1, [r3, #24]
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	ea40 0301 	orr.w	r3, r0, r1
 8005f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b8f      	ldr	r3, [pc, #572]	@ (8006154 <UART_SetConfig+0x2cc>)
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d005      	beq.n	8005f28 <UART_SetConfig+0xa0>
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b8d      	ldr	r3, [pc, #564]	@ (8006158 <UART_SetConfig+0x2d0>)
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d104      	bne.n	8005f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f28:	f7fe fec4 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 8005f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f30:	e003      	b.n	8005f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f32:	f7fe feab 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8005f36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f44:	f040 810c 	bne.w	8006160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	1891      	adds	r1, r2, r2
 8005f60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f62:	415b      	adcs	r3, r3
 8005f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	eb12 0801 	adds.w	r8, r2, r1
 8005f70:	4629      	mov	r1, r5
 8005f72:	eb43 0901 	adc.w	r9, r3, r1
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f8a:	4690      	mov	r8, r2
 8005f8c:	4699      	mov	r9, r3
 8005f8e:	4623      	mov	r3, r4
 8005f90:	eb18 0303 	adds.w	r3, r8, r3
 8005f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f98:	462b      	mov	r3, r5
 8005f9a:	eb49 0303 	adc.w	r3, r9, r3
 8005f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	18db      	adds	r3, r3, r3
 8005fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	eb42 0303 	adc.w	r3, r2, r3
 8005fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005fcc:	f7fa fdce 	bl	8000b6c <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4b61      	ldr	r3, [pc, #388]	@ (800615c <UART_SetConfig+0x2d4>)
 8005fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	011c      	lsls	r4, r3, #4
 8005fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	1891      	adds	r1, r2, r2
 8005ff6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ff8:	415b      	adcs	r3, r3
 8005ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006000:	4641      	mov	r1, r8
 8006002:	eb12 0a01 	adds.w	sl, r2, r1
 8006006:	4649      	mov	r1, r9
 8006008:	eb43 0b01 	adc.w	fp, r3, r1
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800601c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006020:	4692      	mov	sl, r2
 8006022:	469b      	mov	fp, r3
 8006024:	4643      	mov	r3, r8
 8006026:	eb1a 0303 	adds.w	r3, sl, r3
 800602a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800602e:	464b      	mov	r3, r9
 8006030:	eb4b 0303 	adc.w	r3, fp, r3
 8006034:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006044:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800604c:	460b      	mov	r3, r1
 800604e:	18db      	adds	r3, r3, r3
 8006050:	643b      	str	r3, [r7, #64]	@ 0x40
 8006052:	4613      	mov	r3, r2
 8006054:	eb42 0303 	adc.w	r3, r2, r3
 8006058:	647b      	str	r3, [r7, #68]	@ 0x44
 800605a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800605e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006062:	f7fa fd83 	bl	8000b6c <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4611      	mov	r1, r2
 800606c:	4b3b      	ldr	r3, [pc, #236]	@ (800615c <UART_SetConfig+0x2d4>)
 800606e:	fba3 2301 	umull	r2, r3, r3, r1
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	2264      	movs	r2, #100	@ 0x64
 8006076:	fb02 f303 	mul.w	r3, r2, r3
 800607a:	1acb      	subs	r3, r1, r3
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006082:	4b36      	ldr	r3, [pc, #216]	@ (800615c <UART_SetConfig+0x2d4>)
 8006084:	fba3 2302 	umull	r2, r3, r3, r2
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006090:	441c      	add	r4, r3
 8006092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006096:	2200      	movs	r2, #0
 8006098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800609c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060a4:	4642      	mov	r2, r8
 80060a6:	464b      	mov	r3, r9
 80060a8:	1891      	adds	r1, r2, r2
 80060aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060ac:	415b      	adcs	r3, r3
 80060ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060b4:	4641      	mov	r1, r8
 80060b6:	1851      	adds	r1, r2, r1
 80060b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80060ba:	4649      	mov	r1, r9
 80060bc:	414b      	adcs	r3, r1
 80060be:	637b      	str	r3, [r7, #52]	@ 0x34
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060cc:	4659      	mov	r1, fp
 80060ce:	00cb      	lsls	r3, r1, #3
 80060d0:	4651      	mov	r1, sl
 80060d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060d6:	4651      	mov	r1, sl
 80060d8:	00ca      	lsls	r2, r1, #3
 80060da:	4610      	mov	r0, r2
 80060dc:	4619      	mov	r1, r3
 80060de:	4603      	mov	r3, r0
 80060e0:	4642      	mov	r2, r8
 80060e2:	189b      	adds	r3, r3, r2
 80060e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060e8:	464b      	mov	r3, r9
 80060ea:	460a      	mov	r2, r1
 80060ec:	eb42 0303 	adc.w	r3, r2, r3
 80060f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006100:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006108:	460b      	mov	r3, r1
 800610a:	18db      	adds	r3, r3, r3
 800610c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800610e:	4613      	mov	r3, r2
 8006110:	eb42 0303 	adc.w	r3, r2, r3
 8006114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800611a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800611e:	f7fa fd25 	bl	8000b6c <__aeabi_uldivmod>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <UART_SetConfig+0x2d4>)
 8006128:	fba3 1302 	umull	r1, r3, r3, r2
 800612c:	095b      	lsrs	r3, r3, #5
 800612e:	2164      	movs	r1, #100	@ 0x64
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	3332      	adds	r3, #50	@ 0x32
 800613a:	4a08      	ldr	r2, [pc, #32]	@ (800615c <UART_SetConfig+0x2d4>)
 800613c:	fba2 2303 	umull	r2, r3, r2, r3
 8006140:	095b      	lsrs	r3, r3, #5
 8006142:	f003 0207 	and.w	r2, r3, #7
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4422      	add	r2, r4
 800614e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006150:	e106      	b.n	8006360 <UART_SetConfig+0x4d8>
 8006152:	bf00      	nop
 8006154:	40011000 	.word	0x40011000
 8006158:	40011400 	.word	0x40011400
 800615c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006164:	2200      	movs	r2, #0
 8006166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800616a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800616e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006172:	4642      	mov	r2, r8
 8006174:	464b      	mov	r3, r9
 8006176:	1891      	adds	r1, r2, r2
 8006178:	6239      	str	r1, [r7, #32]
 800617a:	415b      	adcs	r3, r3
 800617c:	627b      	str	r3, [r7, #36]	@ 0x24
 800617e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006182:	4641      	mov	r1, r8
 8006184:	1854      	adds	r4, r2, r1
 8006186:	4649      	mov	r1, r9
 8006188:	eb43 0501 	adc.w	r5, r3, r1
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	00eb      	lsls	r3, r5, #3
 8006196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800619a:	00e2      	lsls	r2, r4, #3
 800619c:	4614      	mov	r4, r2
 800619e:	461d      	mov	r5, r3
 80061a0:	4643      	mov	r3, r8
 80061a2:	18e3      	adds	r3, r4, r3
 80061a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061a8:	464b      	mov	r3, r9
 80061aa:	eb45 0303 	adc.w	r3, r5, r3
 80061ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061ce:	4629      	mov	r1, r5
 80061d0:	008b      	lsls	r3, r1, #2
 80061d2:	4621      	mov	r1, r4
 80061d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d8:	4621      	mov	r1, r4
 80061da:	008a      	lsls	r2, r1, #2
 80061dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061e0:	f7fa fcc4 	bl	8000b6c <__aeabi_uldivmod>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4b60      	ldr	r3, [pc, #384]	@ (800636c <UART_SetConfig+0x4e4>)
 80061ea:	fba3 2302 	umull	r2, r3, r3, r2
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	011c      	lsls	r4, r3, #4
 80061f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006204:	4642      	mov	r2, r8
 8006206:	464b      	mov	r3, r9
 8006208:	1891      	adds	r1, r2, r2
 800620a:	61b9      	str	r1, [r7, #24]
 800620c:	415b      	adcs	r3, r3
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006214:	4641      	mov	r1, r8
 8006216:	1851      	adds	r1, r2, r1
 8006218:	6139      	str	r1, [r7, #16]
 800621a:	4649      	mov	r1, r9
 800621c:	414b      	adcs	r3, r1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800622c:	4659      	mov	r1, fp
 800622e:	00cb      	lsls	r3, r1, #3
 8006230:	4651      	mov	r1, sl
 8006232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006236:	4651      	mov	r1, sl
 8006238:	00ca      	lsls	r2, r1, #3
 800623a:	4610      	mov	r0, r2
 800623c:	4619      	mov	r1, r3
 800623e:	4603      	mov	r3, r0
 8006240:	4642      	mov	r2, r8
 8006242:	189b      	adds	r3, r3, r2
 8006244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006248:	464b      	mov	r3, r9
 800624a:	460a      	mov	r2, r1
 800624c:	eb42 0303 	adc.w	r3, r2, r3
 8006250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800625e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800626c:	4649      	mov	r1, r9
 800626e:	008b      	lsls	r3, r1, #2
 8006270:	4641      	mov	r1, r8
 8006272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006276:	4641      	mov	r1, r8
 8006278:	008a      	lsls	r2, r1, #2
 800627a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800627e:	f7fa fc75 	bl	8000b6c <__aeabi_uldivmod>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4611      	mov	r1, r2
 8006288:	4b38      	ldr	r3, [pc, #224]	@ (800636c <UART_SetConfig+0x4e4>)
 800628a:	fba3 2301 	umull	r2, r3, r3, r1
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	2264      	movs	r2, #100	@ 0x64
 8006292:	fb02 f303 	mul.w	r3, r2, r3
 8006296:	1acb      	subs	r3, r1, r3
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	3332      	adds	r3, #50	@ 0x32
 800629c:	4a33      	ldr	r2, [pc, #204]	@ (800636c <UART_SetConfig+0x4e4>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062a8:	441c      	add	r4, r3
 80062aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ae:	2200      	movs	r2, #0
 80062b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80062b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80062b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062b8:	4642      	mov	r2, r8
 80062ba:	464b      	mov	r3, r9
 80062bc:	1891      	adds	r1, r2, r2
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	415b      	adcs	r3, r3
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062c8:	4641      	mov	r1, r8
 80062ca:	1851      	adds	r1, r2, r1
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	4649      	mov	r1, r9
 80062d0:	414b      	adcs	r3, r1
 80062d2:	607b      	str	r3, [r7, #4]
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062e0:	4659      	mov	r1, fp
 80062e2:	00cb      	lsls	r3, r1, #3
 80062e4:	4651      	mov	r1, sl
 80062e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ea:	4651      	mov	r1, sl
 80062ec:	00ca      	lsls	r2, r1, #3
 80062ee:	4610      	mov	r0, r2
 80062f0:	4619      	mov	r1, r3
 80062f2:	4603      	mov	r3, r0
 80062f4:	4642      	mov	r2, r8
 80062f6:	189b      	adds	r3, r3, r2
 80062f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062fa:	464b      	mov	r3, r9
 80062fc:	460a      	mov	r2, r1
 80062fe:	eb42 0303 	adc.w	r3, r2, r3
 8006302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	663b      	str	r3, [r7, #96]	@ 0x60
 800630e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800631c:	4649      	mov	r1, r9
 800631e:	008b      	lsls	r3, r1, #2
 8006320:	4641      	mov	r1, r8
 8006322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006326:	4641      	mov	r1, r8
 8006328:	008a      	lsls	r2, r1, #2
 800632a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800632e:	f7fa fc1d 	bl	8000b6c <__aeabi_uldivmod>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4b0d      	ldr	r3, [pc, #52]	@ (800636c <UART_SetConfig+0x4e4>)
 8006338:	fba3 1302 	umull	r1, r3, r3, r2
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	2164      	movs	r1, #100	@ 0x64
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	3332      	adds	r3, #50	@ 0x32
 800634a:	4a08      	ldr	r2, [pc, #32]	@ (800636c <UART_SetConfig+0x4e4>)
 800634c:	fba2 2303 	umull	r2, r3, r2, r3
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	f003 020f 	and.w	r2, r3, #15
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4422      	add	r2, r4
 800635e:	609a      	str	r2, [r3, #8]
}
 8006360:	bf00      	nop
 8006362:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006366:	46bd      	mov	sp, r7
 8006368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800636c:	51eb851f 	.word	0x51eb851f

08006370 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006370:	b084      	sub	sp, #16
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	f107 001c 	add.w	r0, r7, #28
 800637e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006382:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006386:	2b01      	cmp	r3, #1
 8006388:	d123      	bne.n	80063d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800639e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d105      	bne.n	80063c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fae8 	bl	800799c <USB_CoreReset>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]
 80063d0:	e01b      	b.n	800640a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 fadc 	bl	800799c <USB_CoreReset>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80063fc:	e005      	b.n	800640a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006402:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800640a:	7fbb      	ldrb	r3, [r7, #30]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d10b      	bne.n	8006428 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f043 0206 	orr.w	r2, r3, #6
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f043 0220 	orr.w	r2, r3, #32
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006434:	b004      	add	sp, #16
 8006436:	4770      	bx	lr

08006438 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	4613      	mov	r3, r2
 8006444:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d165      	bne.n	8006518 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4a41      	ldr	r2, [pc, #260]	@ (8006554 <USB_SetTurnaroundTime+0x11c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d906      	bls.n	8006462 <USB_SetTurnaroundTime+0x2a>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4a40      	ldr	r2, [pc, #256]	@ (8006558 <USB_SetTurnaroundTime+0x120>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d202      	bcs.n	8006462 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800645c:	230f      	movs	r3, #15
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	e062      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4a3c      	ldr	r2, [pc, #240]	@ (8006558 <USB_SetTurnaroundTime+0x120>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d306      	bcc.n	8006478 <USB_SetTurnaroundTime+0x40>
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4a3b      	ldr	r2, [pc, #236]	@ (800655c <USB_SetTurnaroundTime+0x124>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d202      	bcs.n	8006478 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006472:	230e      	movs	r3, #14
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	e057      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4a38      	ldr	r2, [pc, #224]	@ (800655c <USB_SetTurnaroundTime+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d306      	bcc.n	800648e <USB_SetTurnaroundTime+0x56>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4a37      	ldr	r2, [pc, #220]	@ (8006560 <USB_SetTurnaroundTime+0x128>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d202      	bcs.n	800648e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006488:	230d      	movs	r3, #13
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e04c      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4a33      	ldr	r2, [pc, #204]	@ (8006560 <USB_SetTurnaroundTime+0x128>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d306      	bcc.n	80064a4 <USB_SetTurnaroundTime+0x6c>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4a32      	ldr	r2, [pc, #200]	@ (8006564 <USB_SetTurnaroundTime+0x12c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d802      	bhi.n	80064a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800649e:	230c      	movs	r3, #12
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	e041      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4a2f      	ldr	r2, [pc, #188]	@ (8006564 <USB_SetTurnaroundTime+0x12c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d906      	bls.n	80064ba <USB_SetTurnaroundTime+0x82>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4a2e      	ldr	r2, [pc, #184]	@ (8006568 <USB_SetTurnaroundTime+0x130>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d802      	bhi.n	80064ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80064b4:	230b      	movs	r3, #11
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e036      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006568 <USB_SetTurnaroundTime+0x130>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d906      	bls.n	80064d0 <USB_SetTurnaroundTime+0x98>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4a29      	ldr	r2, [pc, #164]	@ (800656c <USB_SetTurnaroundTime+0x134>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d802      	bhi.n	80064d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064ca:	230a      	movs	r3, #10
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	e02b      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4a26      	ldr	r2, [pc, #152]	@ (800656c <USB_SetTurnaroundTime+0x134>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d906      	bls.n	80064e6 <USB_SetTurnaroundTime+0xae>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a25      	ldr	r2, [pc, #148]	@ (8006570 <USB_SetTurnaroundTime+0x138>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d202      	bcs.n	80064e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064e0:	2309      	movs	r3, #9
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e020      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4a21      	ldr	r2, [pc, #132]	@ (8006570 <USB_SetTurnaroundTime+0x138>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d306      	bcc.n	80064fc <USB_SetTurnaroundTime+0xc4>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4a20      	ldr	r2, [pc, #128]	@ (8006574 <USB_SetTurnaroundTime+0x13c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d802      	bhi.n	80064fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064f6:	2308      	movs	r3, #8
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	e015      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006574 <USB_SetTurnaroundTime+0x13c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d906      	bls.n	8006512 <USB_SetTurnaroundTime+0xda>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a1c      	ldr	r2, [pc, #112]	@ (8006578 <USB_SetTurnaroundTime+0x140>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d202      	bcs.n	8006512 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800650c:	2307      	movs	r3, #7
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e00a      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006512:	2306      	movs	r3, #6
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	e007      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800651e:	2309      	movs	r3, #9
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	e001      	b.n	8006528 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006524:	2309      	movs	r3, #9
 8006526:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	029b      	lsls	r3, r3, #10
 800653c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006540:	431a      	orrs	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	00d8acbf 	.word	0x00d8acbf
 8006558:	00e4e1c0 	.word	0x00e4e1c0
 800655c:	00f42400 	.word	0x00f42400
 8006560:	01067380 	.word	0x01067380
 8006564:	011a499f 	.word	0x011a499f
 8006568:	01312cff 	.word	0x01312cff
 800656c:	014ca43f 	.word	0x014ca43f
 8006570:	016e3600 	.word	0x016e3600
 8006574:	01a6ab1f 	.word	0x01a6ab1f
 8006578:	01e84800 	.word	0x01e84800

0800657c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f043 0201 	orr.w	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f023 0201 	bic.w	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d115      	bne.n	800660e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065ee:	200a      	movs	r0, #10
 80065f0:	f7fb fe0e 	bl	8002210 <HAL_Delay>
      ms += 10U;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	330a      	adds	r3, #10
 80065f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 f93f 	bl	800787e <USB_GetMode>
 8006600:	4603      	mov	r3, r0
 8006602:	2b01      	cmp	r3, #1
 8006604:	d01e      	beq.n	8006644 <USB_SetCurrentMode+0x84>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2bc7      	cmp	r3, #199	@ 0xc7
 800660a:	d9f0      	bls.n	80065ee <USB_SetCurrentMode+0x2e>
 800660c:	e01a      	b.n	8006644 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d115      	bne.n	8006640 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006620:	200a      	movs	r0, #10
 8006622:	f7fb fdf5 	bl	8002210 <HAL_Delay>
      ms += 10U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	330a      	adds	r3, #10
 800662a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 f926 	bl	800787e <USB_GetMode>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <USB_SetCurrentMode+0x84>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2bc7      	cmp	r3, #199	@ 0xc7
 800663c:	d9f0      	bls.n	8006620 <USB_SetCurrentMode+0x60>
 800663e:	e001      	b.n	8006644 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e005      	b.n	8006650 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2bc8      	cmp	r3, #200	@ 0xc8
 8006648:	d101      	bne.n	800664e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006658:	b084      	sub	sp, #16
 800665a:	b580      	push	{r7, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006672:	2300      	movs	r3, #0
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	e009      	b.n	800668c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	3340      	adds	r3, #64	@ 0x40
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	2200      	movs	r2, #0
 8006684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b0e      	cmp	r3, #14
 8006690:	d9f2      	bls.n	8006678 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006692:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006696:	2b00      	cmp	r3, #0
 8006698:	d11c      	bne.n	80066d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a8:	f043 0302 	orr.w	r3, r3, #2
 80066ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80066d2:	e00b      	b.n	80066ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066f2:	461a      	mov	r2, r3
 80066f4:	2300      	movs	r3, #0
 80066f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d10d      	bne.n	800671c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006704:	2b00      	cmp	r3, #0
 8006706:	d104      	bne.n	8006712 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f968 	bl	80069e0 <USB_SetDevSpeed>
 8006710:	e008      	b.n	8006724 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006712:	2101      	movs	r1, #1
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f963 	bl	80069e0 <USB_SetDevSpeed>
 800671a:	e003      	b.n	8006724 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800671c:	2103      	movs	r1, #3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f95e 	bl	80069e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006724:	2110      	movs	r1, #16
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f8fa 	bl	8006920 <USB_FlushTxFifo>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f924 	bl	8006984 <USB_FlushRxFifo>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674c:	461a      	mov	r2, r3
 800674e:	2300      	movs	r3, #0
 8006750:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006758:	461a      	mov	r2, r3
 800675a:	2300      	movs	r3, #0
 800675c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006764:	461a      	mov	r2, r3
 8006766:	2300      	movs	r3, #0
 8006768:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	e043      	b.n	80067f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006786:	d118      	bne.n	80067ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679a:	461a      	mov	r2, r3
 800679c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	e013      	b.n	80067cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b0:	461a      	mov	r2, r3
 80067b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	e008      	b.n	80067cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c6:	461a      	mov	r2, r3
 80067c8:	2300      	movs	r3, #0
 80067ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d8:	461a      	mov	r2, r3
 80067da:	2300      	movs	r3, #0
 80067dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ea:	461a      	mov	r2, r3
 80067ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	3301      	adds	r3, #1
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067fc:	461a      	mov	r2, r3
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4293      	cmp	r3, r2
 8006802:	d3b5      	bcc.n	8006770 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006804:	2300      	movs	r3, #0
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	e043      	b.n	8006892 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800681c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006820:	d118      	bne.n	8006854 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006834:	461a      	mov	r2, r3
 8006836:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	e013      	b.n	8006866 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684a:	461a      	mov	r2, r3
 800684c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	e008      	b.n	8006866 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006860:	461a      	mov	r2, r3
 8006862:	2300      	movs	r3, #0
 8006864:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006872:	461a      	mov	r2, r3
 8006874:	2300      	movs	r3, #0
 8006876:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006884:	461a      	mov	r2, r3
 8006886:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800688a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	3301      	adds	r3, #1
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006896:	461a      	mov	r2, r3
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	4293      	cmp	r3, r2
 800689c:	d3b5      	bcc.n	800680a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80068be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d105      	bne.n	80068d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f043 0210 	orr.w	r2, r3, #16
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699a      	ldr	r2, [r3, #24]
 80068d8:	4b10      	ldr	r3, [pc, #64]	@ (800691c <USB_DevInit+0x2c4>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f043 0208 	orr.w	r2, r3, #8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d107      	bne.n	800690c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006904:	f043 0304 	orr.w	r3, r3, #4
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800690c:	7dfb      	ldrb	r3, [r7, #23]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006918:	b004      	add	sp, #16
 800691a:	4770      	bx	lr
 800691c:	803c3800 	.word	0x803c3800

08006920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3301      	adds	r3, #1
 8006932:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800693a:	d901      	bls.n	8006940 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e01b      	b.n	8006978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	daf2      	bge.n	800692e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	019b      	lsls	r3, r3, #6
 8006950:	f043 0220 	orr.w	r2, r3, #32
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3301      	adds	r3, #1
 800695c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006964:	d901      	bls.n	800696a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e006      	b.n	8006978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b20      	cmp	r3, #32
 8006974:	d0f0      	beq.n	8006958 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800699c:	d901      	bls.n	80069a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e018      	b.n	80069d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	daf2      	bge.n	8006990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2210      	movs	r2, #16
 80069b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069c0:	d901      	bls.n	80069c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e006      	b.n	80069d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0310 	and.w	r3, r3, #16
 80069ce:	2b10      	cmp	r3, #16
 80069d0:	d0f0      	beq.n	80069b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	68f9      	ldr	r1, [r7, #12]
 80069fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a00:	4313      	orrs	r3, r2
 8006a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b087      	sub	sp, #28
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 0306 	and.w	r3, r3, #6
 8006a2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]
 8006a36:	e00a      	b.n	8006a4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d002      	beq.n	8006a44 <USB_GetDevSpeed+0x32>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b06      	cmp	r3, #6
 8006a42:	d102      	bne.n	8006a4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a44:	2302      	movs	r3, #2
 8006a46:	75fb      	strb	r3, [r7, #23]
 8006a48:	e001      	b.n	8006a4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a4a:	230f      	movs	r3, #15
 8006a4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d13a      	bne.n	8006aee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	2101      	movs	r1, #1
 8006a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	68f9      	ldr	r1, [r7, #12]
 8006a92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a96:	4313      	orrs	r3, r2
 8006a98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d155      	bne.n	8006b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	791b      	ldrb	r3, [r3, #4]
 8006aca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006acc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	059b      	lsls	r3, r3, #22
 8006ad2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	0151      	lsls	r1, r2, #5
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	440a      	add	r2, r1
 8006ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	e036      	b.n	8006b5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af4:	69da      	ldr	r2, [r3, #28]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	2101      	movs	r1, #1
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	041b      	lsls	r3, r3, #16
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d11a      	bne.n	8006b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	791b      	ldrb	r3, [r3, #4]
 8006b40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b42:	430b      	orrs	r3, r1
 8006b44:	4313      	orrs	r3, r2
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
	...

08006b6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d161      	bne.n	8006c4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b9e:	d11f      	bne.n	8006be0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c00:	4013      	ands	r3, r2
 8006c02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	2101      	movs	r1, #1
 8006c16:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	43db      	mvns	r3, r3
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c24:	4013      	ands	r3, r2
 8006c26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	0159      	lsls	r1, r3, #5
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	440b      	add	r3, r1
 8006c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c42:	4619      	mov	r1, r3
 8006c44:	4b35      	ldr	r3, [pc, #212]	@ (8006d1c <USB_DeactivateEndpoint+0x1b0>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	600b      	str	r3, [r1, #0]
 8006c4a:	e060      	b.n	8006d0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c62:	d11f      	bne.n	8006ca4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006caa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	43db      	mvns	r3, r3
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	2101      	movs	r1, #1
 8006cda:	fa01 f303 	lsl.w	r3, r1, r3
 8006cde:	041b      	lsls	r3, r3, #16
 8006ce0:	43db      	mvns	r3, r3
 8006ce2:	68f9      	ldr	r1, [r7, #12]
 8006ce4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ce8:	4013      	ands	r3, r2
 8006cea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	0159      	lsls	r1, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	440b      	add	r3, r1
 8006d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d06:	4619      	mov	r1, r3
 8006d08:	4b05      	ldr	r3, [pc, #20]	@ (8006d20 <USB_DeactivateEndpoint+0x1b4>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	ec337800 	.word	0xec337800
 8006d20:	eff37800 	.word	0xeff37800

08006d24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08a      	sub	sp, #40	@ 0x28
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	785b      	ldrb	r3, [r3, #1]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	f040 817f 	bne.w	8007044 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d132      	bne.n	8006db4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	0151      	lsls	r1, r2, #5
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	440a      	add	r2, r1
 8006d64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d68:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d6c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	0151      	lsls	r1, r2, #5
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	440a      	add	r2, r1
 8006d88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dac:	0cdb      	lsrs	r3, r3, #19
 8006dae:	04db      	lsls	r3, r3, #19
 8006db0:	6113      	str	r3, [r2, #16]
 8006db2:	e097      	b.n	8006ee4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dce:	0cdb      	lsrs	r3, r3, #19
 8006dd0:	04db      	lsls	r3, r3, #19
 8006dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006df2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006df6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d11a      	bne.n	8006e34 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	691a      	ldr	r2, [r3, #16]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d903      	bls.n	8006e12 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	0151      	lsls	r1, r2, #5
 8006e24:	69fa      	ldr	r2, [r7, #28]
 8006e26:	440a      	add	r2, r1
 8006e28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e30:	6113      	str	r3, [r2, #16]
 8006e32:	e044      	b.n	8006ebe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	1e5a      	subs	r2, r3, #1
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	8afb      	ldrh	r3, [r7, #22]
 8006e5a:	04d9      	lsls	r1, r3, #19
 8006e5c:	4ba4      	ldr	r3, [pc, #656]	@ (80070f0 <USB_EPStartXfer+0x3cc>)
 8006e5e:	400b      	ands	r3, r1
 8006e60:	69b9      	ldr	r1, [r7, #24]
 8006e62:	0148      	lsls	r0, r1, #5
 8006e64:	69f9      	ldr	r1, [r7, #28]
 8006e66:	4401      	add	r1, r0
 8006e68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	791b      	ldrb	r3, [r3, #4]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d122      	bne.n	8006ebe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e92:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006e96:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea4:	691a      	ldr	r2, [r3, #16]
 8006ea6:	8afb      	ldrh	r3, [r7, #22]
 8006ea8:	075b      	lsls	r3, r3, #29
 8006eaa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006eae:	69b9      	ldr	r1, [r7, #24]
 8006eb0:	0148      	lsls	r0, r1, #5
 8006eb2:	69f9      	ldr	r1, [r7, #28]
 8006eb4:	4401      	add	r1, r0
 8006eb6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eca:	691a      	ldr	r2, [r3, #16]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed4:	69b9      	ldr	r1, [r7, #24]
 8006ed6:	0148      	lsls	r0, r1, #5
 8006ed8:	69f9      	ldr	r1, [r7, #28]
 8006eda:	4401      	add	r1, r0
 8006edc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d14b      	bne.n	8006f82 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efe:	461a      	mov	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	791b      	ldrb	r3, [r3, #4]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d128      	bne.n	8006f60 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d110      	bne.n	8006f40 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	e00f      	b.n	8006f60 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f5e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	e166      	b.n	8007250 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	69fa      	ldr	r2, [r7, #28]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006fa0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	791b      	ldrb	r3, [r3, #4]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d015      	beq.n	8006fd6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 814e 	beq.w	8007250 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fca:	69f9      	ldr	r1, [r7, #28]
 8006fcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	634b      	str	r3, [r1, #52]	@ 0x34
 8006fd4:	e13c      	b.n	8007250 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d110      	bne.n	8007008 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007000:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	e00f      	b.n	8007028 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	69fa      	ldr	r2, [r7, #28]
 800701c:	440a      	add	r2, r1
 800701e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007026:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	68d9      	ldr	r1, [r3, #12]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	781a      	ldrb	r2, [r3, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	b298      	uxth	r0, r3
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	4603      	mov	r3, r0
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f9b9 	bl	80073b4 <USB_WritePacket>
 8007042:	e105      	b.n	8007250 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800705e:	0cdb      	lsrs	r3, r3, #19
 8007060:	04db      	lsls	r3, r3, #19
 8007062:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800707e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007082:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007086:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d132      	bne.n	80070f4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	0148      	lsls	r0, r1, #5
 80070c0:	69f9      	ldr	r1, [r7, #28]
 80070c2:	4401      	add	r1, r0
 80070c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070c8:	4313      	orrs	r3, r2
 80070ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070ea:	6113      	str	r3, [r2, #16]
 80070ec:	e062      	b.n	80071b4 <USB_EPStartXfer+0x490>
 80070ee:	bf00      	nop
 80070f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d123      	bne.n	8007144 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007108:	691a      	ldr	r2, [r3, #16]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007112:	69b9      	ldr	r1, [r7, #24]
 8007114:	0148      	lsls	r0, r1, #5
 8007116:	69f9      	ldr	r1, [r7, #28]
 8007118:	4401      	add	r1, r0
 800711a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800711e:	4313      	orrs	r3, r2
 8007120:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	440a      	add	r2, r1
 8007138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800713c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007140:	6113      	str	r3, [r2, #16]
 8007142:	e037      	b.n	80071b4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	4413      	add	r3, r2
 800714e:	1e5a      	subs	r2, r3, #1
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	fbb2 f3f3 	udiv	r3, r2, r3
 8007158:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	8afa      	ldrh	r2, [r7, #22]
 8007160:	fb03 f202 	mul.w	r2, r3, r2
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007174:	691a      	ldr	r2, [r3, #16]
 8007176:	8afb      	ldrh	r3, [r7, #22]
 8007178:	04d9      	lsls	r1, r3, #19
 800717a:	4b38      	ldr	r3, [pc, #224]	@ (800725c <USB_EPStartXfer+0x538>)
 800717c:	400b      	ands	r3, r1
 800717e:	69b9      	ldr	r1, [r7, #24]
 8007180:	0148      	lsls	r0, r1, #5
 8007182:	69f9      	ldr	r1, [r7, #28]
 8007184:	4401      	add	r1, r0
 8007186:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800718a:	4313      	orrs	r3, r2
 800718c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a4:	69b9      	ldr	r1, [r7, #24]
 80071a6:	0148      	lsls	r0, r1, #5
 80071a8:	69f9      	ldr	r1, [r7, #28]
 80071aa:	4401      	add	r1, r0
 80071ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071b0:	4313      	orrs	r3, r2
 80071b2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d10d      	bne.n	80071d6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	68d9      	ldr	r1, [r3, #12]
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d2:	460a      	mov	r2, r1
 80071d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	791b      	ldrb	r3, [r3, #4]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d128      	bne.n	8007230 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d110      	bne.n	8007210 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007208:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	e00f      	b.n	8007230 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	0151      	lsls	r1, r2, #5
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	440a      	add	r2, r1
 8007226:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800722a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800722e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	440a      	add	r2, r1
 8007246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800724a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800724e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	1ff80000 	.word	0x1ff80000

08007260 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d14a      	bne.n	8007314 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007296:	f040 8086 	bne.w	80073a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	7812      	ldrb	r2, [r2, #0]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	7812      	ldrb	r2, [r2, #0]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d902      	bls.n	80072f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	75fb      	strb	r3, [r7, #23]
          break;
 80072f6:	e056      	b.n	80073a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800730c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007310:	d0e7      	beq.n	80072e2 <USB_EPStopXfer+0x82>
 8007312:	e048      	b.n	80073a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007328:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800732c:	d13b      	bne.n	80073a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	7812      	ldrb	r2, [r2, #0]
 8007342:	0151      	lsls	r1, r2, #5
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	440a      	add	r2, r1
 8007348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800734c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007350:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	7812      	ldrb	r2, [r2, #0]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	440a      	add	r2, r1
 800736c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007370:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007374:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007382:	4293      	cmp	r3, r2
 8007384:	d902      	bls.n	800738c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	75fb      	strb	r3, [r7, #23]
          break;
 800738a:	e00c      	b.n	80073a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073a4:	d0e7      	beq.n	8007376 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b089      	sub	sp, #36	@ 0x24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4611      	mov	r1, r2
 80073c0:	461a      	mov	r2, r3
 80073c2:	460b      	mov	r3, r1
 80073c4:	71fb      	strb	r3, [r7, #7]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d123      	bne.n	8007422 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073da:	88bb      	ldrh	r3, [r7, #4]
 80073dc:	3303      	adds	r3, #3
 80073de:	089b      	lsrs	r3, r3, #2
 80073e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073e2:	2300      	movs	r3, #0
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	e018      	b.n	800741a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	031a      	lsls	r2, r3, #12
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073f4:	461a      	mov	r2, r3
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	3301      	adds	r3, #1
 8007400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	3301      	adds	r3, #1
 8007406:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	3301      	adds	r3, #1
 800740c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	3301      	adds	r3, #1
 8007412:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	3301      	adds	r3, #1
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	429a      	cmp	r2, r3
 8007420:	d3e2      	bcc.n	80073e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3724      	adds	r7, #36	@ 0x24
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007430:	b480      	push	{r7}
 8007432:	b08b      	sub	sp, #44	@ 0x2c
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	089b      	lsrs	r3, r3, #2
 800744a:	b29b      	uxth	r3, r3
 800744c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007456:	2300      	movs	r3, #0
 8007458:	623b      	str	r3, [r7, #32]
 800745a:	e014      	b.n	8007486 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	601a      	str	r2, [r3, #0]
    pDest++;
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	3301      	adds	r3, #1
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	3301      	adds	r3, #1
 8007472:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	3301      	adds	r3, #1
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	3301      	adds	r3, #1
 800747e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	3301      	adds	r3, #1
 8007484:	623b      	str	r3, [r7, #32]
 8007486:	6a3a      	ldr	r2, [r7, #32]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	429a      	cmp	r2, r3
 800748c:	d3e6      	bcc.n	800745c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800748e:	8bfb      	ldrh	r3, [r7, #30]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d01e      	beq.n	80074d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800749e:	461a      	mov	r2, r3
 80074a0:	f107 0310 	add.w	r3, r7, #16
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b8:	701a      	strb	r2, [r3, #0]
      i++;
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	3301      	adds	r3, #1
 80074be:	623b      	str	r3, [r7, #32]
      pDest++;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c2:	3301      	adds	r3, #1
 80074c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80074c6:	8bfb      	ldrh	r3, [r7, #30]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074cc:	8bfb      	ldrh	r3, [r7, #30]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1ea      	bne.n	80074a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	372c      	adds	r7, #44	@ 0x2c
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d12c      	bne.n	8007556 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	db12      	blt.n	8007534 <USB_EPSetStall+0x54>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00f      	beq.n	8007534 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	440a      	add	r2, r1
 800752a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800752e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007532:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	440a      	add	r2, r1
 800754a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800754e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e02b      	b.n	80075ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	db12      	blt.n	800758e <USB_EPSetStall+0xae>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00f      	beq.n	800758e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	0151      	lsls	r1, r2, #5
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	440a      	add	r2, r1
 8007584:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007588:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800758c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	0151      	lsls	r1, r2, #5
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	440a      	add	r2, r1
 80075a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	785b      	ldrb	r3, [r3, #1]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d128      	bne.n	800762a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	0151      	lsls	r1, r2, #5
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	440a      	add	r2, r1
 80075ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	791b      	ldrb	r3, [r3, #4]
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d003      	beq.n	8007608 <USB_EPClearStall+0x4c>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	791b      	ldrb	r3, [r3, #4]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d138      	bne.n	800767a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	440a      	add	r2, r1
 800761e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	e027      	b.n	800767a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	0151      	lsls	r1, r2, #5
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	440a      	add	r2, r1
 8007640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007644:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007648:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	791b      	ldrb	r3, [r3, #4]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d003      	beq.n	800765a <USB_EPClearStall+0x9e>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	791b      	ldrb	r3, [r3, #4]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d10f      	bne.n	800767a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	440a      	add	r2, r1
 8007670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007678:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80076aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80076bc:	68f9      	ldr	r1, [r7, #12]
 80076be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076c2:	4313      	orrs	r3, r2
 80076c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076ee:	f023 0303 	bic.w	r3, r3, #3
 80076f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007702:	f023 0302 	bic.w	r3, r3, #2
 8007706:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007730:	f023 0303 	bic.w	r3, r3, #3
 8007734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007744:	f043 0302 	orr.w	r3, r3, #2
 8007748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4013      	ands	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007770:	68fb      	ldr	r3, [r7, #12]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800777e:	b480      	push	{r7}
 8007780:	b085      	sub	sp, #20
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	4013      	ands	r3, r2
 80077a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	0c1b      	lsrs	r3, r3, #16
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	4013      	ands	r3, r2
 80077d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	b29b      	uxth	r3, r3
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	4013      	ands	r3, r2
 8007812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007814:	68bb      	ldr	r3, [r7, #8]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007822:	b480      	push	{r7}
 8007824:	b087      	sub	sp, #28
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007844:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007846:	78fb      	ldrb	r3, [r7, #3]
 8007848:	f003 030f 	and.w	r3, r3, #15
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	fa22 f303 	lsr.w	r3, r2, r3
 8007852:	01db      	lsls	r3, r3, #7
 8007854:	b2db      	uxtb	r3, r3
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4013      	ands	r3, r2
 800786e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007870:	68bb      	ldr	r3, [r7, #8]
}
 8007872:	4618      	mov	r0, r3
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f003 0301 	and.w	r3, r3, #1
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800789a:	b480      	push	{r7}
 800789c:	b085      	sub	sp, #20
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80078b8:	f023 0307 	bic.w	r3, r3, #7
 80078bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	460b      	mov	r3, r1
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	333c      	adds	r3, #60	@ 0x3c
 80078f6:	3304      	adds	r3, #4
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	4a26      	ldr	r2, [pc, #152]	@ (8007998 <USB_EP0_OutStart+0xb8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d90a      	bls.n	800791a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007910:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007914:	d101      	bne.n	800791a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	e037      	b.n	800798a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007920:	461a      	mov	r2, r3
 8007922:	2300      	movs	r3, #0
 8007924:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007934:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007938:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007948:	f043 0318 	orr.w	r3, r3, #24
 800794c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800795c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007960:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d10f      	bne.n	8007988 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800796e:	461a      	mov	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007982:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007986:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	4f54300a 	.word	0x4f54300a

0800799c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079b4:	d901      	bls.n	80079ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e01b      	b.n	80079f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	daf2      	bge.n	80079a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f043 0201 	orr.w	r2, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079de:	d901      	bls.n	80079e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e006      	b.n	80079f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d0f0      	beq.n	80079d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
	...

08007a00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a0c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007a10:	f002 fc96 	bl	800a340 <USBD_static_malloc>
 8007a14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	32b0      	adds	r2, #176	@ 0xb0
 8007a26:	2100      	movs	r1, #0
 8007a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e0d4      	b.n	8007bda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007a30:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007a34:	2100      	movs	r1, #0
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f003 fbdb 	bl	800b1f2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	32b0      	adds	r2, #176	@ 0xb0
 8007a46:	68f9      	ldr	r1, [r7, #12]
 8007a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	32b0      	adds	r2, #176	@ 0xb0
 8007a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7c1b      	ldrb	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d138      	bne.n	8007ada <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a68:	4b5e      	ldr	r3, [pc, #376]	@ (8007be4 <USBD_CDC_Init+0x1e4>)
 8007a6a:	7819      	ldrb	r1, [r3, #0]
 8007a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a70:	2202      	movs	r2, #2
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f002 fb41 	bl	800a0fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a78:	4b5a      	ldr	r3, [pc, #360]	@ (8007be4 <USBD_CDC_Init+0x1e4>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 020f 	and.w	r2, r3, #15
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	440b      	add	r3, r1
 8007a8c:	3324      	adds	r3, #36	@ 0x24
 8007a8e:	2201      	movs	r2, #1
 8007a90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a92:	4b55      	ldr	r3, [pc, #340]	@ (8007be8 <USBD_CDC_Init+0x1e8>)
 8007a94:	7819      	ldrb	r1, [r3, #0]
 8007a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f002 fb2c 	bl	800a0fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007aa2:	4b51      	ldr	r3, [pc, #324]	@ (8007be8 <USBD_CDC_Init+0x1e8>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	f003 020f 	and.w	r2, r3, #15
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	440b      	add	r3, r1
 8007ab6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007aba:	2201      	movs	r2, #1
 8007abc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007abe:	4b4b      	ldr	r3, [pc, #300]	@ (8007bec <USBD_CDC_Init+0x1ec>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f003 020f 	and.w	r2, r3, #15
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	3326      	adds	r3, #38	@ 0x26
 8007ad4:	2210      	movs	r2, #16
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	e035      	b.n	8007b46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ada:	4b42      	ldr	r3, [pc, #264]	@ (8007be4 <USBD_CDC_Init+0x1e4>)
 8007adc:	7819      	ldrb	r1, [r3, #0]
 8007ade:	2340      	movs	r3, #64	@ 0x40
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f002 fb09 	bl	800a0fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8007be4 <USBD_CDC_Init+0x1e4>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	f003 020f 	and.w	r2, r3, #15
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	4613      	mov	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	440b      	add	r3, r1
 8007afc:	3324      	adds	r3, #36	@ 0x24
 8007afe:	2201      	movs	r2, #1
 8007b00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b02:	4b39      	ldr	r3, [pc, #228]	@ (8007be8 <USBD_CDC_Init+0x1e8>)
 8007b04:	7819      	ldrb	r1, [r3, #0]
 8007b06:	2340      	movs	r3, #64	@ 0x40
 8007b08:	2202      	movs	r2, #2
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f002 faf5 	bl	800a0fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b10:	4b35      	ldr	r3, [pc, #212]	@ (8007be8 <USBD_CDC_Init+0x1e8>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f003 020f 	and.w	r2, r3, #15
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	440b      	add	r3, r1
 8007b24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b28:	2201      	movs	r2, #1
 8007b2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8007bec <USBD_CDC_Init+0x1ec>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	f003 020f 	and.w	r2, r3, #15
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	4613      	mov	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4413      	add	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	440b      	add	r3, r1
 8007b40:	3326      	adds	r3, #38	@ 0x26
 8007b42:	2210      	movs	r2, #16
 8007b44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b46:	4b29      	ldr	r3, [pc, #164]	@ (8007bec <USBD_CDC_Init+0x1ec>)
 8007b48:	7819      	ldrb	r1, [r3, #0]
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	2203      	movs	r2, #3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f002 fad3 	bl	800a0fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b54:	4b25      	ldr	r3, [pc, #148]	@ (8007bec <USBD_CDC_Init+0x1ec>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	f003 020f 	and.w	r2, r3, #15
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	440b      	add	r3, r1
 8007b68:	3324      	adds	r3, #36	@ 0x24
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	33b0      	adds	r3, #176	@ 0xb0
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e018      	b.n	8007bda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	7c1b      	ldrb	r3, [r3, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8007be8 <USBD_CDC_Init+0x1e8>)
 8007bb2:	7819      	ldrb	r1, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f002 fb8a 	bl	800a2d8 <USBD_LL_PrepareReceive>
 8007bc4:	e008      	b.n	8007bd8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bc6:	4b08      	ldr	r3, [pc, #32]	@ (8007be8 <USBD_CDC_Init+0x1e8>)
 8007bc8:	7819      	ldrb	r1, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bd0:	2340      	movs	r3, #64	@ 0x40
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f002 fb80 	bl	800a2d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20000093 	.word	0x20000093
 8007be8:	20000094 	.word	0x20000094
 8007bec:	20000095 	.word	0x20000095

08007bf0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8007ce8 <USBD_CDC_DeInit+0xf8>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f002 fa9f 	bl	800a146 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c08:	4b37      	ldr	r3, [pc, #220]	@ (8007ce8 <USBD_CDC_DeInit+0xf8>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3324      	adds	r3, #36	@ 0x24
 8007c1e:	2200      	movs	r2, #0
 8007c20:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c22:	4b32      	ldr	r3, [pc, #200]	@ (8007cec <USBD_CDC_DeInit+0xfc>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f002 fa8c 	bl	800a146 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8007cec <USBD_CDC_DeInit+0xfc>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f003 020f 	and.w	r2, r3, #15
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c46:	2200      	movs	r2, #0
 8007c48:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c4a:	4b29      	ldr	r3, [pc, #164]	@ (8007cf0 <USBD_CDC_DeInit+0x100>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f002 fa78 	bl	800a146 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c56:	4b26      	ldr	r3, [pc, #152]	@ (8007cf0 <USBD_CDC_DeInit+0x100>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f003 020f 	and.w	r2, r3, #15
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	440b      	add	r3, r1
 8007c6a:	3324      	adds	r3, #36	@ 0x24
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c70:	4b1f      	ldr	r3, [pc, #124]	@ (8007cf0 <USBD_CDC_DeInit+0x100>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	f003 020f 	and.w	r2, r3, #15
 8007c78:	6879      	ldr	r1, [r7, #4]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	440b      	add	r3, r1
 8007c84:	3326      	adds	r3, #38	@ 0x26
 8007c86:	2200      	movs	r2, #0
 8007c88:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	32b0      	adds	r2, #176	@ 0xb0
 8007c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d01f      	beq.n	8007cdc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	33b0      	adds	r3, #176	@ 0xb0
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	32b0      	adds	r2, #176	@ 0xb0
 8007cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f002 fb4c 	bl	800a35c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	32b0      	adds	r2, #176	@ 0xb0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000093 	.word	0x20000093
 8007cec:	20000094 	.word	0x20000094
 8007cf0:	20000095 	.word	0x20000095

08007cf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	32b0      	adds	r2, #176	@ 0xb0
 8007d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e0bf      	b.n	8007ea4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d050      	beq.n	8007dd2 <USBD_CDC_Setup+0xde>
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	f040 80af 	bne.w	8007e94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	88db      	ldrh	r3, [r3, #6]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d03a      	beq.n	8007db4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b25b      	sxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	da1b      	bge.n	8007d80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	33b0      	adds	r3, #176	@ 0xb0
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	88d2      	ldrh	r2, [r2, #6]
 8007d64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	88db      	ldrh	r3, [r3, #6]
 8007d6a:	2b07      	cmp	r3, #7
 8007d6c:	bf28      	it	cs
 8007d6e:	2307      	movcs	r3, #7
 8007d70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	89fa      	ldrh	r2, [r7, #14]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fd93 	bl	80098a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007d7e:	e090      	b.n	8007ea2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785a      	ldrb	r2, [r3, #1]
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88db      	ldrh	r3, [r3, #6]
 8007d8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007d90:	d803      	bhi.n	8007d9a <USBD_CDC_Setup+0xa6>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	88db      	ldrh	r3, [r3, #6]
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	e000      	b.n	8007d9c <USBD_CDC_Setup+0xa8>
 8007d9a:	2240      	movs	r2, #64	@ 0x40
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007da2:	6939      	ldr	r1, [r7, #16]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007daa:	461a      	mov	r2, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 fda5 	bl	80098fc <USBD_CtlPrepareRx>
      break;
 8007db2:	e076      	b.n	8007ea2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	33b0      	adds	r3, #176	@ 0xb0
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	7850      	ldrb	r0, [r2, #1]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	4798      	blx	r3
      break;
 8007dd0:	e067      	b.n	8007ea2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	785b      	ldrb	r3, [r3, #1]
 8007dd6:	2b0b      	cmp	r3, #11
 8007dd8:	d851      	bhi.n	8007e7e <USBD_CDC_Setup+0x18a>
 8007dda:	a201      	add	r2, pc, #4	@ (adr r2, 8007de0 <USBD_CDC_Setup+0xec>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007e11 	.word	0x08007e11
 8007de4:	08007e8d 	.word	0x08007e8d
 8007de8:	08007e7f 	.word	0x08007e7f
 8007dec:	08007e7f 	.word	0x08007e7f
 8007df0:	08007e7f 	.word	0x08007e7f
 8007df4:	08007e7f 	.word	0x08007e7f
 8007df8:	08007e7f 	.word	0x08007e7f
 8007dfc:	08007e7f 	.word	0x08007e7f
 8007e00:	08007e7f 	.word	0x08007e7f
 8007e04:	08007e7f 	.word	0x08007e7f
 8007e08:	08007e3b 	.word	0x08007e3b
 8007e0c:	08007e65 	.word	0x08007e65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d107      	bne.n	8007e2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e1c:	f107 030a 	add.w	r3, r7, #10
 8007e20:	2202      	movs	r2, #2
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fd3d 	bl	80098a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e2a:	e032      	b.n	8007e92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 fcbb 	bl	80097aa <USBD_CtlError>
            ret = USBD_FAIL;
 8007e34:	2303      	movs	r3, #3
 8007e36:	75fb      	strb	r3, [r7, #23]
          break;
 8007e38:	e02b      	b.n	8007e92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d107      	bne.n	8007e56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e46:	f107 030d 	add.w	r3, r7, #13
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fd28 	bl	80098a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e54:	e01d      	b.n	8007e92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 fca6 	bl	80097aa <USBD_CtlError>
            ret = USBD_FAIL;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	75fb      	strb	r3, [r7, #23]
          break;
 8007e62:	e016      	b.n	8007e92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d00f      	beq.n	8007e90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f001 fc99 	bl	80097aa <USBD_CtlError>
            ret = USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e7c:	e008      	b.n	8007e90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fc92 	bl	80097aa <USBD_CtlError>
          ret = USBD_FAIL;
 8007e86:	2303      	movs	r3, #3
 8007e88:	75fb      	strb	r3, [r7, #23]
          break;
 8007e8a:	e002      	b.n	8007e92 <USBD_CDC_Setup+0x19e>
          break;
 8007e8c:	bf00      	nop
 8007e8e:	e008      	b.n	8007ea2 <USBD_CDC_Setup+0x1ae>
          break;
 8007e90:	bf00      	nop
      }
      break;
 8007e92:	e006      	b.n	8007ea2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 fc87 	bl	80097aa <USBD_CtlError>
      ret = USBD_FAIL;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ebe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	32b0      	adds	r2, #176	@ 0xb0
 8007eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e065      	b.n	8007fa2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	32b0      	adds	r2, #176	@ 0xb0
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	f003 020f 	and.w	r2, r3, #15
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	3318      	adds	r3, #24
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d02f      	beq.n	8007f60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	f003 020f 	and.w	r2, r3, #15
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	440b      	add	r3, r1
 8007f12:	3318      	adds	r3, #24
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	f003 010f 	and.w	r1, r3, #15
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	440b      	add	r3, r1
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4403      	add	r3, r0
 8007f28:	331c      	adds	r3, #28
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d112      	bne.n	8007f60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	3318      	adds	r3, #24
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f52:	78f9      	ldrb	r1, [r7, #3]
 8007f54:	2300      	movs	r3, #0
 8007f56:	2200      	movs	r2, #0
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f002 f99c 	bl	800a296 <USBD_LL_Transmit>
 8007f5e:	e01f      	b.n	8007fa0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	33b0      	adds	r3, #176	@ 0xb0
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d010      	beq.n	8007fa0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	33b0      	adds	r3, #176	@ 0xb0
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007f9c:	78fa      	ldrb	r2, [r7, #3]
 8007f9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	32b0      	adds	r2, #176	@ 0xb0
 8007fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	32b0      	adds	r2, #176	@ 0xb0
 8007fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e01a      	b.n	8008012 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f002 f99a 	bl	800a31a <USBD_LL_GetRxDataSize>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	33b0      	adds	r3, #176	@ 0xb0
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800800c:	4611      	mov	r1, r2
 800800e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	32b0      	adds	r2, #176	@ 0xb0
 800802c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008030:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008038:	2303      	movs	r3, #3
 800803a:	e024      	b.n	8008086 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	33b0      	adds	r3, #176	@ 0xb0
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d019      	beq.n	8008084 <USBD_CDC_EP0_RxReady+0x6a>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008056:	2bff      	cmp	r3, #255	@ 0xff
 8008058:	d014      	beq.n	8008084 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	33b0      	adds	r3, #176	@ 0xb0
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008072:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800807a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	22ff      	movs	r2, #255	@ 0xff
 8008080:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008098:	2182      	movs	r1, #130	@ 0x82
 800809a:	4818      	ldr	r0, [pc, #96]	@ (80080fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800809c:	f000 fd4f 	bl	8008b3e <USBD_GetEpDesc>
 80080a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080a2:	2101      	movs	r1, #1
 80080a4:	4815      	ldr	r0, [pc, #84]	@ (80080fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080a6:	f000 fd4a 	bl	8008b3e <USBD_GetEpDesc>
 80080aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080ac:	2181      	movs	r1, #129	@ 0x81
 80080ae:	4813      	ldr	r0, [pc, #76]	@ (80080fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080b0:	f000 fd45 	bl	8008b3e <USBD_GetEpDesc>
 80080b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2210      	movs	r2, #16
 80080c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d006      	beq.n	80080d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080d0:	711a      	strb	r2, [r3, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d006      	beq.n	80080ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080e4:	711a      	strb	r2, [r3, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2243      	movs	r2, #67	@ 0x43
 80080ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080f0:	4b02      	ldr	r3, [pc, #8]	@ (80080fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000050 	.word	0x20000050

08008100 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008108:	2182      	movs	r1, #130	@ 0x82
 800810a:	4818      	ldr	r0, [pc, #96]	@ (800816c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800810c:	f000 fd17 	bl	8008b3e <USBD_GetEpDesc>
 8008110:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008112:	2101      	movs	r1, #1
 8008114:	4815      	ldr	r0, [pc, #84]	@ (800816c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008116:	f000 fd12 	bl	8008b3e <USBD_GetEpDesc>
 800811a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800811c:	2181      	movs	r1, #129	@ 0x81
 800811e:	4813      	ldr	r0, [pc, #76]	@ (800816c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008120:	f000 fd0d 	bl	8008b3e <USBD_GetEpDesc>
 8008124:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2210      	movs	r2, #16
 8008130:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d006      	beq.n	8008146 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	2200      	movs	r2, #0
 800813c:	711a      	strb	r2, [r3, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f042 0202 	orr.w	r2, r2, #2
 8008144:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d006      	beq.n	800815a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	711a      	strb	r2, [r3, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f042 0202 	orr.w	r2, r2, #2
 8008158:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2243      	movs	r2, #67	@ 0x43
 800815e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008160:	4b02      	ldr	r3, [pc, #8]	@ (800816c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000050 	.word	0x20000050

08008170 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008178:	2182      	movs	r1, #130	@ 0x82
 800817a:	4818      	ldr	r0, [pc, #96]	@ (80081dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800817c:	f000 fcdf 	bl	8008b3e <USBD_GetEpDesc>
 8008180:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008182:	2101      	movs	r1, #1
 8008184:	4815      	ldr	r0, [pc, #84]	@ (80081dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008186:	f000 fcda 	bl	8008b3e <USBD_GetEpDesc>
 800818a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800818c:	2181      	movs	r1, #129	@ 0x81
 800818e:	4813      	ldr	r0, [pc, #76]	@ (80081dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008190:	f000 fcd5 	bl	8008b3e <USBD_GetEpDesc>
 8008194:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2210      	movs	r2, #16
 80081a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d006      	beq.n	80081b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081b0:	711a      	strb	r2, [r3, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d006      	beq.n	80081ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081c4:	711a      	strb	r2, [r3, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2243      	movs	r2, #67	@ 0x43
 80081ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081d0:	4b02      	ldr	r3, [pc, #8]	@ (80081dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	20000050 	.word	0x20000050

080081e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	220a      	movs	r2, #10
 80081ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80081ee:	4b03      	ldr	r3, [pc, #12]	@ (80081fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	2000000c 	.word	0x2000000c

08008200 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	e009      	b.n	8008228 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	33b0      	adds	r3, #176	@ 0xb0
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	32b0      	adds	r2, #176	@ 0xb0
 800824a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008256:	2303      	movs	r3, #3
 8008258:	e008      	b.n	800826c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	32b0      	adds	r2, #176	@ 0xb0
 800828c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008290:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008298:	2303      	movs	r3, #3
 800829a:	e004      	b.n	80082a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
	...

080082b4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	32b0      	adds	r2, #176	@ 0xb0
 80082c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80082cc:	2301      	movs	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e025      	b.n	8008326 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d11f      	bne.n	8008324 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80082ec:	4b10      	ldr	r3, [pc, #64]	@ (8008330 <USBD_CDC_TransmitPacket+0x7c>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	f003 020f 	and.w	r2, r3, #15
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4403      	add	r3, r0
 8008306:	3318      	adds	r3, #24
 8008308:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800830a:	4b09      	ldr	r3, [pc, #36]	@ (8008330 <USBD_CDC_TransmitPacket+0x7c>)
 800830c:	7819      	ldrb	r1, [r3, #0]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 ffbb 	bl	800a296 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000093 	.word	0x20000093

08008334 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	32b0      	adds	r2, #176	@ 0xb0
 8008346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	32b0      	adds	r2, #176	@ 0xb0
 8008356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800835e:	2303      	movs	r3, #3
 8008360:	e018      	b.n	8008394 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	7c1b      	ldrb	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800836a:	4b0c      	ldr	r3, [pc, #48]	@ (800839c <USBD_CDC_ReceivePacket+0x68>)
 800836c:	7819      	ldrb	r1, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 ffad 	bl	800a2d8 <USBD_LL_PrepareReceive>
 800837e:	e008      	b.n	8008392 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008380:	4b06      	ldr	r3, [pc, #24]	@ (800839c <USBD_CDC_ReceivePacket+0x68>)
 8008382:	7819      	ldrb	r1, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800838a:	2340      	movs	r3, #64	@ 0x40
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 ffa3 	bl	800a2d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20000094 	.word	0x20000094

080083a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e01f      	b.n	80083f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	79fa      	ldrb	r2, [r7, #7]
 80083ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f001 fe1d 	bl	800a02c <USBD_LL_Init>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008414:	2303      	movs	r3, #3
 8008416:	e025      	b.n	8008464 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	32ae      	adds	r2, #174	@ 0xae
 800842a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00f      	beq.n	8008454 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	32ae      	adds	r2, #174	@ 0xae
 800843e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008444:	f107 020e 	add.w	r2, r7, #14
 8008448:	4610      	mov	r0, r2
 800844a:	4798      	blx	r3
 800844c:	4602      	mov	r2, r0
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 fe25 	bl	800a0c4 <USBD_LL_Start>
 800847a:	4603      	mov	r3, r0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800848c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800848e:	4618      	mov	r0, r3
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d009      	beq.n	80084c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	78fa      	ldrb	r2, [r7, #3]
 80084be:	4611      	mov	r1, r2
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	4798      	blx	r3
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b084      	sub	sp, #16
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	78fa      	ldrb	r2, [r7, #3]
 80084ec:	4611      	mov	r1, r2
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	4798      	blx	r3
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80084f8:	2303      	movs	r3, #3
 80084fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	4618      	mov	r0, r3
 800851a:	f001 f90c 	bl	8009736 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800852c:	461a      	mov	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800853a:	f003 031f 	and.w	r3, r3, #31
 800853e:	2b02      	cmp	r3, #2
 8008540:	d01a      	beq.n	8008578 <USBD_LL_SetupStage+0x72>
 8008542:	2b02      	cmp	r3, #2
 8008544:	d822      	bhi.n	800858c <USBD_LL_SetupStage+0x86>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <USBD_LL_SetupStage+0x4a>
 800854a:	2b01      	cmp	r3, #1
 800854c:	d00a      	beq.n	8008564 <USBD_LL_SetupStage+0x5e>
 800854e:	e01d      	b.n	800858c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fb63 	bl	8008c24 <USBD_StdDevReq>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]
      break;
 8008562:	e020      	b.n	80085a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fbcb 	bl	8008d08 <USBD_StdItfReq>
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]
      break;
 8008576:	e016      	b.n	80085a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fc2d 	bl	8008de0 <USBD_StdEPReq>
 8008586:	4603      	mov	r3, r0
 8008588:	73fb      	strb	r3, [r7, #15]
      break;
 800858a:	e00c      	b.n	80085a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008592:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008596:	b2db      	uxtb	r3, r3
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 fdf2 	bl	800a184 <USBD_LL_StallEP>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]
      break;
 80085a4:	bf00      	nop
  }

  return ret;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	460b      	mov	r3, r1
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80085c2:	7afb      	ldrb	r3, [r7, #11]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d16e      	bne.n	80086a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80085ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	f040 8098 	bne.w	800870c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d913      	bls.n	8008610 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	1ad2      	subs	r2, r2, r3
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	4293      	cmp	r3, r2
 8008600:	bf28      	it	cs
 8008602:	4613      	movcs	r3, r2
 8008604:	461a      	mov	r2, r3
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f001 f994 	bl	8009936 <USBD_CtlContinueRx>
 800860e:	e07d      	b.n	800870c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008616:	f003 031f 	and.w	r3, r3, #31
 800861a:	2b02      	cmp	r3, #2
 800861c:	d014      	beq.n	8008648 <USBD_LL_DataOutStage+0x98>
 800861e:	2b02      	cmp	r3, #2
 8008620:	d81d      	bhi.n	800865e <USBD_LL_DataOutStage+0xae>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <USBD_LL_DataOutStage+0x7c>
 8008626:	2b01      	cmp	r3, #1
 8008628:	d003      	beq.n	8008632 <USBD_LL_DataOutStage+0x82>
 800862a:	e018      	b.n	800865e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	75bb      	strb	r3, [r7, #22]
            break;
 8008630:	e018      	b.n	8008664 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008638:	b2db      	uxtb	r3, r3
 800863a:	4619      	mov	r1, r3
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 fa64 	bl	8008b0a <USBD_CoreFindIF>
 8008642:	4603      	mov	r3, r0
 8008644:	75bb      	strb	r3, [r7, #22]
            break;
 8008646:	e00d      	b.n	8008664 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800864e:	b2db      	uxtb	r3, r3
 8008650:	4619      	mov	r1, r3
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fa66 	bl	8008b24 <USBD_CoreFindEP>
 8008658:	4603      	mov	r3, r0
 800865a:	75bb      	strb	r3, [r7, #22]
            break;
 800865c:	e002      	b.n	8008664 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	75bb      	strb	r3, [r7, #22]
            break;
 8008662:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008664:	7dbb      	ldrb	r3, [r7, #22]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d119      	bne.n	800869e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b03      	cmp	r3, #3
 8008674:	d113      	bne.n	800869e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008676:	7dba      	ldrb	r2, [r7, #22]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	32ae      	adds	r2, #174	@ 0xae
 800867c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00b      	beq.n	800869e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008686:	7dba      	ldrb	r2, [r7, #22]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800868e:	7dba      	ldrb	r2, [r7, #22]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	32ae      	adds	r2, #174	@ 0xae
 8008694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f001 f95a 	bl	8009958 <USBD_CtlSendStatus>
 80086a4:	e032      	b.n	800870c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80086a6:	7afb      	ldrb	r3, [r7, #11]
 80086a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	4619      	mov	r1, r3
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 fa37 	bl	8008b24 <USBD_CoreFindEP>
 80086b6:	4603      	mov	r3, r0
 80086b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086ba:	7dbb      	ldrb	r3, [r7, #22]
 80086bc:	2bff      	cmp	r3, #255	@ 0xff
 80086be:	d025      	beq.n	800870c <USBD_LL_DataOutStage+0x15c>
 80086c0:	7dbb      	ldrb	r3, [r7, #22]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d122      	bne.n	800870c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d117      	bne.n	8008702 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80086d2:	7dba      	ldrb	r2, [r7, #22]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	32ae      	adds	r2, #174	@ 0xae
 80086d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00f      	beq.n	8008702 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80086e2:	7dba      	ldrb	r2, [r7, #22]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80086ea:	7dba      	ldrb	r2, [r7, #22]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	32ae      	adds	r2, #174	@ 0xae
 80086f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	7afa      	ldrb	r2, [r7, #11]
 80086f8:	4611      	mov	r1, r2
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	4798      	blx	r3
 80086fe:	4603      	mov	r3, r0
 8008700:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	e000      	b.n	800870e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b086      	sub	sp, #24
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	460b      	mov	r3, r1
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008724:	7afb      	ldrb	r3, [r7, #11]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d16f      	bne.n	800880a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3314      	adds	r3, #20
 800872e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008736:	2b02      	cmp	r3, #2
 8008738:	d15a      	bne.n	80087f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	429a      	cmp	r2, r3
 8008744:	d914      	bls.n	8008770 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	1ad2      	subs	r2, r2, r3
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	461a      	mov	r2, r3
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f001 f8bc 	bl	80098da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008762:	2300      	movs	r3, #0
 8008764:	2200      	movs	r2, #0
 8008766:	2100      	movs	r1, #0
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f001 fdb5 	bl	800a2d8 <USBD_LL_PrepareReceive>
 800876e:	e03f      	b.n	80087f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	429a      	cmp	r2, r3
 800877a:	d11c      	bne.n	80087b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008784:	429a      	cmp	r2, r3
 8008786:	d316      	bcc.n	80087b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008792:	429a      	cmp	r2, r3
 8008794:	d20f      	bcs.n	80087b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008796:	2200      	movs	r2, #0
 8008798:	2100      	movs	r1, #0
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f001 f89d 	bl	80098da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087a8:	2300      	movs	r3, #0
 80087aa:	2200      	movs	r2, #0
 80087ac:	2100      	movs	r1, #0
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f001 fd92 	bl	800a2d8 <USBD_LL_PrepareReceive>
 80087b4:	e01c      	b.n	80087f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d10f      	bne.n	80087e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d009      	beq.n	80087e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087e2:	2180      	movs	r1, #128	@ 0x80
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f001 fccd 	bl	800a184 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f001 f8c7 	bl	800997e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d03a      	beq.n	8008870 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff fe42 	bl	8008484 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008808:	e032      	b.n	8008870 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800880a:	7afb      	ldrb	r3, [r7, #11]
 800880c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008810:	b2db      	uxtb	r3, r3
 8008812:	4619      	mov	r1, r3
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 f985 	bl	8008b24 <USBD_CoreFindEP>
 800881a:	4603      	mov	r3, r0
 800881c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	2bff      	cmp	r3, #255	@ 0xff
 8008822:	d025      	beq.n	8008870 <USBD_LL_DataInStage+0x15a>
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d122      	bne.n	8008870 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b03      	cmp	r3, #3
 8008834:	d11c      	bne.n	8008870 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008836:	7dfa      	ldrb	r2, [r7, #23]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	32ae      	adds	r2, #174	@ 0xae
 800883c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d014      	beq.n	8008870 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008846:	7dfa      	ldrb	r2, [r7, #23]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800884e:	7dfa      	ldrb	r2, [r7, #23]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	32ae      	adds	r2, #174	@ 0xae
 8008854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	7afa      	ldrb	r2, [r7, #11]
 800885c:	4611      	mov	r1, r2
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	4798      	blx	r3
 8008862:	4603      	mov	r3, r0
 8008864:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008866:	7dbb      	ldrb	r3, [r7, #22]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800886c:	7dbb      	ldrb	r3, [r7, #22]
 800886e:	e000      	b.n	8008872 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d014      	beq.n	80088e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00e      	beq.n	80088e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6852      	ldr	r2, [r2, #4]
 80088ce:	b2d2      	uxtb	r2, r2
 80088d0:	4611      	mov	r1, r2
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	4798      	blx	r3
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80088dc:	2303      	movs	r3, #3
 80088de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088e0:	2340      	movs	r3, #64	@ 0x40
 80088e2:	2200      	movs	r2, #0
 80088e4:	2100      	movs	r1, #0
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 fc07 	bl	800a0fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2240      	movs	r2, #64	@ 0x40
 80088f8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088fc:	2340      	movs	r3, #64	@ 0x40
 80088fe:	2200      	movs	r2, #0
 8008900:	2180      	movs	r1, #128	@ 0x80
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 fbf9 	bl	800a0fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2240      	movs	r2, #64	@ 0x40
 8008912:	621a      	str	r2, [r3, #32]

  return ret;
 8008914:	7bfb      	ldrb	r3, [r7, #15]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b04      	cmp	r3, #4
 8008950:	d006      	beq.n	8008960 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008958:	b2da      	uxtb	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2204      	movs	r2, #4
 8008964:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b04      	cmp	r3, #4
 8008988:	d106      	bne.n	8008998 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008990:	b2da      	uxtb	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d110      	bne.n	80089dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	460b      	mov	r3, r1
 80089f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	32ae      	adds	r2, #174	@ 0xae
 80089fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e01c      	b.n	8008a42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d115      	bne.n	8008a40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	32ae      	adds	r2, #174	@ 0xae
 8008a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	32ae      	adds	r2, #174	@ 0xae
 8008a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	32ae      	adds	r2, #174	@ 0xae
 8008a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e01c      	b.n	8008aa6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d115      	bne.n	8008aa4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	32ae      	adds	r2, #174	@ 0xae
 8008a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	32ae      	adds	r2, #174	@ 0xae
 8008a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9c:	78fa      	ldrb	r2, [r7, #3]
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00e      	beq.n	8008b00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6852      	ldr	r2, [r2, #4]
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	4611      	mov	r1, r2
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008afc:	2303      	movs	r3, #3
 8008afe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	7812      	ldrb	r2, [r2, #0]
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d91f      	bls.n	8008ba4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008b6a:	e013      	b.n	8008b94 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008b6c:	f107 030a 	add.w	r3, r7, #10
 8008b70:	4619      	mov	r1, r3
 8008b72:	6978      	ldr	r0, [r7, #20]
 8008b74:	f000 f81b 	bl	8008bae <USBD_GetNextDesc>
 8008b78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	785b      	ldrb	r3, [r3, #1]
 8008b7e:	2b05      	cmp	r3, #5
 8008b80:	d108      	bne.n	8008b94 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	789b      	ldrb	r3, [r3, #2]
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d008      	beq.n	8008ba2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	885b      	ldrh	r3, [r3, #2]
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	897b      	ldrh	r3, [r7, #10]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d8e5      	bhi.n	8008b6c <USBD_GetEpDesc+0x2e>
 8008ba0:	e000      	b.n	8008ba4 <USBD_GetEpDesc+0x66>
          break;
 8008ba2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008ba4:	693b      	ldr	r3, [r7, #16]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b087      	sub	sp, #28
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c04:	8a3b      	ldrh	r3, [r7, #16]
 8008c06:	021b      	lsls	r3, r3, #8
 8008c08:	b21a      	sxth	r2, r3
 8008c0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	b21b      	sxth	r3, r3
 8008c12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c14:	89fb      	ldrh	r3, [r7, #14]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
	...

08008c24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c3a:	2b40      	cmp	r3, #64	@ 0x40
 8008c3c:	d005      	beq.n	8008c4a <USBD_StdDevReq+0x26>
 8008c3e:	2b40      	cmp	r3, #64	@ 0x40
 8008c40:	d857      	bhi.n	8008cf2 <USBD_StdDevReq+0xce>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00f      	beq.n	8008c66 <USBD_StdDevReq+0x42>
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d153      	bne.n	8008cf2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	32ae      	adds	r2, #174	@ 0xae
 8008c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	4798      	blx	r3
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]
      break;
 8008c64:	e04a      	b.n	8008cfc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	785b      	ldrb	r3, [r3, #1]
 8008c6a:	2b09      	cmp	r3, #9
 8008c6c:	d83b      	bhi.n	8008ce6 <USBD_StdDevReq+0xc2>
 8008c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c74 <USBD_StdDevReq+0x50>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008cc9 	.word	0x08008cc9
 8008c78:	08008cdd 	.word	0x08008cdd
 8008c7c:	08008ce7 	.word	0x08008ce7
 8008c80:	08008cd3 	.word	0x08008cd3
 8008c84:	08008ce7 	.word	0x08008ce7
 8008c88:	08008ca7 	.word	0x08008ca7
 8008c8c:	08008c9d 	.word	0x08008c9d
 8008c90:	08008ce7 	.word	0x08008ce7
 8008c94:	08008cbf 	.word	0x08008cbf
 8008c98:	08008cb1 	.word	0x08008cb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa3c 	bl	800911c <USBD_GetDescriptor>
          break;
 8008ca4:	e024      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fba1 	bl	80093f0 <USBD_SetAddress>
          break;
 8008cae:	e01f      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fbe0 	bl	8009478 <USBD_SetConfig>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]
          break;
 8008cbc:	e018      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc83 	bl	80095cc <USBD_GetConfig>
          break;
 8008cc6:	e013      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fcb4 	bl	8009638 <USBD_GetStatus>
          break;
 8008cd0:	e00e      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fce3 	bl	80096a0 <USBD_SetFeature>
          break;
 8008cda:	e009      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fd07 	bl	80096f2 <USBD_ClrFeature>
          break;
 8008ce4:	e004      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fd5e 	bl	80097aa <USBD_CtlError>
          break;
 8008cee:	bf00      	nop
      }
      break;
 8008cf0:	e004      	b.n	8008cfc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fd58 	bl	80097aa <USBD_CtlError>
      break;
 8008cfa:	bf00      	nop
  }

  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop

08008d08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d1e:	2b40      	cmp	r3, #64	@ 0x40
 8008d20:	d005      	beq.n	8008d2e <USBD_StdItfReq+0x26>
 8008d22:	2b40      	cmp	r3, #64	@ 0x40
 8008d24:	d852      	bhi.n	8008dcc <USBD_StdItfReq+0xc4>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <USBD_StdItfReq+0x26>
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	d14e      	bne.n	8008dcc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d840      	bhi.n	8008dbe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	889b      	ldrh	r3, [r3, #4]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d836      	bhi.n	8008db4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	889b      	ldrh	r3, [r3, #4]
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff fedb 	bl	8008b0a <USBD_CoreFindIF>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2bff      	cmp	r3, #255	@ 0xff
 8008d5c:	d01d      	beq.n	8008d9a <USBD_StdItfReq+0x92>
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d11a      	bne.n	8008d9a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008d64:	7bba      	ldrb	r2, [r7, #14]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	32ae      	adds	r2, #174	@ 0xae
 8008d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00f      	beq.n	8008d94 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008d74:	7bba      	ldrb	r2, [r7, #14]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d7c:	7bba      	ldrb	r2, [r7, #14]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	32ae      	adds	r2, #174	@ 0xae
 8008d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
 8008d8e:	4603      	mov	r3, r0
 8008d90:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d92:	e004      	b.n	8008d9e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d98:	e001      	b.n	8008d9e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	88db      	ldrh	r3, [r3, #6]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d110      	bne.n	8008dc8 <USBD_StdItfReq+0xc0>
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10d      	bne.n	8008dc8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fdd3 	bl	8009958 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008db2:	e009      	b.n	8008dc8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fcf7 	bl	80097aa <USBD_CtlError>
          break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fcf2 	bl	80097aa <USBD_CtlError>
          break;
 8008dc6:	e000      	b.n	8008dca <USBD_StdItfReq+0xc2>
          break;
 8008dc8:	bf00      	nop
      }
      break;
 8008dca:	e004      	b.n	8008dd6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fceb 	bl	80097aa <USBD_CtlError>
      break;
 8008dd4:	bf00      	nop
  }

  return ret;
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	889b      	ldrh	r3, [r3, #4]
 8008df2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dfc:	2b40      	cmp	r3, #64	@ 0x40
 8008dfe:	d007      	beq.n	8008e10 <USBD_StdEPReq+0x30>
 8008e00:	2b40      	cmp	r3, #64	@ 0x40
 8008e02:	f200 817f 	bhi.w	8009104 <USBD_StdEPReq+0x324>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d02a      	beq.n	8008e60 <USBD_StdEPReq+0x80>
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	f040 817a 	bne.w	8009104 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fe85 	bl	8008b24 <USBD_CoreFindEP>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e1e:	7b7b      	ldrb	r3, [r7, #13]
 8008e20:	2bff      	cmp	r3, #255	@ 0xff
 8008e22:	f000 8174 	beq.w	800910e <USBD_StdEPReq+0x32e>
 8008e26:	7b7b      	ldrb	r3, [r7, #13]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f040 8170 	bne.w	800910e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008e2e:	7b7a      	ldrb	r2, [r7, #13]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008e36:	7b7a      	ldrb	r2, [r7, #13]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	32ae      	adds	r2, #174	@ 0xae
 8008e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 8163 	beq.w	800910e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008e48:	7b7a      	ldrb	r2, [r7, #13]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	32ae      	adds	r2, #174	@ 0xae
 8008e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	4798      	blx	r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e5e:	e156      	b.n	800910e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	785b      	ldrb	r3, [r3, #1]
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d008      	beq.n	8008e7a <USBD_StdEPReq+0x9a>
 8008e68:	2b03      	cmp	r3, #3
 8008e6a:	f300 8145 	bgt.w	80090f8 <USBD_StdEPReq+0x318>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 809b 	beq.w	8008faa <USBD_StdEPReq+0x1ca>
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d03c      	beq.n	8008ef2 <USBD_StdEPReq+0x112>
 8008e78:	e13e      	b.n	80090f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d002      	beq.n	8008e8c <USBD_StdEPReq+0xac>
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d016      	beq.n	8008eb8 <USBD_StdEPReq+0xd8>
 8008e8a:	e02c      	b.n	8008ee6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00d      	beq.n	8008eae <USBD_StdEPReq+0xce>
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
 8008e94:	2b80      	cmp	r3, #128	@ 0x80
 8008e96:	d00a      	beq.n	8008eae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 f971 	bl	800a184 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ea2:	2180      	movs	r1, #128	@ 0x80
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f001 f96d 	bl	800a184 <USBD_LL_StallEP>
 8008eaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008eac:	e020      	b.n	8008ef0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fc7a 	bl	80097aa <USBD_CtlError>
              break;
 8008eb6:	e01b      	b.n	8008ef0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	885b      	ldrh	r3, [r3, #2]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10e      	bne.n	8008ede <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <USBD_StdEPReq+0xfe>
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b80      	cmp	r3, #128	@ 0x80
 8008eca:	d008      	beq.n	8008ede <USBD_StdEPReq+0xfe>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	88db      	ldrh	r3, [r3, #6]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 f953 	bl	800a184 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fd3a 	bl	8009958 <USBD_CtlSendStatus>

              break;
 8008ee4:	e004      	b.n	8008ef0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fc5e 	bl	80097aa <USBD_CtlError>
              break;
 8008eee:	bf00      	nop
          }
          break;
 8008ef0:	e107      	b.n	8009102 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d002      	beq.n	8008f04 <USBD_StdEPReq+0x124>
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d016      	beq.n	8008f30 <USBD_StdEPReq+0x150>
 8008f02:	e04b      	b.n	8008f9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00d      	beq.n	8008f26 <USBD_StdEPReq+0x146>
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b80      	cmp	r3, #128	@ 0x80
 8008f0e:	d00a      	beq.n	8008f26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 f935 	bl	800a184 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f1a:	2180      	movs	r1, #128	@ 0x80
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f931 	bl	800a184 <USBD_LL_StallEP>
 8008f22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f24:	e040      	b.n	8008fa8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fc3e 	bl	80097aa <USBD_CtlError>
              break;
 8008f2e:	e03b      	b.n	8008fa8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	885b      	ldrh	r3, [r3, #2]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d136      	bne.n	8008fa6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d004      	beq.n	8008f4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 f93b 	bl	800a1c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fd03 	bl	8009958 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff fde4 	bl	8008b24 <USBD_CoreFindEP>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f60:	7b7b      	ldrb	r3, [r7, #13]
 8008f62:	2bff      	cmp	r3, #255	@ 0xff
 8008f64:	d01f      	beq.n	8008fa6 <USBD_StdEPReq+0x1c6>
 8008f66:	7b7b      	ldrb	r3, [r7, #13]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d11c      	bne.n	8008fa6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008f6c:	7b7a      	ldrb	r2, [r7, #13]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008f74:	7b7a      	ldrb	r2, [r7, #13]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	32ae      	adds	r2, #174	@ 0xae
 8008f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d010      	beq.n	8008fa6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f84:	7b7a      	ldrb	r2, [r7, #13]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	32ae      	adds	r2, #174	@ 0xae
 8008f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f9a:	e004      	b.n	8008fa6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fc03 	bl	80097aa <USBD_CtlError>
              break;
 8008fa4:	e000      	b.n	8008fa8 <USBD_StdEPReq+0x1c8>
              break;
 8008fa6:	bf00      	nop
          }
          break;
 8008fa8:	e0ab      	b.n	8009102 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d002      	beq.n	8008fbc <USBD_StdEPReq+0x1dc>
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d032      	beq.n	8009020 <USBD_StdEPReq+0x240>
 8008fba:	e097      	b.n	80090ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d007      	beq.n	8008fd2 <USBD_StdEPReq+0x1f2>
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b80      	cmp	r3, #128	@ 0x80
 8008fc6:	d004      	beq.n	8008fd2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fbed 	bl	80097aa <USBD_CtlError>
                break;
 8008fd0:	e091      	b.n	80090f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da0b      	bge.n	8008ff2 <USBD_StdEPReq+0x212>
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	3310      	adds	r3, #16
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	4413      	add	r3, r2
 8008fee:	3304      	adds	r3, #4
 8008ff0:	e00b      	b.n	800900a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	4413      	add	r3, r2
 8009008:	3304      	adds	r3, #4
 800900a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2200      	movs	r2, #0
 8009010:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2202      	movs	r2, #2
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fc43 	bl	80098a4 <USBD_CtlSendData>
              break;
 800901e:	e06a      	b.n	80090f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009024:	2b00      	cmp	r3, #0
 8009026:	da11      	bge.n	800904c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	f003 020f 	and.w	r2, r3, #15
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	3324      	adds	r3, #36	@ 0x24
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d117      	bne.n	8009072 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fbb0 	bl	80097aa <USBD_CtlError>
                  break;
 800904a:	e054      	b.n	80090f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	f003 020f 	and.w	r2, r3, #15
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	4613      	mov	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	440b      	add	r3, r1
 800905e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d104      	bne.n	8009072 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fb9d 	bl	80097aa <USBD_CtlError>
                  break;
 8009070:	e041      	b.n	80090f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009072:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	da0b      	bge.n	8009092 <USBD_StdEPReq+0x2b2>
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009080:	4613      	mov	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	3310      	adds	r3, #16
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	4413      	add	r3, r2
 800908e:	3304      	adds	r3, #4
 8009090:	e00b      	b.n	80090aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	3304      	adds	r3, #4
 80090aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <USBD_StdEPReq+0x2d8>
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	2b80      	cmp	r3, #128	@ 0x80
 80090b6:	d103      	bne.n	80090c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	e00e      	b.n	80090de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 f89b 	bl	800a200 <USBD_LL_IsStallEP>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2201      	movs	r2, #1
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	e002      	b.n	80090de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2202      	movs	r2, #2
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fbdd 	bl	80098a4 <USBD_CtlSendData>
              break;
 80090ea:	e004      	b.n	80090f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fb5b 	bl	80097aa <USBD_CtlError>
              break;
 80090f4:	bf00      	nop
          }
          break;
 80090f6:	e004      	b.n	8009102 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fb55 	bl	80097aa <USBD_CtlError>
          break;
 8009100:	bf00      	nop
      }
      break;
 8009102:	e005      	b.n	8009110 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fb4f 	bl	80097aa <USBD_CtlError>
      break;
 800910c:	e000      	b.n	8009110 <USBD_StdEPReq+0x330>
      break;
 800910e:	bf00      	nop
  }

  return ret;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	885b      	ldrh	r3, [r3, #2]
 8009136:	0a1b      	lsrs	r3, r3, #8
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	2b06      	cmp	r3, #6
 800913e:	f200 8128 	bhi.w	8009392 <USBD_GetDescriptor+0x276>
 8009142:	a201      	add	r2, pc, #4	@ (adr r2, 8009148 <USBD_GetDescriptor+0x2c>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	08009165 	.word	0x08009165
 800914c:	0800917d 	.word	0x0800917d
 8009150:	080091bd 	.word	0x080091bd
 8009154:	08009393 	.word	0x08009393
 8009158:	08009393 	.word	0x08009393
 800915c:	08009333 	.word	0x08009333
 8009160:	0800935f 	.word	0x0800935f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	7c12      	ldrb	r2, [r2, #16]
 8009170:	f107 0108 	add.w	r1, r7, #8
 8009174:	4610      	mov	r0, r2
 8009176:	4798      	blx	r3
 8009178:	60f8      	str	r0, [r7, #12]
      break;
 800917a:	e112      	b.n	80093a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	7c1b      	ldrb	r3, [r3, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10d      	bne.n	80091a0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800918a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800918c:	f107 0208 	add.w	r2, r7, #8
 8009190:	4610      	mov	r0, r2
 8009192:	4798      	blx	r3
 8009194:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3301      	adds	r3, #1
 800919a:	2202      	movs	r2, #2
 800919c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800919e:	e100      	b.n	80093a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a8:	f107 0208 	add.w	r2, r7, #8
 80091ac:	4610      	mov	r0, r2
 80091ae:	4798      	blx	r3
 80091b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3301      	adds	r3, #1
 80091b6:	2202      	movs	r2, #2
 80091b8:	701a      	strb	r2, [r3, #0]
      break;
 80091ba:	e0f2      	b.n	80093a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	885b      	ldrh	r3, [r3, #2]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b05      	cmp	r3, #5
 80091c4:	f200 80ac 	bhi.w	8009320 <USBD_GetDescriptor+0x204>
 80091c8:	a201      	add	r2, pc, #4	@ (adr r2, 80091d0 <USBD_GetDescriptor+0xb4>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	080091e9 	.word	0x080091e9
 80091d4:	0800921d 	.word	0x0800921d
 80091d8:	08009251 	.word	0x08009251
 80091dc:	08009285 	.word	0x08009285
 80091e0:	080092b9 	.word	0x080092b9
 80091e4:	080092ed 	.word	0x080092ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	7c12      	ldrb	r2, [r2, #16]
 8009200:	f107 0108 	add.w	r1, r7, #8
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
 8009208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800920a:	e091      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 facb 	bl	80097aa <USBD_CtlError>
            err++;
 8009214:	7afb      	ldrb	r3, [r7, #11]
 8009216:	3301      	adds	r3, #1
 8009218:	72fb      	strb	r3, [r7, #11]
          break;
 800921a:	e089      	b.n	8009330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00b      	beq.n	8009240 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	7c12      	ldrb	r2, [r2, #16]
 8009234:	f107 0108 	add.w	r1, r7, #8
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
 800923c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800923e:	e077      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fab1 	bl	80097aa <USBD_CtlError>
            err++;
 8009248:	7afb      	ldrb	r3, [r7, #11]
 800924a:	3301      	adds	r3, #1
 800924c:	72fb      	strb	r3, [r7, #11]
          break;
 800924e:	e06f      	b.n	8009330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	7c12      	ldrb	r2, [r2, #16]
 8009268:	f107 0108 	add.w	r1, r7, #8
 800926c:	4610      	mov	r0, r2
 800926e:	4798      	blx	r3
 8009270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009272:	e05d      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fa97 	bl	80097aa <USBD_CtlError>
            err++;
 800927c:	7afb      	ldrb	r3, [r7, #11]
 800927e:	3301      	adds	r3, #1
 8009280:	72fb      	strb	r3, [r7, #11]
          break;
 8009282:	e055      	b.n	8009330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00b      	beq.n	80092a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	7c12      	ldrb	r2, [r2, #16]
 800929c:	f107 0108 	add.w	r1, r7, #8
 80092a0:	4610      	mov	r0, r2
 80092a2:	4798      	blx	r3
 80092a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092a6:	e043      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa7d 	bl	80097aa <USBD_CtlError>
            err++;
 80092b0:	7afb      	ldrb	r3, [r7, #11]
 80092b2:	3301      	adds	r3, #1
 80092b4:	72fb      	strb	r3, [r7, #11]
          break;
 80092b6:	e03b      	b.n	8009330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00b      	beq.n	80092dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7c12      	ldrb	r2, [r2, #16]
 80092d0:	f107 0108 	add.w	r1, r7, #8
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
 80092d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092da:	e029      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fa63 	bl	80097aa <USBD_CtlError>
            err++;
 80092e4:	7afb      	ldrb	r3, [r7, #11]
 80092e6:	3301      	adds	r3, #1
 80092e8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ea:	e021      	b.n	8009330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	7c12      	ldrb	r2, [r2, #16]
 8009304:	f107 0108 	add.w	r1, r7, #8
 8009308:	4610      	mov	r0, r2
 800930a:	4798      	blx	r3
 800930c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800930e:	e00f      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa49 	bl	80097aa <USBD_CtlError>
            err++;
 8009318:	7afb      	ldrb	r3, [r7, #11]
 800931a:	3301      	adds	r3, #1
 800931c:	72fb      	strb	r3, [r7, #11]
          break;
 800931e:	e007      	b.n	8009330 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa41 	bl	80097aa <USBD_CtlError>
          err++;
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	3301      	adds	r3, #1
 800932c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800932e:	bf00      	nop
      }
      break;
 8009330:	e037      	b.n	80093a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	7c1b      	ldrb	r3, [r3, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d109      	bne.n	800934e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009342:	f107 0208 	add.w	r2, r7, #8
 8009346:	4610      	mov	r0, r2
 8009348:	4798      	blx	r3
 800934a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800934c:	e029      	b.n	80093a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fa2a 	bl	80097aa <USBD_CtlError>
        err++;
 8009356:	7afb      	ldrb	r3, [r7, #11]
 8009358:	3301      	adds	r3, #1
 800935a:	72fb      	strb	r3, [r7, #11]
      break;
 800935c:	e021      	b.n	80093a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	7c1b      	ldrb	r3, [r3, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10d      	bne.n	8009382 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800936c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936e:	f107 0208 	add.w	r2, r7, #8
 8009372:	4610      	mov	r0, r2
 8009374:	4798      	blx	r3
 8009376:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3301      	adds	r3, #1
 800937c:	2207      	movs	r2, #7
 800937e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009380:	e00f      	b.n	80093a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fa10 	bl	80097aa <USBD_CtlError>
        err++;
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	3301      	adds	r3, #1
 800938e:	72fb      	strb	r3, [r7, #11]
      break;
 8009390:	e007      	b.n	80093a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fa08 	bl	80097aa <USBD_CtlError>
      err++;
 800939a:	7afb      	ldrb	r3, [r7, #11]
 800939c:	3301      	adds	r3, #1
 800939e:	72fb      	strb	r3, [r7, #11]
      break;
 80093a0:	bf00      	nop
  }

  if (err != 0U)
 80093a2:	7afb      	ldrb	r3, [r7, #11]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d11e      	bne.n	80093e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	88db      	ldrh	r3, [r3, #6]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d016      	beq.n	80093de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80093b0:	893b      	ldrh	r3, [r7, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00e      	beq.n	80093d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	88da      	ldrh	r2, [r3, #6]
 80093ba:	893b      	ldrh	r3, [r7, #8]
 80093bc:	4293      	cmp	r3, r2
 80093be:	bf28      	it	cs
 80093c0:	4613      	movcs	r3, r2
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093c6:	893b      	ldrh	r3, [r7, #8]
 80093c8:	461a      	mov	r2, r3
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fa69 	bl	80098a4 <USBD_CtlSendData>
 80093d2:	e009      	b.n	80093e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f9e7 	bl	80097aa <USBD_CtlError>
 80093dc:	e004      	b.n	80093e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 faba 	bl	8009958 <USBD_CtlSendStatus>
 80093e4:	e000      	b.n	80093e8 <USBD_GetDescriptor+0x2cc>
    return;
 80093e6:	bf00      	nop
  }
}
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop

080093f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	889b      	ldrh	r3, [r3, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d131      	bne.n	8009466 <USBD_SetAddress+0x76>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	88db      	ldrh	r3, [r3, #6]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d12d      	bne.n	8009466 <USBD_SetAddress+0x76>
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	885b      	ldrh	r3, [r3, #2]
 800940e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009410:	d829      	bhi.n	8009466 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	885b      	ldrh	r3, [r3, #2]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800941c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b03      	cmp	r3, #3
 8009428:	d104      	bne.n	8009434 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f9bc 	bl	80097aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	e01d      	b.n	8009470 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	7bfa      	ldrb	r2, [r7, #15]
 8009438:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 ff09 	bl	800a258 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fa86 	bl	8009958 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d004      	beq.n	800945c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2202      	movs	r2, #2
 8009456:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800945a:	e009      	b.n	8009470 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009464:	e004      	b.n	8009470 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f99e 	bl	80097aa <USBD_CtlError>
  }
}
 800946e:	bf00      	nop
 8009470:	bf00      	nop
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	885b      	ldrh	r3, [r3, #2]
 800948a:	b2da      	uxtb	r2, r3
 800948c:	4b4e      	ldr	r3, [pc, #312]	@ (80095c8 <USBD_SetConfig+0x150>)
 800948e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009490:	4b4d      	ldr	r3, [pc, #308]	@ (80095c8 <USBD_SetConfig+0x150>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d905      	bls.n	80094a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f985 	bl	80097aa <USBD_CtlError>
    return USBD_FAIL;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e08c      	b.n	80095be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d002      	beq.n	80094b6 <USBD_SetConfig+0x3e>
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d029      	beq.n	8009508 <USBD_SetConfig+0x90>
 80094b4:	e075      	b.n	80095a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80094b6:	4b44      	ldr	r3, [pc, #272]	@ (80095c8 <USBD_SetConfig+0x150>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d020      	beq.n	8009500 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80094be:	4b42      	ldr	r3, [pc, #264]	@ (80095c8 <USBD_SetConfig+0x150>)
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094c8:	4b3f      	ldr	r3, [pc, #252]	@ (80095c8 <USBD_SetConfig+0x150>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7fe ffe3 	bl	800849a <USBD_SetClassConfig>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d008      	beq.n	80094f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f962 	bl	80097aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2202      	movs	r2, #2
 80094ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094ee:	e065      	b.n	80095bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fa31 	bl	8009958 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2203      	movs	r2, #3
 80094fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80094fe:	e05d      	b.n	80095bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fa29 	bl	8009958 <USBD_CtlSendStatus>
      break;
 8009506:	e059      	b.n	80095bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009508:	4b2f      	ldr	r3, [pc, #188]	@ (80095c8 <USBD_SetConfig+0x150>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d112      	bne.n	8009536 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2202      	movs	r2, #2
 8009514:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009518:	4b2b      	ldr	r3, [pc, #172]	@ (80095c8 <USBD_SetConfig+0x150>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009522:	4b29      	ldr	r3, [pc, #164]	@ (80095c8 <USBD_SetConfig+0x150>)
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7fe ffd2 	bl	80084d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fa12 	bl	8009958 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009534:	e042      	b.n	80095bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009536:	4b24      	ldr	r3, [pc, #144]	@ (80095c8 <USBD_SetConfig+0x150>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	d02a      	beq.n	800959a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	b2db      	uxtb	r3, r3
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7fe ffc0 	bl	80084d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009552:	4b1d      	ldr	r3, [pc, #116]	@ (80095c8 <USBD_SetConfig+0x150>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800955c:	4b1a      	ldr	r3, [pc, #104]	@ (80095c8 <USBD_SetConfig+0x150>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7fe ff99 	bl	800849a <USBD_SetClassConfig>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00f      	beq.n	8009592 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f918 	bl	80097aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7fe ffa5 	bl	80084d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009590:	e014      	b.n	80095bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f9e0 	bl	8009958 <USBD_CtlSendStatus>
      break;
 8009598:	e010      	b.n	80095bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f9dc 	bl	8009958 <USBD_CtlSendStatus>
      break;
 80095a0:	e00c      	b.n	80095bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f900 	bl	80097aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095aa:	4b07      	ldr	r3, [pc, #28]	@ (80095c8 <USBD_SetConfig+0x150>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7fe ff8e 	bl	80084d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80095b6:	2303      	movs	r3, #3
 80095b8:	73fb      	strb	r3, [r7, #15]
      break;
 80095ba:	bf00      	nop
  }

  return ret;
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	200008b4 	.word	0x200008b4

080095cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	88db      	ldrh	r3, [r3, #6]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d004      	beq.n	80095e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f8e2 	bl	80097aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095e6:	e023      	b.n	8009630 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	dc02      	bgt.n	80095fa <USBD_GetConfig+0x2e>
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	dc03      	bgt.n	8009600 <USBD_GetConfig+0x34>
 80095f8:	e015      	b.n	8009626 <USBD_GetConfig+0x5a>
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d00b      	beq.n	8009616 <USBD_GetConfig+0x4a>
 80095fe:	e012      	b.n	8009626 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3308      	adds	r3, #8
 800960a:	2201      	movs	r2, #1
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f948 	bl	80098a4 <USBD_CtlSendData>
        break;
 8009614:	e00c      	b.n	8009630 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3304      	adds	r3, #4
 800961a:	2201      	movs	r2, #1
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f940 	bl	80098a4 <USBD_CtlSendData>
        break;
 8009624:	e004      	b.n	8009630 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f8be 	bl	80097aa <USBD_CtlError>
        break;
 800962e:	bf00      	nop
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009648:	b2db      	uxtb	r3, r3
 800964a:	3b01      	subs	r3, #1
 800964c:	2b02      	cmp	r3, #2
 800964e:	d81e      	bhi.n	800968e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	88db      	ldrh	r3, [r3, #6]
 8009654:	2b02      	cmp	r3, #2
 8009656:	d004      	beq.n	8009662 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f8a5 	bl	80097aa <USBD_CtlError>
        break;
 8009660:	e01a      	b.n	8009698 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f043 0202 	orr.w	r2, r3, #2
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	330c      	adds	r3, #12
 8009682:	2202      	movs	r2, #2
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f90c 	bl	80098a4 <USBD_CtlSendData>
      break;
 800968c:	e004      	b.n	8009698 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f88a 	bl	80097aa <USBD_CtlError>
      break;
 8009696:	bf00      	nop
  }
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	885b      	ldrh	r3, [r3, #2]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d107      	bne.n	80096c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f94c 	bl	8009958 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80096c0:	e013      	b.n	80096ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	885b      	ldrh	r3, [r3, #2]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d10b      	bne.n	80096e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	889b      	ldrh	r3, [r3, #4]
 80096ce:	0a1b      	lsrs	r3, r3, #8
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f93c 	bl	8009958 <USBD_CtlSendStatus>
}
 80096e0:	e003      	b.n	80096ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f860 	bl	80097aa <USBD_CtlError>
}
 80096ea:	bf00      	nop
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009702:	b2db      	uxtb	r3, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	2b02      	cmp	r3, #2
 8009708:	d80b      	bhi.n	8009722 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	885b      	ldrh	r3, [r3, #2]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d10c      	bne.n	800972c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f91c 	bl	8009958 <USBD_CtlSendStatus>
      }
      break;
 8009720:	e004      	b.n	800972c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f840 	bl	80097aa <USBD_CtlError>
      break;
 800972a:	e000      	b.n	800972e <USBD_ClrFeature+0x3c>
      break;
 800972c:	bf00      	nop
  }
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	781a      	ldrb	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3301      	adds	r3, #1
 8009750:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	781a      	ldrb	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3301      	adds	r3, #1
 800975e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f7ff fa40 	bl	8008be6 <SWAPBYTE>
 8009766:	4603      	mov	r3, r0
 8009768:	461a      	mov	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3301      	adds	r3, #1
 8009772:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3301      	adds	r3, #1
 8009778:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f7ff fa33 	bl	8008be6 <SWAPBYTE>
 8009780:	4603      	mov	r3, r0
 8009782:	461a      	mov	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3301      	adds	r3, #1
 800978c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3301      	adds	r3, #1
 8009792:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f7ff fa26 	bl	8008be6 <SWAPBYTE>
 800979a:	4603      	mov	r3, r0
 800979c:	461a      	mov	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	80da      	strh	r2, [r3, #6]
}
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b082      	sub	sp, #8
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80097b4:	2180      	movs	r1, #128	@ 0x80
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fce4 	bl	800a184 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80097bc:	2100      	movs	r1, #0
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fce0 	bl	800a184 <USBD_LL_StallEP>
}
 80097c4:	bf00      	nop
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097d8:	2300      	movs	r3, #0
 80097da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d042      	beq.n	8009868 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80097e6:	6938      	ldr	r0, [r7, #16]
 80097e8:	f000 f842 	bl	8009870 <USBD_GetLen>
 80097ec:	4603      	mov	r3, r0
 80097ee:	3301      	adds	r3, #1
 80097f0:	005b      	lsls	r3, r3, #1
 80097f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097f6:	d808      	bhi.n	800980a <USBD_GetString+0x3e>
 80097f8:	6938      	ldr	r0, [r7, #16]
 80097fa:	f000 f839 	bl	8009870 <USBD_GetLen>
 80097fe:	4603      	mov	r3, r0
 8009800:	3301      	adds	r3, #1
 8009802:	b29b      	uxth	r3, r3
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	e001      	b.n	800980e <USBD_GetString+0x42>
 800980a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	4413      	add	r3, r2
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7812      	ldrb	r2, [r2, #0]
 800981c:	701a      	strb	r2, [r3, #0]
  idx++;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	3301      	adds	r3, #1
 8009822:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	4413      	add	r3, r2
 800982a:	2203      	movs	r2, #3
 800982c:	701a      	strb	r2, [r3, #0]
  idx++;
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	3301      	adds	r3, #1
 8009832:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009834:	e013      	b.n	800985e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	4413      	add	r3, r2
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	7812      	ldrb	r2, [r2, #0]
 8009840:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	3301      	adds	r3, #1
 8009846:	613b      	str	r3, [r7, #16]
    idx++;
 8009848:	7dfb      	ldrb	r3, [r7, #23]
 800984a:	3301      	adds	r3, #1
 800984c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	4413      	add	r3, r2
 8009854:	2200      	movs	r2, #0
 8009856:	701a      	strb	r2, [r3, #0]
    idx++;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	3301      	adds	r3, #1
 800985c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e7      	bne.n	8009836 <USBD_GetString+0x6a>
 8009866:	e000      	b.n	800986a <USBD_GetString+0x9e>
    return;
 8009868:	bf00      	nop
  }
}
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009880:	e005      	b.n	800988e <USBD_GetLen+0x1e>
  {
    len++;
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	3301      	adds	r3, #1
 8009886:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	3301      	adds	r3, #1
 800988c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1f5      	bne.n	8009882 <USBD_GetLen+0x12>
  }

  return len;
 8009896:	7bfb      	ldrb	r3, [r7, #15]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	2100      	movs	r1, #0
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fce3 	bl	800a296 <USBD_LL_Transmit>

  return USBD_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	2100      	movs	r1, #0
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fcd2 	bl	800a296 <USBD_LL_Transmit>

  return USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2203      	movs	r2, #3
 800990c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	2100      	movs	r1, #0
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 fcd6 	bl	800a2d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	60f8      	str	r0, [r7, #12]
 800993e:	60b9      	str	r1, [r7, #8]
 8009940:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	2100      	movs	r1, #0
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 fcc5 	bl	800a2d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2204      	movs	r2, #4
 8009964:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009968:	2300      	movs	r3, #0
 800996a:	2200      	movs	r2, #0
 800996c:	2100      	movs	r1, #0
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fc91 	bl	800a296 <USBD_LL_Transmit>

  return USBD_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b082      	sub	sp, #8
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2205      	movs	r2, #5
 800998a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800998e:	2300      	movs	r3, #0
 8009990:	2200      	movs	r2, #0
 8009992:	2100      	movs	r1, #0
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fc9f 	bl	800a2d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80099a8:	2200      	movs	r2, #0
 80099aa:	4912      	ldr	r1, [pc, #72]	@ (80099f4 <MX_USB_DEVICE_Init+0x50>)
 80099ac:	4812      	ldr	r0, [pc, #72]	@ (80099f8 <MX_USB_DEVICE_Init+0x54>)
 80099ae:	f7fe fcf7 	bl	80083a0 <USBD_Init>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099b8:	f7f7 fff2 	bl	80019a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099bc:	490f      	ldr	r1, [pc, #60]	@ (80099fc <MX_USB_DEVICE_Init+0x58>)
 80099be:	480e      	ldr	r0, [pc, #56]	@ (80099f8 <MX_USB_DEVICE_Init+0x54>)
 80099c0:	f7fe fd1e 	bl	8008400 <USBD_RegisterClass>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099ca:	f7f7 ffe9 	bl	80019a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099ce:	490c      	ldr	r1, [pc, #48]	@ (8009a00 <MX_USB_DEVICE_Init+0x5c>)
 80099d0:	4809      	ldr	r0, [pc, #36]	@ (80099f8 <MX_USB_DEVICE_Init+0x54>)
 80099d2:	f7fe fc15 	bl	8008200 <USBD_CDC_RegisterInterface>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099dc:	f7f7 ffe0 	bl	80019a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099e0:	4805      	ldr	r0, [pc, #20]	@ (80099f8 <MX_USB_DEVICE_Init+0x54>)
 80099e2:	f7fe fd43 	bl	800846c <USBD_Start>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099ec:	f7f7 ffd8 	bl	80019a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099f0:	bf00      	nop
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	200000ac 	.word	0x200000ac
 80099f8:	200008b8 	.word	0x200008b8
 80099fc:	20000018 	.word	0x20000018
 8009a00:	20000098 	.word	0x20000098

08009a04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4905      	ldr	r1, [pc, #20]	@ (8009a20 <CDC_Init_FS+0x1c>)
 8009a0c:	4805      	ldr	r0, [pc, #20]	@ (8009a24 <CDC_Init_FS+0x20>)
 8009a0e:	f7fe fc11 	bl	8008234 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a12:	4905      	ldr	r1, [pc, #20]	@ (8009a28 <CDC_Init_FS+0x24>)
 8009a14:	4803      	ldr	r0, [pc, #12]	@ (8009a24 <CDC_Init_FS+0x20>)
 8009a16:	f7fe fc2f 	bl	8008278 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20001394 	.word	0x20001394
 8009a24:	200008b8 	.word	0x200008b8
 8009a28:	20000b94 	.word	0x20000b94

08009a2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	6039      	str	r1, [r7, #0]
 8009a46:	71fb      	strb	r3, [r7, #7]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	2b23      	cmp	r3, #35	@ 0x23
 8009a50:	d84a      	bhi.n	8009ae8 <CDC_Control_FS+0xac>
 8009a52:	a201      	add	r2, pc, #4	@ (adr r2, 8009a58 <CDC_Control_FS+0x1c>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009ae9 	.word	0x08009ae9
 8009a5c:	08009ae9 	.word	0x08009ae9
 8009a60:	08009ae9 	.word	0x08009ae9
 8009a64:	08009ae9 	.word	0x08009ae9
 8009a68:	08009ae9 	.word	0x08009ae9
 8009a6c:	08009ae9 	.word	0x08009ae9
 8009a70:	08009ae9 	.word	0x08009ae9
 8009a74:	08009ae9 	.word	0x08009ae9
 8009a78:	08009ae9 	.word	0x08009ae9
 8009a7c:	08009ae9 	.word	0x08009ae9
 8009a80:	08009ae9 	.word	0x08009ae9
 8009a84:	08009ae9 	.word	0x08009ae9
 8009a88:	08009ae9 	.word	0x08009ae9
 8009a8c:	08009ae9 	.word	0x08009ae9
 8009a90:	08009ae9 	.word	0x08009ae9
 8009a94:	08009ae9 	.word	0x08009ae9
 8009a98:	08009ae9 	.word	0x08009ae9
 8009a9c:	08009ae9 	.word	0x08009ae9
 8009aa0:	08009ae9 	.word	0x08009ae9
 8009aa4:	08009ae9 	.word	0x08009ae9
 8009aa8:	08009ae9 	.word	0x08009ae9
 8009aac:	08009ae9 	.word	0x08009ae9
 8009ab0:	08009ae9 	.word	0x08009ae9
 8009ab4:	08009ae9 	.word	0x08009ae9
 8009ab8:	08009ae9 	.word	0x08009ae9
 8009abc:	08009ae9 	.word	0x08009ae9
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009ae9 	.word	0x08009ae9
 8009ac8:	08009ae9 	.word	0x08009ae9
 8009acc:	08009ae9 	.word	0x08009ae9
 8009ad0:	08009ae9 	.word	0x08009ae9
 8009ad4:	08009ae9 	.word	0x08009ae9
 8009ad8:	08009ae9 	.word	0x08009ae9
 8009adc:	08009ae9 	.word	0x08009ae9
 8009ae0:	08009ae9 	.word	0x08009ae9
 8009ae4:	08009ae9 	.word	0x08009ae9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ae8:	bf00      	nop
  }

  return (USBD_OK);
 8009aea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b02:	6879      	ldr	r1, [r7, #4]
 8009b04:	4805      	ldr	r0, [pc, #20]	@ (8009b1c <CDC_Receive_FS+0x24>)
 8009b06:	f7fe fbb7 	bl	8008278 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b0a:	4804      	ldr	r0, [pc, #16]	@ (8009b1c <CDC_Receive_FS+0x24>)
 8009b0c:	f7fe fc12 	bl	8008334 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	200008b8 	.word	0x200008b8

08009b20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b30:	4b0d      	ldr	r3, [pc, #52]	@ (8009b68 <CDC_Transmit_FS+0x48>)
 8009b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e00b      	b.n	8009b5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b46:	887b      	ldrh	r3, [r7, #2]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6879      	ldr	r1, [r7, #4]
 8009b4c:	4806      	ldr	r0, [pc, #24]	@ (8009b68 <CDC_Transmit_FS+0x48>)
 8009b4e:	f7fe fb71 	bl	8008234 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b52:	4805      	ldr	r0, [pc, #20]	@ (8009b68 <CDC_Transmit_FS+0x48>)
 8009b54:	f7fe fbae 	bl	80082b4 <USBD_CDC_TransmitPacket>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	200008b8 	.word	0x200008b8

08009b6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	4613      	mov	r3, r2
 8009b78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
	...

08009b90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2212      	movs	r2, #18
 8009ba0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ba2:	4b03      	ldr	r3, [pc, #12]	@ (8009bb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	200000c8 	.word	0x200000c8

08009bb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2204      	movs	r2, #4
 8009bc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bc6:	4b03      	ldr	r3, [pc, #12]	@ (8009bd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	200000dc 	.word	0x200000dc

08009bd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	6039      	str	r1, [r7, #0]
 8009be2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d105      	bne.n	8009bf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	4907      	ldr	r1, [pc, #28]	@ (8009c0c <USBD_FS_ProductStrDescriptor+0x34>)
 8009bee:	4808      	ldr	r0, [pc, #32]	@ (8009c10 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bf0:	f7ff fdec 	bl	80097cc <USBD_GetString>
 8009bf4:	e004      	b.n	8009c00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	4904      	ldr	r1, [pc, #16]	@ (8009c0c <USBD_FS_ProductStrDescriptor+0x34>)
 8009bfa:	4805      	ldr	r0, [pc, #20]	@ (8009c10 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bfc:	f7ff fde6 	bl	80097cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c00:	4b02      	ldr	r3, [pc, #8]	@ (8009c0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20001b94 	.word	0x20001b94
 8009c10:	0800cff8 	.word	0x0800cff8

08009c14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	6039      	str	r1, [r7, #0]
 8009c1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	4904      	ldr	r1, [pc, #16]	@ (8009c34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c24:	4804      	ldr	r0, [pc, #16]	@ (8009c38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c26:	f7ff fdd1 	bl	80097cc <USBD_GetString>
  return USBD_StrDesc;
 8009c2a:	4b02      	ldr	r3, [pc, #8]	@ (8009c34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20001b94 	.word	0x20001b94
 8009c38:	0800d010 	.word	0x0800d010

08009c3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	6039      	str	r1, [r7, #0]
 8009c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	221a      	movs	r2, #26
 8009c4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c4e:	f000 f843 	bl	8009cd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c52:	4b02      	ldr	r3, [pc, #8]	@ (8009c5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	200000e0 	.word	0x200000e0

08009c60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	6039      	str	r1, [r7, #0]
 8009c6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c6c:	79fb      	ldrb	r3, [r7, #7]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d105      	bne.n	8009c7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	4907      	ldr	r1, [pc, #28]	@ (8009c94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c76:	4808      	ldr	r0, [pc, #32]	@ (8009c98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c78:	f7ff fda8 	bl	80097cc <USBD_GetString>
 8009c7c:	e004      	b.n	8009c88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	4904      	ldr	r1, [pc, #16]	@ (8009c94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c82:	4805      	ldr	r0, [pc, #20]	@ (8009c98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c84:	f7ff fda2 	bl	80097cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c88:	4b02      	ldr	r3, [pc, #8]	@ (8009c94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20001b94 	.word	0x20001b94
 8009c98:	0800d024 	.word	0x0800d024

08009c9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	6039      	str	r1, [r7, #0]
 8009ca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ca8:	79fb      	ldrb	r3, [r7, #7]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d105      	bne.n	8009cba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	4907      	ldr	r1, [pc, #28]	@ (8009cd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cb2:	4808      	ldr	r0, [pc, #32]	@ (8009cd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cb4:	f7ff fd8a 	bl	80097cc <USBD_GetString>
 8009cb8:	e004      	b.n	8009cc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	4904      	ldr	r1, [pc, #16]	@ (8009cd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cbe:	4805      	ldr	r0, [pc, #20]	@ (8009cd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cc0:	f7ff fd84 	bl	80097cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cc4:	4b02      	ldr	r3, [pc, #8]	@ (8009cd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20001b94 	.word	0x20001b94
 8009cd4:	0800d030 	.word	0x0800d030

08009cd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cde:	4b0f      	ldr	r3, [pc, #60]	@ (8009d1c <Get_SerialNum+0x44>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d20 <Get_SerialNum+0x48>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cea:	4b0e      	ldr	r3, [pc, #56]	@ (8009d24 <Get_SerialNum+0x4c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d009      	beq.n	8009d12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cfe:	2208      	movs	r2, #8
 8009d00:	4909      	ldr	r1, [pc, #36]	@ (8009d28 <Get_SerialNum+0x50>)
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 f814 	bl	8009d30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d08:	2204      	movs	r2, #4
 8009d0a:	4908      	ldr	r1, [pc, #32]	@ (8009d2c <Get_SerialNum+0x54>)
 8009d0c:	68b8      	ldr	r0, [r7, #8]
 8009d0e:	f000 f80f 	bl	8009d30 <IntToUnicode>
  }
}
 8009d12:	bf00      	nop
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	1fff7a10 	.word	0x1fff7a10
 8009d20:	1fff7a14 	.word	0x1fff7a14
 8009d24:	1fff7a18 	.word	0x1fff7a18
 8009d28:	200000e2 	.word	0x200000e2
 8009d2c:	200000f2 	.word	0x200000f2

08009d30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d42:	2300      	movs	r3, #0
 8009d44:	75fb      	strb	r3, [r7, #23]
 8009d46:	e027      	b.n	8009d98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	0f1b      	lsrs	r3, r3, #28
 8009d4c:	2b09      	cmp	r3, #9
 8009d4e:	d80b      	bhi.n	8009d68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	0f1b      	lsrs	r3, r3, #28
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	440b      	add	r3, r1
 8009d60:	3230      	adds	r2, #48	@ 0x30
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e00a      	b.n	8009d7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	0f1b      	lsrs	r3, r3, #28
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	4619      	mov	r1, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	440b      	add	r3, r1
 8009d78:	3237      	adds	r2, #55	@ 0x37
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	011b      	lsls	r3, r3, #4
 8009d82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	3301      	adds	r3, #1
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	2200      	movs	r2, #0
 8009d90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	3301      	adds	r3, #1
 8009d96:	75fb      	strb	r3, [r7, #23]
 8009d98:	7dfa      	ldrb	r2, [r7, #23]
 8009d9a:	79fb      	ldrb	r3, [r7, #7]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d3d3      	bcc.n	8009d48 <IntToUnicode+0x18>
  }
}
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
	...

08009db0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08a      	sub	sp, #40	@ 0x28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009db8:	f107 0314 	add.w	r3, r7, #20
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	605a      	str	r2, [r3, #4]
 8009dc2:	609a      	str	r2, [r3, #8]
 8009dc4:	60da      	str	r2, [r3, #12]
 8009dc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009dd0:	d132      	bne.n	8009e38 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	613b      	str	r3, [r7, #16]
 8009dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e40 <HAL_PCD_MspInit+0x90>)
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dda:	4a19      	ldr	r2, [pc, #100]	@ (8009e40 <HAL_PCD_MspInit+0x90>)
 8009ddc:	f043 0301 	orr.w	r3, r3, #1
 8009de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009de2:	4b17      	ldr	r3, [pc, #92]	@ (8009e40 <HAL_PCD_MspInit+0x90>)
 8009de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009dee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009df4:	2302      	movs	r3, #2
 8009df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e00:	230a      	movs	r3, #10
 8009e02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e04:	f107 0314 	add.w	r3, r7, #20
 8009e08:	4619      	mov	r1, r3
 8009e0a:	480e      	ldr	r0, [pc, #56]	@ (8009e44 <HAL_PCD_MspInit+0x94>)
 8009e0c:	f7f8 ff38 	bl	8002c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e10:	4b0b      	ldr	r3, [pc, #44]	@ (8009e40 <HAL_PCD_MspInit+0x90>)
 8009e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e14:	4a0a      	ldr	r2, [pc, #40]	@ (8009e40 <HAL_PCD_MspInit+0x90>)
 8009e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e1a:	6353      	str	r3, [r2, #52]	@ 0x34
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60fb      	str	r3, [r7, #12]
 8009e20:	4b07      	ldr	r3, [pc, #28]	@ (8009e40 <HAL_PCD_MspInit+0x90>)
 8009e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e24:	4a06      	ldr	r2, [pc, #24]	@ (8009e40 <HAL_PCD_MspInit+0x90>)
 8009e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009e2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8009e2c:	4b04      	ldr	r3, [pc, #16]	@ (8009e40 <HAL_PCD_MspInit+0x90>)
 8009e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e38:	bf00      	nop
 8009e3a:	3728      	adds	r7, #40	@ 0x28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	40023800 	.word	0x40023800
 8009e44:	40020000 	.word	0x40020000

08009e48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	f7fe fb51 	bl	8008506 <USBD_LL_SetupStage>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009e7e:	78fa      	ldrb	r2, [r7, #3]
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	4613      	mov	r3, r2
 8009e84:	00db      	lsls	r3, r3, #3
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	440b      	add	r3, r1
 8009e8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	78fb      	ldrb	r3, [r7, #3]
 8009e94:	4619      	mov	r1, r3
 8009e96:	f7fe fb8b 	bl	80085b0 <USBD_LL_DataOutStage>
}
 8009e9a:	bf00      	nop
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009eb4:	78fa      	ldrb	r2, [r7, #3]
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	00db      	lsls	r3, r3, #3
 8009ebc:	4413      	add	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	440b      	add	r3, r1
 8009ec2:	3320      	adds	r3, #32
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	78fb      	ldrb	r3, [r7, #3]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	f7fe fc24 	bl	8008716 <USBD_LL_DataInStage>
}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fe fd5e 	bl	80089a6 <USBD_LL_SOF>
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009efa:	2301      	movs	r3, #1
 8009efc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	79db      	ldrb	r3, [r3, #7]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d102      	bne.n	8009f0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]
 8009f0a:	e008      	b.n	8009f1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	79db      	ldrb	r3, [r3, #7]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d102      	bne.n	8009f1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009f14:	2301      	movs	r3, #1
 8009f16:	73fb      	strb	r3, [r7, #15]
 8009f18:	e001      	b.n	8009f1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009f1a:	f7f7 fd41 	bl	80019a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f24:	7bfa      	ldrb	r2, [r7, #15]
 8009f26:	4611      	mov	r1, r2
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fe fcf8 	bl	800891e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fca0 	bl	800887a <USBD_LL_Reset>
}
 8009f3a:	bf00      	nop
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe fcf3 	bl	800893e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	6812      	ldr	r2, [r2, #0]
 8009f66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f6a:	f043 0301 	orr.w	r3, r3, #1
 8009f6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	7adb      	ldrb	r3, [r3, #11]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f78:	4b04      	ldr	r3, [pc, #16]	@ (8009f8c <HAL_PCD_SuspendCallback+0x48>)
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	4a03      	ldr	r2, [pc, #12]	@ (8009f8c <HAL_PCD_SuspendCallback+0x48>)
 8009f7e:	f043 0306 	orr.w	r3, r3, #6
 8009f82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	e000ed00 	.word	0xe000ed00

08009f90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe fce9 	bl	8008976 <USBD_LL_Resume>
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fbe:	78fa      	ldrb	r2, [r7, #3]
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fe fd41 	bl	8008a4a <USBD_LL_IsoOUTIncomplete>
}
 8009fc8:	bf00      	nop
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fe2:	78fa      	ldrb	r2, [r7, #3]
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fcfd 	bl	80089e6 <USBD_LL_IsoINIncomplete>
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe fd53 	bl	8008aae <USBD_LL_DevConnected>
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe fd50 	bl	8008ac4 <USBD_LL_DevDisconnected>
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d13c      	bne.n	800a0b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a03c:	4a20      	ldr	r2, [pc, #128]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a1e      	ldr	r2, [pc, #120]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a048:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a04c:	4b1c      	ldr	r3, [pc, #112]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a04e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a052:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a054:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a056:	2204      	movs	r2, #4
 800a058:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a05a:	4b19      	ldr	r3, [pc, #100]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a05c:	2202      	movs	r2, #2
 800a05e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a060:	4b17      	ldr	r3, [pc, #92]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a062:	2200      	movs	r2, #0
 800a064:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a066:	4b16      	ldr	r3, [pc, #88]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a068:	2202      	movs	r2, #2
 800a06a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a06c:	4b14      	ldr	r3, [pc, #80]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a06e:	2200      	movs	r2, #0
 800a070:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a072:	4b13      	ldr	r3, [pc, #76]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a074:	2200      	movs	r2, #0
 800a076:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a078:	4b11      	ldr	r3, [pc, #68]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a07e:	4b10      	ldr	r3, [pc, #64]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a080:	2200      	movs	r2, #0
 800a082:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a084:	4b0e      	ldr	r3, [pc, #56]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a086:	2200      	movs	r2, #0
 800a088:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a08a:	480d      	ldr	r0, [pc, #52]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a08c:	f7f8 ff7c 	bl	8002f88 <HAL_PCD_Init>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a096:	f7f7 fc83 	bl	80019a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a09a:	2180      	movs	r1, #128	@ 0x80
 800a09c:	4808      	ldr	r0, [pc, #32]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a09e:	f7fa f9a8 	bl	80043f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a0a2:	2240      	movs	r2, #64	@ 0x40
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4806      	ldr	r0, [pc, #24]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a0a8:	f7fa f95c 	bl	8004364 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a0ac:	2280      	movs	r2, #128	@ 0x80
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	4803      	ldr	r0, [pc, #12]	@ (800a0c0 <USBD_LL_Init+0x94>)
 800a0b2:	f7fa f957 	bl	8004364 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	20001d94 	.word	0x20001d94

0800a0c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7f9 f863 	bl	80031a6 <HAL_PCD_Start>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 f942 	bl	800a370 <USBD_Get_USB_Status>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b084      	sub	sp, #16
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	4608      	mov	r0, r1
 800a104:	4611      	mov	r1, r2
 800a106:	461a      	mov	r2, r3
 800a108:	4603      	mov	r3, r0
 800a10a:	70fb      	strb	r3, [r7, #3]
 800a10c:	460b      	mov	r3, r1
 800a10e:	70bb      	strb	r3, [r7, #2]
 800a110:	4613      	mov	r3, r2
 800a112:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a122:	78bb      	ldrb	r3, [r7, #2]
 800a124:	883a      	ldrh	r2, [r7, #0]
 800a126:	78f9      	ldrb	r1, [r7, #3]
 800a128:	f7f9 fd37 	bl	8003b9a <HAL_PCD_EP_Open>
 800a12c:	4603      	mov	r3, r0
 800a12e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	4618      	mov	r0, r3
 800a134:	f000 f91c 	bl	800a370 <USBD_Get_USB_Status>
 800a138:	4603      	mov	r3, r0
 800a13a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	460b      	mov	r3, r1
 800a150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a160:	78fa      	ldrb	r2, [r7, #3]
 800a162:	4611      	mov	r1, r2
 800a164:	4618      	mov	r0, r3
 800a166:	f7f9 fd82 	bl	8003c6e <HAL_PCD_EP_Close>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	4618      	mov	r0, r3
 800a172:	f000 f8fd 	bl	800a370 <USBD_Get_USB_Status>
 800a176:	4603      	mov	r3, r0
 800a178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a17a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a19e:	78fa      	ldrb	r2, [r7, #3]
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7f9 fe3a 	bl	8003e1c <HAL_PCD_EP_SetStall>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 f8de 	bl	800a370 <USBD_Get_USB_Status>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1dc:	78fa      	ldrb	r2, [r7, #3]
 800a1de:	4611      	mov	r1, r2
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7f9 fe7e 	bl	8003ee2 <HAL_PCD_EP_ClrStall>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 f8bf 	bl	800a370 <USBD_Get_USB_Status>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a212:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	da0b      	bge.n	800a234 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a222:	68f9      	ldr	r1, [r7, #12]
 800a224:	4613      	mov	r3, r2
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	4413      	add	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	440b      	add	r3, r1
 800a22e:	3316      	adds	r3, #22
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	e00b      	b.n	800a24c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a23a:	68f9      	ldr	r1, [r7, #12]
 800a23c:	4613      	mov	r3, r2
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	4413      	add	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	440b      	add	r3, r1
 800a246:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a24a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a272:	78fa      	ldrb	r2, [r7, #3]
 800a274:	4611      	mov	r1, r2
 800a276:	4618      	mov	r0, r3
 800a278:	f7f9 fc6b 	bl	8003b52 <HAL_PCD_SetAddress>
 800a27c:	4603      	mov	r3, r0
 800a27e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	4618      	mov	r0, r3
 800a284:	f000 f874 	bl	800a370 <USBD_Get_USB_Status>
 800a288:	4603      	mov	r3, r0
 800a28a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a28c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b086      	sub	sp, #24
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a2b4:	7af9      	ldrb	r1, [r7, #11]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	f7f9 fd75 	bl	8003da8 <HAL_PCD_EP_Transmit>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 f853 	bl	800a370 <USBD_Get_USB_Status>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2ce:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	607a      	str	r2, [r7, #4]
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a2f6:	7af9      	ldrb	r1, [r7, #11]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	f7f9 fd01 	bl	8003d02 <HAL_PCD_EP_Receive>
 800a300:	4603      	mov	r3, r0
 800a302:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a304:	7dfb      	ldrb	r3, [r7, #23]
 800a306:	4618      	mov	r0, r3
 800a308:	f000 f832 	bl	800a370 <USBD_Get_USB_Status>
 800a30c:	4603      	mov	r3, r0
 800a30e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a310:	7dbb      	ldrb	r3, [r7, #22]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a32c:	78fa      	ldrb	r2, [r7, #3]
 800a32e:	4611      	mov	r1, r2
 800a330:	4618      	mov	r0, r3
 800a332:	f7f9 fd21 	bl	8003d78 <HAL_PCD_EP_GetRxCount>
 800a336:	4603      	mov	r3, r0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a348:	4b03      	ldr	r3, [pc, #12]	@ (800a358 <USBD_static_malloc+0x18>)
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	20002278 	.word	0x20002278

0800a35c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]

}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	2b03      	cmp	r3, #3
 800a382:	d817      	bhi.n	800a3b4 <USBD_Get_USB_Status+0x44>
 800a384:	a201      	add	r2, pc, #4	@ (adr r2, 800a38c <USBD_Get_USB_Status+0x1c>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a39d 	.word	0x0800a39d
 800a390:	0800a3a3 	.word	0x0800a3a3
 800a394:	0800a3a9 	.word	0x0800a3a9
 800a398:	0800a3af 	.word	0x0800a3af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a0:	e00b      	b.n	800a3ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a6:	e008      	b.n	800a3ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ac:	e005      	b.n	800a3ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b2:	e002      	b.n	800a3ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b8:	bf00      	nop
  }
  return usb_status;
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <sulp>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	ec45 4b10 	vmov	d0, r4, r5
 800a3d2:	4616      	mov	r6, r2
 800a3d4:	f001 ff7c 	bl	800c2d0 <__ulp>
 800a3d8:	ec51 0b10 	vmov	r0, r1, d0
 800a3dc:	b17e      	cbz	r6, 800a3fe <sulp+0x36>
 800a3de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a3e2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	dd09      	ble.n	800a3fe <sulp+0x36>
 800a3ea:	051b      	lsls	r3, r3, #20
 800a3ec:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a3f0:	2400      	movs	r4, #0
 800a3f2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a3f6:	4622      	mov	r2, r4
 800a3f8:	462b      	mov	r3, r5
 800a3fa:	f7f6 f8fd 	bl	80005f8 <__aeabi_dmul>
 800a3fe:	ec41 0b10 	vmov	d0, r0, r1
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	0000      	movs	r0, r0
	...

0800a408 <_strtod_l>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	b09f      	sub	sp, #124	@ 0x7c
 800a40e:	460c      	mov	r4, r1
 800a410:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a412:	2200      	movs	r2, #0
 800a414:	921a      	str	r2, [sp, #104]	@ 0x68
 800a416:	9005      	str	r0, [sp, #20]
 800a418:	f04f 0a00 	mov.w	sl, #0
 800a41c:	f04f 0b00 	mov.w	fp, #0
 800a420:	460a      	mov	r2, r1
 800a422:	9219      	str	r2, [sp, #100]	@ 0x64
 800a424:	7811      	ldrb	r1, [r2, #0]
 800a426:	292b      	cmp	r1, #43	@ 0x2b
 800a428:	d04a      	beq.n	800a4c0 <_strtod_l+0xb8>
 800a42a:	d838      	bhi.n	800a49e <_strtod_l+0x96>
 800a42c:	290d      	cmp	r1, #13
 800a42e:	d832      	bhi.n	800a496 <_strtod_l+0x8e>
 800a430:	2908      	cmp	r1, #8
 800a432:	d832      	bhi.n	800a49a <_strtod_l+0x92>
 800a434:	2900      	cmp	r1, #0
 800a436:	d03b      	beq.n	800a4b0 <_strtod_l+0xa8>
 800a438:	2200      	movs	r2, #0
 800a43a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a43c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a43e:	782a      	ldrb	r2, [r5, #0]
 800a440:	2a30      	cmp	r2, #48	@ 0x30
 800a442:	f040 80b3 	bne.w	800a5ac <_strtod_l+0x1a4>
 800a446:	786a      	ldrb	r2, [r5, #1]
 800a448:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a44c:	2a58      	cmp	r2, #88	@ 0x58
 800a44e:	d16e      	bne.n	800a52e <_strtod_l+0x126>
 800a450:	9302      	str	r3, [sp, #8]
 800a452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	ab1a      	add	r3, sp, #104	@ 0x68
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	4a8e      	ldr	r2, [pc, #568]	@ (800a694 <_strtod_l+0x28c>)
 800a45c:	9805      	ldr	r0, [sp, #20]
 800a45e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a460:	a919      	add	r1, sp, #100	@ 0x64
 800a462:	f001 f82f 	bl	800b4c4 <__gethex>
 800a466:	f010 060f 	ands.w	r6, r0, #15
 800a46a:	4604      	mov	r4, r0
 800a46c:	d005      	beq.n	800a47a <_strtod_l+0x72>
 800a46e:	2e06      	cmp	r6, #6
 800a470:	d128      	bne.n	800a4c4 <_strtod_l+0xbc>
 800a472:	3501      	adds	r5, #1
 800a474:	2300      	movs	r3, #0
 800a476:	9519      	str	r5, [sp, #100]	@ 0x64
 800a478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a47a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f040 858e 	bne.w	800af9e <_strtod_l+0xb96>
 800a482:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a484:	b1cb      	cbz	r3, 800a4ba <_strtod_l+0xb2>
 800a486:	4652      	mov	r2, sl
 800a488:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a48c:	ec43 2b10 	vmov	d0, r2, r3
 800a490:	b01f      	add	sp, #124	@ 0x7c
 800a492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a496:	2920      	cmp	r1, #32
 800a498:	d1ce      	bne.n	800a438 <_strtod_l+0x30>
 800a49a:	3201      	adds	r2, #1
 800a49c:	e7c1      	b.n	800a422 <_strtod_l+0x1a>
 800a49e:	292d      	cmp	r1, #45	@ 0x2d
 800a4a0:	d1ca      	bne.n	800a438 <_strtod_l+0x30>
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a4a6:	1c51      	adds	r1, r2, #1
 800a4a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a4aa:	7852      	ldrb	r2, [r2, #1]
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	d1c5      	bne.n	800a43c <_strtod_l+0x34>
 800a4b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a4b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f040 8570 	bne.w	800af9a <_strtod_l+0xb92>
 800a4ba:	4652      	mov	r2, sl
 800a4bc:	465b      	mov	r3, fp
 800a4be:	e7e5      	b.n	800a48c <_strtod_l+0x84>
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	e7ef      	b.n	800a4a4 <_strtod_l+0x9c>
 800a4c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4c6:	b13a      	cbz	r2, 800a4d8 <_strtod_l+0xd0>
 800a4c8:	2135      	movs	r1, #53	@ 0x35
 800a4ca:	a81c      	add	r0, sp, #112	@ 0x70
 800a4cc:	f001 fffa 	bl	800c4c4 <__copybits>
 800a4d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4d2:	9805      	ldr	r0, [sp, #20]
 800a4d4:	f001 fbc8 	bl	800bc68 <_Bfree>
 800a4d8:	3e01      	subs	r6, #1
 800a4da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a4dc:	2e04      	cmp	r6, #4
 800a4de:	d806      	bhi.n	800a4ee <_strtod_l+0xe6>
 800a4e0:	e8df f006 	tbb	[pc, r6]
 800a4e4:	201d0314 	.word	0x201d0314
 800a4e8:	14          	.byte	0x14
 800a4e9:	00          	.byte	0x00
 800a4ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a4ee:	05e1      	lsls	r1, r4, #23
 800a4f0:	bf48      	it	mi
 800a4f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a4f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4fa:	0d1b      	lsrs	r3, r3, #20
 800a4fc:	051b      	lsls	r3, r3, #20
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1bb      	bne.n	800a47a <_strtod_l+0x72>
 800a502:	f000 fee9 	bl	800b2d8 <__errno>
 800a506:	2322      	movs	r3, #34	@ 0x22
 800a508:	6003      	str	r3, [r0, #0]
 800a50a:	e7b6      	b.n	800a47a <_strtod_l+0x72>
 800a50c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a510:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a514:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a518:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a51c:	e7e7      	b.n	800a4ee <_strtod_l+0xe6>
 800a51e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a69c <_strtod_l+0x294>
 800a522:	e7e4      	b.n	800a4ee <_strtod_l+0xe6>
 800a524:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a528:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a52c:	e7df      	b.n	800a4ee <_strtod_l+0xe6>
 800a52e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	9219      	str	r2, [sp, #100]	@ 0x64
 800a534:	785b      	ldrb	r3, [r3, #1]
 800a536:	2b30      	cmp	r3, #48	@ 0x30
 800a538:	d0f9      	beq.n	800a52e <_strtod_l+0x126>
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d09d      	beq.n	800a47a <_strtod_l+0x72>
 800a53e:	2301      	movs	r3, #1
 800a540:	9309      	str	r3, [sp, #36]	@ 0x24
 800a542:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a544:	930c      	str	r3, [sp, #48]	@ 0x30
 800a546:	2300      	movs	r3, #0
 800a548:	9308      	str	r3, [sp, #32]
 800a54a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a54c:	461f      	mov	r7, r3
 800a54e:	220a      	movs	r2, #10
 800a550:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a552:	7805      	ldrb	r5, [r0, #0]
 800a554:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a558:	b2d9      	uxtb	r1, r3
 800a55a:	2909      	cmp	r1, #9
 800a55c:	d928      	bls.n	800a5b0 <_strtod_l+0x1a8>
 800a55e:	494e      	ldr	r1, [pc, #312]	@ (800a698 <_strtod_l+0x290>)
 800a560:	2201      	movs	r2, #1
 800a562:	f000 fe4e 	bl	800b202 <strncmp>
 800a566:	2800      	cmp	r0, #0
 800a568:	d032      	beq.n	800a5d0 <_strtod_l+0x1c8>
 800a56a:	2000      	movs	r0, #0
 800a56c:	462a      	mov	r2, r5
 800a56e:	4681      	mov	r9, r0
 800a570:	463d      	mov	r5, r7
 800a572:	4603      	mov	r3, r0
 800a574:	2a65      	cmp	r2, #101	@ 0x65
 800a576:	d001      	beq.n	800a57c <_strtod_l+0x174>
 800a578:	2a45      	cmp	r2, #69	@ 0x45
 800a57a:	d114      	bne.n	800a5a6 <_strtod_l+0x19e>
 800a57c:	b91d      	cbnz	r5, 800a586 <_strtod_l+0x17e>
 800a57e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a580:	4302      	orrs	r2, r0
 800a582:	d095      	beq.n	800a4b0 <_strtod_l+0xa8>
 800a584:	2500      	movs	r5, #0
 800a586:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a588:	1c62      	adds	r2, r4, #1
 800a58a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a58c:	7862      	ldrb	r2, [r4, #1]
 800a58e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a590:	d077      	beq.n	800a682 <_strtod_l+0x27a>
 800a592:	2a2d      	cmp	r2, #45	@ 0x2d
 800a594:	d07b      	beq.n	800a68e <_strtod_l+0x286>
 800a596:	f04f 0c00 	mov.w	ip, #0
 800a59a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a59e:	2909      	cmp	r1, #9
 800a5a0:	f240 8082 	bls.w	800a6a8 <_strtod_l+0x2a0>
 800a5a4:	9419      	str	r4, [sp, #100]	@ 0x64
 800a5a6:	f04f 0800 	mov.w	r8, #0
 800a5aa:	e0a2      	b.n	800a6f2 <_strtod_l+0x2ea>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	e7c7      	b.n	800a540 <_strtod_l+0x138>
 800a5b0:	2f08      	cmp	r7, #8
 800a5b2:	bfd5      	itete	le
 800a5b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a5b6:	9908      	ldrgt	r1, [sp, #32]
 800a5b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a5c0:	f100 0001 	add.w	r0, r0, #1
 800a5c4:	bfd4      	ite	le
 800a5c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a5c8:	9308      	strgt	r3, [sp, #32]
 800a5ca:	3701      	adds	r7, #1
 800a5cc:	9019      	str	r0, [sp, #100]	@ 0x64
 800a5ce:	e7bf      	b.n	800a550 <_strtod_l+0x148>
 800a5d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5d6:	785a      	ldrb	r2, [r3, #1]
 800a5d8:	b37f      	cbz	r7, 800a63a <_strtod_l+0x232>
 800a5da:	4681      	mov	r9, r0
 800a5dc:	463d      	mov	r5, r7
 800a5de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a5e2:	2b09      	cmp	r3, #9
 800a5e4:	d912      	bls.n	800a60c <_strtod_l+0x204>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e7c4      	b.n	800a574 <_strtod_l+0x16c>
 800a5ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5ec:	1c5a      	adds	r2, r3, #1
 800a5ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5f0:	785a      	ldrb	r2, [r3, #1]
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	2a30      	cmp	r2, #48	@ 0x30
 800a5f6:	d0f8      	beq.n	800a5ea <_strtod_l+0x1e2>
 800a5f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a5fc:	2b08      	cmp	r3, #8
 800a5fe:	f200 84d3 	bhi.w	800afa8 <_strtod_l+0xba0>
 800a602:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a604:	930c      	str	r3, [sp, #48]	@ 0x30
 800a606:	4681      	mov	r9, r0
 800a608:	2000      	movs	r0, #0
 800a60a:	4605      	mov	r5, r0
 800a60c:	3a30      	subs	r2, #48	@ 0x30
 800a60e:	f100 0301 	add.w	r3, r0, #1
 800a612:	d02a      	beq.n	800a66a <_strtod_l+0x262>
 800a614:	4499      	add	r9, r3
 800a616:	eb00 0c05 	add.w	ip, r0, r5
 800a61a:	462b      	mov	r3, r5
 800a61c:	210a      	movs	r1, #10
 800a61e:	4563      	cmp	r3, ip
 800a620:	d10d      	bne.n	800a63e <_strtod_l+0x236>
 800a622:	1c69      	adds	r1, r5, #1
 800a624:	4401      	add	r1, r0
 800a626:	4428      	add	r0, r5
 800a628:	2808      	cmp	r0, #8
 800a62a:	dc16      	bgt.n	800a65a <_strtod_l+0x252>
 800a62c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a62e:	230a      	movs	r3, #10
 800a630:	fb03 2300 	mla	r3, r3, r0, r2
 800a634:	930a      	str	r3, [sp, #40]	@ 0x28
 800a636:	2300      	movs	r3, #0
 800a638:	e018      	b.n	800a66c <_strtod_l+0x264>
 800a63a:	4638      	mov	r0, r7
 800a63c:	e7da      	b.n	800a5f4 <_strtod_l+0x1ec>
 800a63e:	2b08      	cmp	r3, #8
 800a640:	f103 0301 	add.w	r3, r3, #1
 800a644:	dc03      	bgt.n	800a64e <_strtod_l+0x246>
 800a646:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a648:	434e      	muls	r6, r1
 800a64a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a64c:	e7e7      	b.n	800a61e <_strtod_l+0x216>
 800a64e:	2b10      	cmp	r3, #16
 800a650:	bfde      	ittt	le
 800a652:	9e08      	ldrle	r6, [sp, #32]
 800a654:	434e      	mulle	r6, r1
 800a656:	9608      	strle	r6, [sp, #32]
 800a658:	e7e1      	b.n	800a61e <_strtod_l+0x216>
 800a65a:	280f      	cmp	r0, #15
 800a65c:	dceb      	bgt.n	800a636 <_strtod_l+0x22e>
 800a65e:	9808      	ldr	r0, [sp, #32]
 800a660:	230a      	movs	r3, #10
 800a662:	fb03 2300 	mla	r3, r3, r0, r2
 800a666:	9308      	str	r3, [sp, #32]
 800a668:	e7e5      	b.n	800a636 <_strtod_l+0x22e>
 800a66a:	4629      	mov	r1, r5
 800a66c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a66e:	1c50      	adds	r0, r2, #1
 800a670:	9019      	str	r0, [sp, #100]	@ 0x64
 800a672:	7852      	ldrb	r2, [r2, #1]
 800a674:	4618      	mov	r0, r3
 800a676:	460d      	mov	r5, r1
 800a678:	e7b1      	b.n	800a5de <_strtod_l+0x1d6>
 800a67a:	f04f 0900 	mov.w	r9, #0
 800a67e:	2301      	movs	r3, #1
 800a680:	e77d      	b.n	800a57e <_strtod_l+0x176>
 800a682:	f04f 0c00 	mov.w	ip, #0
 800a686:	1ca2      	adds	r2, r4, #2
 800a688:	9219      	str	r2, [sp, #100]	@ 0x64
 800a68a:	78a2      	ldrb	r2, [r4, #2]
 800a68c:	e785      	b.n	800a59a <_strtod_l+0x192>
 800a68e:	f04f 0c01 	mov.w	ip, #1
 800a692:	e7f8      	b.n	800a686 <_strtod_l+0x27e>
 800a694:	0800d084 	.word	0x0800d084
 800a698:	0800d060 	.word	0x0800d060
 800a69c:	7ff00000 	.word	0x7ff00000
 800a6a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6a2:	1c51      	adds	r1, r2, #1
 800a6a4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a6a6:	7852      	ldrb	r2, [r2, #1]
 800a6a8:	2a30      	cmp	r2, #48	@ 0x30
 800a6aa:	d0f9      	beq.n	800a6a0 <_strtod_l+0x298>
 800a6ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a6b0:	2908      	cmp	r1, #8
 800a6b2:	f63f af78 	bhi.w	800a5a6 <_strtod_l+0x19e>
 800a6b6:	3a30      	subs	r2, #48	@ 0x30
 800a6b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a6be:	f04f 080a 	mov.w	r8, #10
 800a6c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6c4:	1c56      	adds	r6, r2, #1
 800a6c6:	9619      	str	r6, [sp, #100]	@ 0x64
 800a6c8:	7852      	ldrb	r2, [r2, #1]
 800a6ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a6ce:	f1be 0f09 	cmp.w	lr, #9
 800a6d2:	d939      	bls.n	800a748 <_strtod_l+0x340>
 800a6d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a6d6:	1a76      	subs	r6, r6, r1
 800a6d8:	2e08      	cmp	r6, #8
 800a6da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a6de:	dc03      	bgt.n	800a6e8 <_strtod_l+0x2e0>
 800a6e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a6e2:	4588      	cmp	r8, r1
 800a6e4:	bfa8      	it	ge
 800a6e6:	4688      	movge	r8, r1
 800a6e8:	f1bc 0f00 	cmp.w	ip, #0
 800a6ec:	d001      	beq.n	800a6f2 <_strtod_l+0x2ea>
 800a6ee:	f1c8 0800 	rsb	r8, r8, #0
 800a6f2:	2d00      	cmp	r5, #0
 800a6f4:	d14e      	bne.n	800a794 <_strtod_l+0x38c>
 800a6f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6f8:	4308      	orrs	r0, r1
 800a6fa:	f47f aebe 	bne.w	800a47a <_strtod_l+0x72>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f47f aed6 	bne.w	800a4b0 <_strtod_l+0xa8>
 800a704:	2a69      	cmp	r2, #105	@ 0x69
 800a706:	d028      	beq.n	800a75a <_strtod_l+0x352>
 800a708:	dc25      	bgt.n	800a756 <_strtod_l+0x34e>
 800a70a:	2a49      	cmp	r2, #73	@ 0x49
 800a70c:	d025      	beq.n	800a75a <_strtod_l+0x352>
 800a70e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a710:	f47f aece 	bne.w	800a4b0 <_strtod_l+0xa8>
 800a714:	499b      	ldr	r1, [pc, #620]	@ (800a984 <_strtod_l+0x57c>)
 800a716:	a819      	add	r0, sp, #100	@ 0x64
 800a718:	f001 f8f6 	bl	800b908 <__match>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f43f aec7 	beq.w	800a4b0 <_strtod_l+0xa8>
 800a722:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b28      	cmp	r3, #40	@ 0x28
 800a728:	d12e      	bne.n	800a788 <_strtod_l+0x380>
 800a72a:	4997      	ldr	r1, [pc, #604]	@ (800a988 <_strtod_l+0x580>)
 800a72c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a72e:	a819      	add	r0, sp, #100	@ 0x64
 800a730:	f001 f8fe 	bl	800b930 <__hexnan>
 800a734:	2805      	cmp	r0, #5
 800a736:	d127      	bne.n	800a788 <_strtod_l+0x380>
 800a738:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a73a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a73e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a742:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a746:	e698      	b.n	800a47a <_strtod_l+0x72>
 800a748:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a74a:	fb08 2101 	mla	r1, r8, r1, r2
 800a74e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a752:	920e      	str	r2, [sp, #56]	@ 0x38
 800a754:	e7b5      	b.n	800a6c2 <_strtod_l+0x2ba>
 800a756:	2a6e      	cmp	r2, #110	@ 0x6e
 800a758:	e7da      	b.n	800a710 <_strtod_l+0x308>
 800a75a:	498c      	ldr	r1, [pc, #560]	@ (800a98c <_strtod_l+0x584>)
 800a75c:	a819      	add	r0, sp, #100	@ 0x64
 800a75e:	f001 f8d3 	bl	800b908 <__match>
 800a762:	2800      	cmp	r0, #0
 800a764:	f43f aea4 	beq.w	800a4b0 <_strtod_l+0xa8>
 800a768:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a76a:	4989      	ldr	r1, [pc, #548]	@ (800a990 <_strtod_l+0x588>)
 800a76c:	3b01      	subs	r3, #1
 800a76e:	a819      	add	r0, sp, #100	@ 0x64
 800a770:	9319      	str	r3, [sp, #100]	@ 0x64
 800a772:	f001 f8c9 	bl	800b908 <__match>
 800a776:	b910      	cbnz	r0, 800a77e <_strtod_l+0x376>
 800a778:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a77a:	3301      	adds	r3, #1
 800a77c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a77e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a9a0 <_strtod_l+0x598>
 800a782:	f04f 0a00 	mov.w	sl, #0
 800a786:	e678      	b.n	800a47a <_strtod_l+0x72>
 800a788:	4882      	ldr	r0, [pc, #520]	@ (800a994 <_strtod_l+0x58c>)
 800a78a:	f000 fde1 	bl	800b350 <nan>
 800a78e:	ec5b ab10 	vmov	sl, fp, d0
 800a792:	e672      	b.n	800a47a <_strtod_l+0x72>
 800a794:	eba8 0309 	sub.w	r3, r8, r9
 800a798:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a79a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a79c:	2f00      	cmp	r7, #0
 800a79e:	bf08      	it	eq
 800a7a0:	462f      	moveq	r7, r5
 800a7a2:	2d10      	cmp	r5, #16
 800a7a4:	462c      	mov	r4, r5
 800a7a6:	bfa8      	it	ge
 800a7a8:	2410      	movge	r4, #16
 800a7aa:	f7f5 feab 	bl	8000504 <__aeabi_ui2d>
 800a7ae:	2d09      	cmp	r5, #9
 800a7b0:	4682      	mov	sl, r0
 800a7b2:	468b      	mov	fp, r1
 800a7b4:	dc13      	bgt.n	800a7de <_strtod_l+0x3d6>
 800a7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f43f ae5e 	beq.w	800a47a <_strtod_l+0x72>
 800a7be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c0:	dd78      	ble.n	800a8b4 <_strtod_l+0x4ac>
 800a7c2:	2b16      	cmp	r3, #22
 800a7c4:	dc5f      	bgt.n	800a886 <_strtod_l+0x47e>
 800a7c6:	4974      	ldr	r1, [pc, #464]	@ (800a998 <_strtod_l+0x590>)
 800a7c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a7cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7d0:	4652      	mov	r2, sl
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	f7f5 ff10 	bl	80005f8 <__aeabi_dmul>
 800a7d8:	4682      	mov	sl, r0
 800a7da:	468b      	mov	fp, r1
 800a7dc:	e64d      	b.n	800a47a <_strtod_l+0x72>
 800a7de:	4b6e      	ldr	r3, [pc, #440]	@ (800a998 <_strtod_l+0x590>)
 800a7e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a7e8:	f7f5 ff06 	bl	80005f8 <__aeabi_dmul>
 800a7ec:	4682      	mov	sl, r0
 800a7ee:	9808      	ldr	r0, [sp, #32]
 800a7f0:	468b      	mov	fp, r1
 800a7f2:	f7f5 fe87 	bl	8000504 <__aeabi_ui2d>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4650      	mov	r0, sl
 800a7fc:	4659      	mov	r1, fp
 800a7fe:	f7f5 fd45 	bl	800028c <__adddf3>
 800a802:	2d0f      	cmp	r5, #15
 800a804:	4682      	mov	sl, r0
 800a806:	468b      	mov	fp, r1
 800a808:	ddd5      	ble.n	800a7b6 <_strtod_l+0x3ae>
 800a80a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a80c:	1b2c      	subs	r4, r5, r4
 800a80e:	441c      	add	r4, r3
 800a810:	2c00      	cmp	r4, #0
 800a812:	f340 8096 	ble.w	800a942 <_strtod_l+0x53a>
 800a816:	f014 030f 	ands.w	r3, r4, #15
 800a81a:	d00a      	beq.n	800a832 <_strtod_l+0x42a>
 800a81c:	495e      	ldr	r1, [pc, #376]	@ (800a998 <_strtod_l+0x590>)
 800a81e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a822:	4652      	mov	r2, sl
 800a824:	465b      	mov	r3, fp
 800a826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a82a:	f7f5 fee5 	bl	80005f8 <__aeabi_dmul>
 800a82e:	4682      	mov	sl, r0
 800a830:	468b      	mov	fp, r1
 800a832:	f034 040f 	bics.w	r4, r4, #15
 800a836:	d073      	beq.n	800a920 <_strtod_l+0x518>
 800a838:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a83c:	dd48      	ble.n	800a8d0 <_strtod_l+0x4c8>
 800a83e:	2400      	movs	r4, #0
 800a840:	46a0      	mov	r8, r4
 800a842:	940a      	str	r4, [sp, #40]	@ 0x28
 800a844:	46a1      	mov	r9, r4
 800a846:	9a05      	ldr	r2, [sp, #20]
 800a848:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a9a0 <_strtod_l+0x598>
 800a84c:	2322      	movs	r3, #34	@ 0x22
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	f04f 0a00 	mov.w	sl, #0
 800a854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a856:	2b00      	cmp	r3, #0
 800a858:	f43f ae0f 	beq.w	800a47a <_strtod_l+0x72>
 800a85c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a85e:	9805      	ldr	r0, [sp, #20]
 800a860:	f001 fa02 	bl	800bc68 <_Bfree>
 800a864:	9805      	ldr	r0, [sp, #20]
 800a866:	4649      	mov	r1, r9
 800a868:	f001 f9fe 	bl	800bc68 <_Bfree>
 800a86c:	9805      	ldr	r0, [sp, #20]
 800a86e:	4641      	mov	r1, r8
 800a870:	f001 f9fa 	bl	800bc68 <_Bfree>
 800a874:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a876:	9805      	ldr	r0, [sp, #20]
 800a878:	f001 f9f6 	bl	800bc68 <_Bfree>
 800a87c:	9805      	ldr	r0, [sp, #20]
 800a87e:	4621      	mov	r1, r4
 800a880:	f001 f9f2 	bl	800bc68 <_Bfree>
 800a884:	e5f9      	b.n	800a47a <_strtod_l+0x72>
 800a886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a888:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a88c:	4293      	cmp	r3, r2
 800a88e:	dbbc      	blt.n	800a80a <_strtod_l+0x402>
 800a890:	4c41      	ldr	r4, [pc, #260]	@ (800a998 <_strtod_l+0x590>)
 800a892:	f1c5 050f 	rsb	r5, r5, #15
 800a896:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a89a:	4652      	mov	r2, sl
 800a89c:	465b      	mov	r3, fp
 800a89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a2:	f7f5 fea9 	bl	80005f8 <__aeabi_dmul>
 800a8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a8:	1b5d      	subs	r5, r3, r5
 800a8aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a8ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a8b2:	e78f      	b.n	800a7d4 <_strtod_l+0x3cc>
 800a8b4:	3316      	adds	r3, #22
 800a8b6:	dba8      	blt.n	800a80a <_strtod_l+0x402>
 800a8b8:	4b37      	ldr	r3, [pc, #220]	@ (800a998 <_strtod_l+0x590>)
 800a8ba:	eba9 0808 	sub.w	r8, r9, r8
 800a8be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a8c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a8c6:	4650      	mov	r0, sl
 800a8c8:	4659      	mov	r1, fp
 800a8ca:	f7f5 ffbf 	bl	800084c <__aeabi_ddiv>
 800a8ce:	e783      	b.n	800a7d8 <_strtod_l+0x3d0>
 800a8d0:	4b32      	ldr	r3, [pc, #200]	@ (800a99c <_strtod_l+0x594>)
 800a8d2:	9308      	str	r3, [sp, #32]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	1124      	asrs	r4, r4, #4
 800a8d8:	4650      	mov	r0, sl
 800a8da:	4659      	mov	r1, fp
 800a8dc:	461e      	mov	r6, r3
 800a8de:	2c01      	cmp	r4, #1
 800a8e0:	dc21      	bgt.n	800a926 <_strtod_l+0x51e>
 800a8e2:	b10b      	cbz	r3, 800a8e8 <_strtod_l+0x4e0>
 800a8e4:	4682      	mov	sl, r0
 800a8e6:	468b      	mov	fp, r1
 800a8e8:	492c      	ldr	r1, [pc, #176]	@ (800a99c <_strtod_l+0x594>)
 800a8ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a8ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a8f2:	4652      	mov	r2, sl
 800a8f4:	465b      	mov	r3, fp
 800a8f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8fa:	f7f5 fe7d 	bl	80005f8 <__aeabi_dmul>
 800a8fe:	4b28      	ldr	r3, [pc, #160]	@ (800a9a0 <_strtod_l+0x598>)
 800a900:	460a      	mov	r2, r1
 800a902:	400b      	ands	r3, r1
 800a904:	4927      	ldr	r1, [pc, #156]	@ (800a9a4 <_strtod_l+0x59c>)
 800a906:	428b      	cmp	r3, r1
 800a908:	4682      	mov	sl, r0
 800a90a:	d898      	bhi.n	800a83e <_strtod_l+0x436>
 800a90c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a910:	428b      	cmp	r3, r1
 800a912:	bf86      	itte	hi
 800a914:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a9a8 <_strtod_l+0x5a0>
 800a918:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a91c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a920:	2300      	movs	r3, #0
 800a922:	9308      	str	r3, [sp, #32]
 800a924:	e07a      	b.n	800aa1c <_strtod_l+0x614>
 800a926:	07e2      	lsls	r2, r4, #31
 800a928:	d505      	bpl.n	800a936 <_strtod_l+0x52e>
 800a92a:	9b08      	ldr	r3, [sp, #32]
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f7f5 fe62 	bl	80005f8 <__aeabi_dmul>
 800a934:	2301      	movs	r3, #1
 800a936:	9a08      	ldr	r2, [sp, #32]
 800a938:	3208      	adds	r2, #8
 800a93a:	3601      	adds	r6, #1
 800a93c:	1064      	asrs	r4, r4, #1
 800a93e:	9208      	str	r2, [sp, #32]
 800a940:	e7cd      	b.n	800a8de <_strtod_l+0x4d6>
 800a942:	d0ed      	beq.n	800a920 <_strtod_l+0x518>
 800a944:	4264      	negs	r4, r4
 800a946:	f014 020f 	ands.w	r2, r4, #15
 800a94a:	d00a      	beq.n	800a962 <_strtod_l+0x55a>
 800a94c:	4b12      	ldr	r3, [pc, #72]	@ (800a998 <_strtod_l+0x590>)
 800a94e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a952:	4650      	mov	r0, sl
 800a954:	4659      	mov	r1, fp
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 ff77 	bl	800084c <__aeabi_ddiv>
 800a95e:	4682      	mov	sl, r0
 800a960:	468b      	mov	fp, r1
 800a962:	1124      	asrs	r4, r4, #4
 800a964:	d0dc      	beq.n	800a920 <_strtod_l+0x518>
 800a966:	2c1f      	cmp	r4, #31
 800a968:	dd20      	ble.n	800a9ac <_strtod_l+0x5a4>
 800a96a:	2400      	movs	r4, #0
 800a96c:	46a0      	mov	r8, r4
 800a96e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a970:	46a1      	mov	r9, r4
 800a972:	9a05      	ldr	r2, [sp, #20]
 800a974:	2322      	movs	r3, #34	@ 0x22
 800a976:	f04f 0a00 	mov.w	sl, #0
 800a97a:	f04f 0b00 	mov.w	fp, #0
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	e768      	b.n	800a854 <_strtod_l+0x44c>
 800a982:	bf00      	nop
 800a984:	0800d06b 	.word	0x0800d06b
 800a988:	0800d070 	.word	0x0800d070
 800a98c:	0800d062 	.word	0x0800d062
 800a990:	0800d065 	.word	0x0800d065
 800a994:	0800d3e4 	.word	0x0800d3e4
 800a998:	0800d1e0 	.word	0x0800d1e0
 800a99c:	0800d1b8 	.word	0x0800d1b8
 800a9a0:	7ff00000 	.word	0x7ff00000
 800a9a4:	7ca00000 	.word	0x7ca00000
 800a9a8:	7fefffff 	.word	0x7fefffff
 800a9ac:	f014 0310 	ands.w	r3, r4, #16
 800a9b0:	bf18      	it	ne
 800a9b2:	236a      	movne	r3, #106	@ 0x6a
 800a9b4:	4ea9      	ldr	r6, [pc, #676]	@ (800ac5c <_strtod_l+0x854>)
 800a9b6:	9308      	str	r3, [sp, #32]
 800a9b8:	4650      	mov	r0, sl
 800a9ba:	4659      	mov	r1, fp
 800a9bc:	2300      	movs	r3, #0
 800a9be:	07e2      	lsls	r2, r4, #31
 800a9c0:	d504      	bpl.n	800a9cc <_strtod_l+0x5c4>
 800a9c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9c6:	f7f5 fe17 	bl	80005f8 <__aeabi_dmul>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	1064      	asrs	r4, r4, #1
 800a9ce:	f106 0608 	add.w	r6, r6, #8
 800a9d2:	d1f4      	bne.n	800a9be <_strtod_l+0x5b6>
 800a9d4:	b10b      	cbz	r3, 800a9da <_strtod_l+0x5d2>
 800a9d6:	4682      	mov	sl, r0
 800a9d8:	468b      	mov	fp, r1
 800a9da:	9b08      	ldr	r3, [sp, #32]
 800a9dc:	b1b3      	cbz	r3, 800aa0c <_strtod_l+0x604>
 800a9de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a9e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	4659      	mov	r1, fp
 800a9ea:	dd0f      	ble.n	800aa0c <_strtod_l+0x604>
 800a9ec:	2b1f      	cmp	r3, #31
 800a9ee:	dd55      	ble.n	800aa9c <_strtod_l+0x694>
 800a9f0:	2b34      	cmp	r3, #52	@ 0x34
 800a9f2:	bfde      	ittt	le
 800a9f4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a9f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a9fc:	4093      	lslle	r3, r2
 800a9fe:	f04f 0a00 	mov.w	sl, #0
 800aa02:	bfcc      	ite	gt
 800aa04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aa08:	ea03 0b01 	andle.w	fp, r3, r1
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2300      	movs	r3, #0
 800aa10:	4650      	mov	r0, sl
 800aa12:	4659      	mov	r1, fp
 800aa14:	f7f6 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d1a6      	bne.n	800a96a <_strtod_l+0x562>
 800aa1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aa22:	9805      	ldr	r0, [sp, #20]
 800aa24:	462b      	mov	r3, r5
 800aa26:	463a      	mov	r2, r7
 800aa28:	f001 f986 	bl	800bd38 <__s2b>
 800aa2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	f43f af05 	beq.w	800a83e <_strtod_l+0x436>
 800aa34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa36:	2a00      	cmp	r2, #0
 800aa38:	eba9 0308 	sub.w	r3, r9, r8
 800aa3c:	bfa8      	it	ge
 800aa3e:	2300      	movge	r3, #0
 800aa40:	9312      	str	r3, [sp, #72]	@ 0x48
 800aa42:	2400      	movs	r4, #0
 800aa44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa48:	9316      	str	r3, [sp, #88]	@ 0x58
 800aa4a:	46a0      	mov	r8, r4
 800aa4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa4e:	9805      	ldr	r0, [sp, #20]
 800aa50:	6859      	ldr	r1, [r3, #4]
 800aa52:	f001 f8c9 	bl	800bbe8 <_Balloc>
 800aa56:	4681      	mov	r9, r0
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	f43f aef4 	beq.w	800a846 <_strtod_l+0x43e>
 800aa5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa60:	691a      	ldr	r2, [r3, #16]
 800aa62:	3202      	adds	r2, #2
 800aa64:	f103 010c 	add.w	r1, r3, #12
 800aa68:	0092      	lsls	r2, r2, #2
 800aa6a:	300c      	adds	r0, #12
 800aa6c:	f000 fc61 	bl	800b332 <memcpy>
 800aa70:	ec4b ab10 	vmov	d0, sl, fp
 800aa74:	9805      	ldr	r0, [sp, #20]
 800aa76:	aa1c      	add	r2, sp, #112	@ 0x70
 800aa78:	a91b      	add	r1, sp, #108	@ 0x6c
 800aa7a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aa7e:	f001 fc97 	bl	800c3b0 <__d2b>
 800aa82:	901a      	str	r0, [sp, #104]	@ 0x68
 800aa84:	2800      	cmp	r0, #0
 800aa86:	f43f aede 	beq.w	800a846 <_strtod_l+0x43e>
 800aa8a:	9805      	ldr	r0, [sp, #20]
 800aa8c:	2101      	movs	r1, #1
 800aa8e:	f001 f9e9 	bl	800be64 <__i2b>
 800aa92:	4680      	mov	r8, r0
 800aa94:	b948      	cbnz	r0, 800aaaa <_strtod_l+0x6a2>
 800aa96:	f04f 0800 	mov.w	r8, #0
 800aa9a:	e6d4      	b.n	800a846 <_strtod_l+0x43e>
 800aa9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aaa0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa4:	ea03 0a0a 	and.w	sl, r3, sl
 800aaa8:	e7b0      	b.n	800aa0c <_strtod_l+0x604>
 800aaaa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aaac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aaae:	2d00      	cmp	r5, #0
 800aab0:	bfab      	itete	ge
 800aab2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aab4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aab6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aab8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aaba:	bfac      	ite	ge
 800aabc:	18ef      	addge	r7, r5, r3
 800aabe:	1b5e      	sublt	r6, r3, r5
 800aac0:	9b08      	ldr	r3, [sp, #32]
 800aac2:	1aed      	subs	r5, r5, r3
 800aac4:	4415      	add	r5, r2
 800aac6:	4b66      	ldr	r3, [pc, #408]	@ (800ac60 <_strtod_l+0x858>)
 800aac8:	3d01      	subs	r5, #1
 800aaca:	429d      	cmp	r5, r3
 800aacc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aad0:	da50      	bge.n	800ab74 <_strtod_l+0x76c>
 800aad2:	1b5b      	subs	r3, r3, r5
 800aad4:	2b1f      	cmp	r3, #31
 800aad6:	eba2 0203 	sub.w	r2, r2, r3
 800aada:	f04f 0101 	mov.w	r1, #1
 800aade:	dc3d      	bgt.n	800ab5c <_strtod_l+0x754>
 800aae0:	fa01 f303 	lsl.w	r3, r1, r3
 800aae4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aae6:	2300      	movs	r3, #0
 800aae8:	9310      	str	r3, [sp, #64]	@ 0x40
 800aaea:	18bd      	adds	r5, r7, r2
 800aaec:	9b08      	ldr	r3, [sp, #32]
 800aaee:	42af      	cmp	r7, r5
 800aaf0:	4416      	add	r6, r2
 800aaf2:	441e      	add	r6, r3
 800aaf4:	463b      	mov	r3, r7
 800aaf6:	bfa8      	it	ge
 800aaf8:	462b      	movge	r3, r5
 800aafa:	42b3      	cmp	r3, r6
 800aafc:	bfa8      	it	ge
 800aafe:	4633      	movge	r3, r6
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	bfc2      	ittt	gt
 800ab04:	1aed      	subgt	r5, r5, r3
 800ab06:	1af6      	subgt	r6, r6, r3
 800ab08:	1aff      	subgt	r7, r7, r3
 800ab0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	dd16      	ble.n	800ab3e <_strtod_l+0x736>
 800ab10:	4641      	mov	r1, r8
 800ab12:	9805      	ldr	r0, [sp, #20]
 800ab14:	461a      	mov	r2, r3
 800ab16:	f001 fa65 	bl	800bfe4 <__pow5mult>
 800ab1a:	4680      	mov	r8, r0
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d0ba      	beq.n	800aa96 <_strtod_l+0x68e>
 800ab20:	4601      	mov	r1, r0
 800ab22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab24:	9805      	ldr	r0, [sp, #20]
 800ab26:	f001 f9b3 	bl	800be90 <__multiply>
 800ab2a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	f43f ae8a 	beq.w	800a846 <_strtod_l+0x43e>
 800ab32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab34:	9805      	ldr	r0, [sp, #20]
 800ab36:	f001 f897 	bl	800bc68 <_Bfree>
 800ab3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab3e:	2d00      	cmp	r5, #0
 800ab40:	dc1d      	bgt.n	800ab7e <_strtod_l+0x776>
 800ab42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dd23      	ble.n	800ab90 <_strtod_l+0x788>
 800ab48:	4649      	mov	r1, r9
 800ab4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ab4c:	9805      	ldr	r0, [sp, #20]
 800ab4e:	f001 fa49 	bl	800bfe4 <__pow5mult>
 800ab52:	4681      	mov	r9, r0
 800ab54:	b9e0      	cbnz	r0, 800ab90 <_strtod_l+0x788>
 800ab56:	f04f 0900 	mov.w	r9, #0
 800ab5a:	e674      	b.n	800a846 <_strtod_l+0x43e>
 800ab5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ab60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ab64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ab68:	35e2      	adds	r5, #226	@ 0xe2
 800ab6a:	fa01 f305 	lsl.w	r3, r1, r5
 800ab6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab70:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ab72:	e7ba      	b.n	800aaea <_strtod_l+0x6e2>
 800ab74:	2300      	movs	r3, #0
 800ab76:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab78:	2301      	movs	r3, #1
 800ab7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab7c:	e7b5      	b.n	800aaea <_strtod_l+0x6e2>
 800ab7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab80:	9805      	ldr	r0, [sp, #20]
 800ab82:	462a      	mov	r2, r5
 800ab84:	f001 fa88 	bl	800c098 <__lshift>
 800ab88:	901a      	str	r0, [sp, #104]	@ 0x68
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	d1d9      	bne.n	800ab42 <_strtod_l+0x73a>
 800ab8e:	e65a      	b.n	800a846 <_strtod_l+0x43e>
 800ab90:	2e00      	cmp	r6, #0
 800ab92:	dd07      	ble.n	800aba4 <_strtod_l+0x79c>
 800ab94:	4649      	mov	r1, r9
 800ab96:	9805      	ldr	r0, [sp, #20]
 800ab98:	4632      	mov	r2, r6
 800ab9a:	f001 fa7d 	bl	800c098 <__lshift>
 800ab9e:	4681      	mov	r9, r0
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d0d8      	beq.n	800ab56 <_strtod_l+0x74e>
 800aba4:	2f00      	cmp	r7, #0
 800aba6:	dd08      	ble.n	800abba <_strtod_l+0x7b2>
 800aba8:	4641      	mov	r1, r8
 800abaa:	9805      	ldr	r0, [sp, #20]
 800abac:	463a      	mov	r2, r7
 800abae:	f001 fa73 	bl	800c098 <__lshift>
 800abb2:	4680      	mov	r8, r0
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f43f ae46 	beq.w	800a846 <_strtod_l+0x43e>
 800abba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abbc:	9805      	ldr	r0, [sp, #20]
 800abbe:	464a      	mov	r2, r9
 800abc0:	f001 faf2 	bl	800c1a8 <__mdiff>
 800abc4:	4604      	mov	r4, r0
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f43f ae3d 	beq.w	800a846 <_strtod_l+0x43e>
 800abcc:	68c3      	ldr	r3, [r0, #12]
 800abce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abd0:	2300      	movs	r3, #0
 800abd2:	60c3      	str	r3, [r0, #12]
 800abd4:	4641      	mov	r1, r8
 800abd6:	f001 facb 	bl	800c170 <__mcmp>
 800abda:	2800      	cmp	r0, #0
 800abdc:	da46      	bge.n	800ac6c <_strtod_l+0x864>
 800abde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abe0:	ea53 030a 	orrs.w	r3, r3, sl
 800abe4:	d16c      	bne.n	800acc0 <_strtod_l+0x8b8>
 800abe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abea:	2b00      	cmp	r3, #0
 800abec:	d168      	bne.n	800acc0 <_strtod_l+0x8b8>
 800abee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abf2:	0d1b      	lsrs	r3, r3, #20
 800abf4:	051b      	lsls	r3, r3, #20
 800abf6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800abfa:	d961      	bls.n	800acc0 <_strtod_l+0x8b8>
 800abfc:	6963      	ldr	r3, [r4, #20]
 800abfe:	b913      	cbnz	r3, 800ac06 <_strtod_l+0x7fe>
 800ac00:	6923      	ldr	r3, [r4, #16]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	dd5c      	ble.n	800acc0 <_strtod_l+0x8b8>
 800ac06:	4621      	mov	r1, r4
 800ac08:	2201      	movs	r2, #1
 800ac0a:	9805      	ldr	r0, [sp, #20]
 800ac0c:	f001 fa44 	bl	800c098 <__lshift>
 800ac10:	4641      	mov	r1, r8
 800ac12:	4604      	mov	r4, r0
 800ac14:	f001 faac 	bl	800c170 <__mcmp>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	dd51      	ble.n	800acc0 <_strtod_l+0x8b8>
 800ac1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac20:	9a08      	ldr	r2, [sp, #32]
 800ac22:	0d1b      	lsrs	r3, r3, #20
 800ac24:	051b      	lsls	r3, r3, #20
 800ac26:	2a00      	cmp	r2, #0
 800ac28:	d06b      	beq.n	800ad02 <_strtod_l+0x8fa>
 800ac2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac2e:	d868      	bhi.n	800ad02 <_strtod_l+0x8fa>
 800ac30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ac34:	f67f ae9d 	bls.w	800a972 <_strtod_l+0x56a>
 800ac38:	4b0a      	ldr	r3, [pc, #40]	@ (800ac64 <_strtod_l+0x85c>)
 800ac3a:	4650      	mov	r0, sl
 800ac3c:	4659      	mov	r1, fp
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f7f5 fcda 	bl	80005f8 <__aeabi_dmul>
 800ac44:	4b08      	ldr	r3, [pc, #32]	@ (800ac68 <_strtod_l+0x860>)
 800ac46:	400b      	ands	r3, r1
 800ac48:	4682      	mov	sl, r0
 800ac4a:	468b      	mov	fp, r1
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f47f ae05 	bne.w	800a85c <_strtod_l+0x454>
 800ac52:	9a05      	ldr	r2, [sp, #20]
 800ac54:	2322      	movs	r3, #34	@ 0x22
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	e600      	b.n	800a85c <_strtod_l+0x454>
 800ac5a:	bf00      	nop
 800ac5c:	0800d098 	.word	0x0800d098
 800ac60:	fffffc02 	.word	0xfffffc02
 800ac64:	39500000 	.word	0x39500000
 800ac68:	7ff00000 	.word	0x7ff00000
 800ac6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ac70:	d165      	bne.n	800ad3e <_strtod_l+0x936>
 800ac72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ac74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac78:	b35a      	cbz	r2, 800acd2 <_strtod_l+0x8ca>
 800ac7a:	4a9f      	ldr	r2, [pc, #636]	@ (800aef8 <_strtod_l+0xaf0>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d12b      	bne.n	800acd8 <_strtod_l+0x8d0>
 800ac80:	9b08      	ldr	r3, [sp, #32]
 800ac82:	4651      	mov	r1, sl
 800ac84:	b303      	cbz	r3, 800acc8 <_strtod_l+0x8c0>
 800ac86:	4b9d      	ldr	r3, [pc, #628]	@ (800aefc <_strtod_l+0xaf4>)
 800ac88:	465a      	mov	r2, fp
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ac90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac94:	d81b      	bhi.n	800acce <_strtod_l+0x8c6>
 800ac96:	0d1b      	lsrs	r3, r3, #20
 800ac98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aca0:	4299      	cmp	r1, r3
 800aca2:	d119      	bne.n	800acd8 <_strtod_l+0x8d0>
 800aca4:	4b96      	ldr	r3, [pc, #600]	@ (800af00 <_strtod_l+0xaf8>)
 800aca6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d102      	bne.n	800acb2 <_strtod_l+0x8aa>
 800acac:	3101      	adds	r1, #1
 800acae:	f43f adca 	beq.w	800a846 <_strtod_l+0x43e>
 800acb2:	4b92      	ldr	r3, [pc, #584]	@ (800aefc <_strtod_l+0xaf4>)
 800acb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acb6:	401a      	ands	r2, r3
 800acb8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800acbc:	f04f 0a00 	mov.w	sl, #0
 800acc0:	9b08      	ldr	r3, [sp, #32]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1b8      	bne.n	800ac38 <_strtod_l+0x830>
 800acc6:	e5c9      	b.n	800a85c <_strtod_l+0x454>
 800acc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800accc:	e7e8      	b.n	800aca0 <_strtod_l+0x898>
 800acce:	4613      	mov	r3, r2
 800acd0:	e7e6      	b.n	800aca0 <_strtod_l+0x898>
 800acd2:	ea53 030a 	orrs.w	r3, r3, sl
 800acd6:	d0a1      	beq.n	800ac1c <_strtod_l+0x814>
 800acd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800acda:	b1db      	cbz	r3, 800ad14 <_strtod_l+0x90c>
 800acdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acde:	4213      	tst	r3, r2
 800ace0:	d0ee      	beq.n	800acc0 <_strtod_l+0x8b8>
 800ace2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ace4:	9a08      	ldr	r2, [sp, #32]
 800ace6:	4650      	mov	r0, sl
 800ace8:	4659      	mov	r1, fp
 800acea:	b1bb      	cbz	r3, 800ad1c <_strtod_l+0x914>
 800acec:	f7ff fb6c 	bl	800a3c8 <sulp>
 800acf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acf4:	ec53 2b10 	vmov	r2, r3, d0
 800acf8:	f7f5 fac8 	bl	800028c <__adddf3>
 800acfc:	4682      	mov	sl, r0
 800acfe:	468b      	mov	fp, r1
 800ad00:	e7de      	b.n	800acc0 <_strtod_l+0x8b8>
 800ad02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ad06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad0e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ad12:	e7d5      	b.n	800acc0 <_strtod_l+0x8b8>
 800ad14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad16:	ea13 0f0a 	tst.w	r3, sl
 800ad1a:	e7e1      	b.n	800ace0 <_strtod_l+0x8d8>
 800ad1c:	f7ff fb54 	bl	800a3c8 <sulp>
 800ad20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad24:	ec53 2b10 	vmov	r2, r3, d0
 800ad28:	f7f5 faae 	bl	8000288 <__aeabi_dsub>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	4682      	mov	sl, r0
 800ad32:	468b      	mov	fp, r1
 800ad34:	f7f5 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d0c1      	beq.n	800acc0 <_strtod_l+0x8b8>
 800ad3c:	e619      	b.n	800a972 <_strtod_l+0x56a>
 800ad3e:	4641      	mov	r1, r8
 800ad40:	4620      	mov	r0, r4
 800ad42:	f001 fb8d 	bl	800c460 <__ratio>
 800ad46:	ec57 6b10 	vmov	r6, r7, d0
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ad50:	4630      	mov	r0, r6
 800ad52:	4639      	mov	r1, r7
 800ad54:	f7f5 fecc 	bl	8000af0 <__aeabi_dcmple>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d06f      	beq.n	800ae3c <_strtod_l+0xa34>
 800ad5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d17a      	bne.n	800ae58 <_strtod_l+0xa50>
 800ad62:	f1ba 0f00 	cmp.w	sl, #0
 800ad66:	d158      	bne.n	800ae1a <_strtod_l+0xa12>
 800ad68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d15a      	bne.n	800ae28 <_strtod_l+0xa20>
 800ad72:	4b64      	ldr	r3, [pc, #400]	@ (800af04 <_strtod_l+0xafc>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	4630      	mov	r0, r6
 800ad78:	4639      	mov	r1, r7
 800ad7a:	f7f5 feaf 	bl	8000adc <__aeabi_dcmplt>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d159      	bne.n	800ae36 <_strtod_l+0xa2e>
 800ad82:	4630      	mov	r0, r6
 800ad84:	4639      	mov	r1, r7
 800ad86:	4b60      	ldr	r3, [pc, #384]	@ (800af08 <_strtod_l+0xb00>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f7f5 fc35 	bl	80005f8 <__aeabi_dmul>
 800ad8e:	4606      	mov	r6, r0
 800ad90:	460f      	mov	r7, r1
 800ad92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ad96:	9606      	str	r6, [sp, #24]
 800ad98:	9307      	str	r3, [sp, #28]
 800ad9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad9e:	4d57      	ldr	r5, [pc, #348]	@ (800aefc <_strtod_l+0xaf4>)
 800ada0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ada4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ada6:	401d      	ands	r5, r3
 800ada8:	4b58      	ldr	r3, [pc, #352]	@ (800af0c <_strtod_l+0xb04>)
 800adaa:	429d      	cmp	r5, r3
 800adac:	f040 80b2 	bne.w	800af14 <_strtod_l+0xb0c>
 800adb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800adb6:	ec4b ab10 	vmov	d0, sl, fp
 800adba:	f001 fa89 	bl	800c2d0 <__ulp>
 800adbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adc2:	ec51 0b10 	vmov	r0, r1, d0
 800adc6:	f7f5 fc17 	bl	80005f8 <__aeabi_dmul>
 800adca:	4652      	mov	r2, sl
 800adcc:	465b      	mov	r3, fp
 800adce:	f7f5 fa5d 	bl	800028c <__adddf3>
 800add2:	460b      	mov	r3, r1
 800add4:	4949      	ldr	r1, [pc, #292]	@ (800aefc <_strtod_l+0xaf4>)
 800add6:	4a4e      	ldr	r2, [pc, #312]	@ (800af10 <_strtod_l+0xb08>)
 800add8:	4019      	ands	r1, r3
 800adda:	4291      	cmp	r1, r2
 800addc:	4682      	mov	sl, r0
 800adde:	d942      	bls.n	800ae66 <_strtod_l+0xa5e>
 800ade0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ade2:	4b47      	ldr	r3, [pc, #284]	@ (800af00 <_strtod_l+0xaf8>)
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d103      	bne.n	800adf0 <_strtod_l+0x9e8>
 800ade8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800adea:	3301      	adds	r3, #1
 800adec:	f43f ad2b 	beq.w	800a846 <_strtod_l+0x43e>
 800adf0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800af00 <_strtod_l+0xaf8>
 800adf4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800adf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adfa:	9805      	ldr	r0, [sp, #20]
 800adfc:	f000 ff34 	bl	800bc68 <_Bfree>
 800ae00:	9805      	ldr	r0, [sp, #20]
 800ae02:	4649      	mov	r1, r9
 800ae04:	f000 ff30 	bl	800bc68 <_Bfree>
 800ae08:	9805      	ldr	r0, [sp, #20]
 800ae0a:	4641      	mov	r1, r8
 800ae0c:	f000 ff2c 	bl	800bc68 <_Bfree>
 800ae10:	9805      	ldr	r0, [sp, #20]
 800ae12:	4621      	mov	r1, r4
 800ae14:	f000 ff28 	bl	800bc68 <_Bfree>
 800ae18:	e618      	b.n	800aa4c <_strtod_l+0x644>
 800ae1a:	f1ba 0f01 	cmp.w	sl, #1
 800ae1e:	d103      	bne.n	800ae28 <_strtod_l+0xa20>
 800ae20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f43f ada5 	beq.w	800a972 <_strtod_l+0x56a>
 800ae28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aed8 <_strtod_l+0xad0>
 800ae2c:	4f35      	ldr	r7, [pc, #212]	@ (800af04 <_strtod_l+0xafc>)
 800ae2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae32:	2600      	movs	r6, #0
 800ae34:	e7b1      	b.n	800ad9a <_strtod_l+0x992>
 800ae36:	4f34      	ldr	r7, [pc, #208]	@ (800af08 <_strtod_l+0xb00>)
 800ae38:	2600      	movs	r6, #0
 800ae3a:	e7aa      	b.n	800ad92 <_strtod_l+0x98a>
 800ae3c:	4b32      	ldr	r3, [pc, #200]	@ (800af08 <_strtod_l+0xb00>)
 800ae3e:	4630      	mov	r0, r6
 800ae40:	4639      	mov	r1, r7
 800ae42:	2200      	movs	r2, #0
 800ae44:	f7f5 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ae48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460f      	mov	r7, r1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d09f      	beq.n	800ad92 <_strtod_l+0x98a>
 800ae52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ae56:	e7a0      	b.n	800ad9a <_strtod_l+0x992>
 800ae58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aee0 <_strtod_l+0xad8>
 800ae5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae60:	ec57 6b17 	vmov	r6, r7, d7
 800ae64:	e799      	b.n	800ad9a <_strtod_l+0x992>
 800ae66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ae6a:	9b08      	ldr	r3, [sp, #32]
 800ae6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1c1      	bne.n	800adf8 <_strtod_l+0x9f0>
 800ae74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae78:	0d1b      	lsrs	r3, r3, #20
 800ae7a:	051b      	lsls	r3, r3, #20
 800ae7c:	429d      	cmp	r5, r3
 800ae7e:	d1bb      	bne.n	800adf8 <_strtod_l+0x9f0>
 800ae80:	4630      	mov	r0, r6
 800ae82:	4639      	mov	r1, r7
 800ae84:	f7f5 fe8a 	bl	8000b9c <__aeabi_d2lz>
 800ae88:	f7f5 fb88 	bl	800059c <__aeabi_l2d>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4630      	mov	r0, r6
 800ae92:	4639      	mov	r1, r7
 800ae94:	f7f5 f9f8 	bl	8000288 <__aeabi_dsub>
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aea0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800aea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aea6:	ea46 060a 	orr.w	r6, r6, sl
 800aeaa:	431e      	orrs	r6, r3
 800aeac:	d06f      	beq.n	800af8e <_strtod_l+0xb86>
 800aeae:	a30e      	add	r3, pc, #56	@ (adr r3, 800aee8 <_strtod_l+0xae0>)
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f7f5 fe12 	bl	8000adc <__aeabi_dcmplt>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	f47f accf 	bne.w	800a85c <_strtod_l+0x454>
 800aebe:	a30c      	add	r3, pc, #48	@ (adr r3, 800aef0 <_strtod_l+0xae8>)
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aec8:	f7f5 fe26 	bl	8000b18 <__aeabi_dcmpgt>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d093      	beq.n	800adf8 <_strtod_l+0x9f0>
 800aed0:	e4c4      	b.n	800a85c <_strtod_l+0x454>
 800aed2:	bf00      	nop
 800aed4:	f3af 8000 	nop.w
 800aed8:	00000000 	.word	0x00000000
 800aedc:	bff00000 	.word	0xbff00000
 800aee0:	00000000 	.word	0x00000000
 800aee4:	3ff00000 	.word	0x3ff00000
 800aee8:	94a03595 	.word	0x94a03595
 800aeec:	3fdfffff 	.word	0x3fdfffff
 800aef0:	35afe535 	.word	0x35afe535
 800aef4:	3fe00000 	.word	0x3fe00000
 800aef8:	000fffff 	.word	0x000fffff
 800aefc:	7ff00000 	.word	0x7ff00000
 800af00:	7fefffff 	.word	0x7fefffff
 800af04:	3ff00000 	.word	0x3ff00000
 800af08:	3fe00000 	.word	0x3fe00000
 800af0c:	7fe00000 	.word	0x7fe00000
 800af10:	7c9fffff 	.word	0x7c9fffff
 800af14:	9b08      	ldr	r3, [sp, #32]
 800af16:	b323      	cbz	r3, 800af62 <_strtod_l+0xb5a>
 800af18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800af1c:	d821      	bhi.n	800af62 <_strtod_l+0xb5a>
 800af1e:	a328      	add	r3, pc, #160	@ (adr r3, 800afc0 <_strtod_l+0xbb8>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	4630      	mov	r0, r6
 800af26:	4639      	mov	r1, r7
 800af28:	f7f5 fde2 	bl	8000af0 <__aeabi_dcmple>
 800af2c:	b1a0      	cbz	r0, 800af58 <_strtod_l+0xb50>
 800af2e:	4639      	mov	r1, r7
 800af30:	4630      	mov	r0, r6
 800af32:	f7f5 fdfb 	bl	8000b2c <__aeabi_d2uiz>
 800af36:	2801      	cmp	r0, #1
 800af38:	bf38      	it	cc
 800af3a:	2001      	movcc	r0, #1
 800af3c:	f7f5 fae2 	bl	8000504 <__aeabi_ui2d>
 800af40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af42:	4606      	mov	r6, r0
 800af44:	460f      	mov	r7, r1
 800af46:	b9fb      	cbnz	r3, 800af88 <_strtod_l+0xb80>
 800af48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af4c:	9014      	str	r0, [sp, #80]	@ 0x50
 800af4e:	9315      	str	r3, [sp, #84]	@ 0x54
 800af50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800af54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800af58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800af5e:	1b5b      	subs	r3, r3, r5
 800af60:	9311      	str	r3, [sp, #68]	@ 0x44
 800af62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800af66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800af6a:	f001 f9b1 	bl	800c2d0 <__ulp>
 800af6e:	4650      	mov	r0, sl
 800af70:	ec53 2b10 	vmov	r2, r3, d0
 800af74:	4659      	mov	r1, fp
 800af76:	f7f5 fb3f 	bl	80005f8 <__aeabi_dmul>
 800af7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800af7e:	f7f5 f985 	bl	800028c <__adddf3>
 800af82:	4682      	mov	sl, r0
 800af84:	468b      	mov	fp, r1
 800af86:	e770      	b.n	800ae6a <_strtod_l+0xa62>
 800af88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800af8c:	e7e0      	b.n	800af50 <_strtod_l+0xb48>
 800af8e:	a30e      	add	r3, pc, #56	@ (adr r3, 800afc8 <_strtod_l+0xbc0>)
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	f7f5 fda2 	bl	8000adc <__aeabi_dcmplt>
 800af98:	e798      	b.n	800aecc <_strtod_l+0xac4>
 800af9a:	2300      	movs	r3, #0
 800af9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800afa0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afa2:	6013      	str	r3, [r2, #0]
 800afa4:	f7ff ba6d 	b.w	800a482 <_strtod_l+0x7a>
 800afa8:	2a65      	cmp	r2, #101	@ 0x65
 800afaa:	f43f ab66 	beq.w	800a67a <_strtod_l+0x272>
 800afae:	2a45      	cmp	r2, #69	@ 0x45
 800afb0:	f43f ab63 	beq.w	800a67a <_strtod_l+0x272>
 800afb4:	2301      	movs	r3, #1
 800afb6:	f7ff bb9e 	b.w	800a6f6 <_strtod_l+0x2ee>
 800afba:	bf00      	nop
 800afbc:	f3af 8000 	nop.w
 800afc0:	ffc00000 	.word	0xffc00000
 800afc4:	41dfffff 	.word	0x41dfffff
 800afc8:	94a03595 	.word	0x94a03595
 800afcc:	3fcfffff 	.word	0x3fcfffff

0800afd0 <strtod>:
 800afd0:	460a      	mov	r2, r1
 800afd2:	4601      	mov	r1, r0
 800afd4:	4802      	ldr	r0, [pc, #8]	@ (800afe0 <strtod+0x10>)
 800afd6:	4b03      	ldr	r3, [pc, #12]	@ (800afe4 <strtod+0x14>)
 800afd8:	6800      	ldr	r0, [r0, #0]
 800afda:	f7ff ba15 	b.w	800a408 <_strtod_l>
 800afde:	bf00      	nop
 800afe0:	20000274 	.word	0x20000274
 800afe4:	20000108 	.word	0x20000108

0800afe8 <std>:
 800afe8:	2300      	movs	r3, #0
 800afea:	b510      	push	{r4, lr}
 800afec:	4604      	mov	r4, r0
 800afee:	e9c0 3300 	strd	r3, r3, [r0]
 800aff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aff6:	6083      	str	r3, [r0, #8]
 800aff8:	8181      	strh	r1, [r0, #12]
 800affa:	6643      	str	r3, [r0, #100]	@ 0x64
 800affc:	81c2      	strh	r2, [r0, #14]
 800affe:	6183      	str	r3, [r0, #24]
 800b000:	4619      	mov	r1, r3
 800b002:	2208      	movs	r2, #8
 800b004:	305c      	adds	r0, #92	@ 0x5c
 800b006:	f000 f8f4 	bl	800b1f2 <memset>
 800b00a:	4b0d      	ldr	r3, [pc, #52]	@ (800b040 <std+0x58>)
 800b00c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b00e:	4b0d      	ldr	r3, [pc, #52]	@ (800b044 <std+0x5c>)
 800b010:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b012:	4b0d      	ldr	r3, [pc, #52]	@ (800b048 <std+0x60>)
 800b014:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b016:	4b0d      	ldr	r3, [pc, #52]	@ (800b04c <std+0x64>)
 800b018:	6323      	str	r3, [r4, #48]	@ 0x30
 800b01a:	4b0d      	ldr	r3, [pc, #52]	@ (800b050 <std+0x68>)
 800b01c:	6224      	str	r4, [r4, #32]
 800b01e:	429c      	cmp	r4, r3
 800b020:	d006      	beq.n	800b030 <std+0x48>
 800b022:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b026:	4294      	cmp	r4, r2
 800b028:	d002      	beq.n	800b030 <std+0x48>
 800b02a:	33d0      	adds	r3, #208	@ 0xd0
 800b02c:	429c      	cmp	r4, r3
 800b02e:	d105      	bne.n	800b03c <std+0x54>
 800b030:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b038:	f000 b978 	b.w	800b32c <__retarget_lock_init_recursive>
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	bf00      	nop
 800b040:	0800b16d 	.word	0x0800b16d
 800b044:	0800b18f 	.word	0x0800b18f
 800b048:	0800b1c7 	.word	0x0800b1c7
 800b04c:	0800b1eb 	.word	0x0800b1eb
 800b050:	20002498 	.word	0x20002498

0800b054 <stdio_exit_handler>:
 800b054:	4a02      	ldr	r2, [pc, #8]	@ (800b060 <stdio_exit_handler+0xc>)
 800b056:	4903      	ldr	r1, [pc, #12]	@ (800b064 <stdio_exit_handler+0x10>)
 800b058:	4803      	ldr	r0, [pc, #12]	@ (800b068 <stdio_exit_handler+0x14>)
 800b05a:	f000 b869 	b.w	800b130 <_fwalk_sglue>
 800b05e:	bf00      	nop
 800b060:	200000fc 	.word	0x200000fc
 800b064:	0800c671 	.word	0x0800c671
 800b068:	20000278 	.word	0x20000278

0800b06c <cleanup_stdio>:
 800b06c:	6841      	ldr	r1, [r0, #4]
 800b06e:	4b0c      	ldr	r3, [pc, #48]	@ (800b0a0 <cleanup_stdio+0x34>)
 800b070:	4299      	cmp	r1, r3
 800b072:	b510      	push	{r4, lr}
 800b074:	4604      	mov	r4, r0
 800b076:	d001      	beq.n	800b07c <cleanup_stdio+0x10>
 800b078:	f001 fafa 	bl	800c670 <_fflush_r>
 800b07c:	68a1      	ldr	r1, [r4, #8]
 800b07e:	4b09      	ldr	r3, [pc, #36]	@ (800b0a4 <cleanup_stdio+0x38>)
 800b080:	4299      	cmp	r1, r3
 800b082:	d002      	beq.n	800b08a <cleanup_stdio+0x1e>
 800b084:	4620      	mov	r0, r4
 800b086:	f001 faf3 	bl	800c670 <_fflush_r>
 800b08a:	68e1      	ldr	r1, [r4, #12]
 800b08c:	4b06      	ldr	r3, [pc, #24]	@ (800b0a8 <cleanup_stdio+0x3c>)
 800b08e:	4299      	cmp	r1, r3
 800b090:	d004      	beq.n	800b09c <cleanup_stdio+0x30>
 800b092:	4620      	mov	r0, r4
 800b094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b098:	f001 baea 	b.w	800c670 <_fflush_r>
 800b09c:	bd10      	pop	{r4, pc}
 800b09e:	bf00      	nop
 800b0a0:	20002498 	.word	0x20002498
 800b0a4:	20002500 	.word	0x20002500
 800b0a8:	20002568 	.word	0x20002568

0800b0ac <global_stdio_init.part.0>:
 800b0ac:	b510      	push	{r4, lr}
 800b0ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b0dc <global_stdio_init.part.0+0x30>)
 800b0b0:	4c0b      	ldr	r4, [pc, #44]	@ (800b0e0 <global_stdio_init.part.0+0x34>)
 800b0b2:	4a0c      	ldr	r2, [pc, #48]	@ (800b0e4 <global_stdio_init.part.0+0x38>)
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	2104      	movs	r1, #4
 800b0bc:	f7ff ff94 	bl	800afe8 <std>
 800b0c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	2109      	movs	r1, #9
 800b0c8:	f7ff ff8e 	bl	800afe8 <std>
 800b0cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0d6:	2112      	movs	r1, #18
 800b0d8:	f7ff bf86 	b.w	800afe8 <std>
 800b0dc:	200025d0 	.word	0x200025d0
 800b0e0:	20002498 	.word	0x20002498
 800b0e4:	0800b055 	.word	0x0800b055

0800b0e8 <__sfp_lock_acquire>:
 800b0e8:	4801      	ldr	r0, [pc, #4]	@ (800b0f0 <__sfp_lock_acquire+0x8>)
 800b0ea:	f000 b920 	b.w	800b32e <__retarget_lock_acquire_recursive>
 800b0ee:	bf00      	nop
 800b0f0:	200025d9 	.word	0x200025d9

0800b0f4 <__sfp_lock_release>:
 800b0f4:	4801      	ldr	r0, [pc, #4]	@ (800b0fc <__sfp_lock_release+0x8>)
 800b0f6:	f000 b91b 	b.w	800b330 <__retarget_lock_release_recursive>
 800b0fa:	bf00      	nop
 800b0fc:	200025d9 	.word	0x200025d9

0800b100 <__sinit>:
 800b100:	b510      	push	{r4, lr}
 800b102:	4604      	mov	r4, r0
 800b104:	f7ff fff0 	bl	800b0e8 <__sfp_lock_acquire>
 800b108:	6a23      	ldr	r3, [r4, #32]
 800b10a:	b11b      	cbz	r3, 800b114 <__sinit+0x14>
 800b10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b110:	f7ff bff0 	b.w	800b0f4 <__sfp_lock_release>
 800b114:	4b04      	ldr	r3, [pc, #16]	@ (800b128 <__sinit+0x28>)
 800b116:	6223      	str	r3, [r4, #32]
 800b118:	4b04      	ldr	r3, [pc, #16]	@ (800b12c <__sinit+0x2c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1f5      	bne.n	800b10c <__sinit+0xc>
 800b120:	f7ff ffc4 	bl	800b0ac <global_stdio_init.part.0>
 800b124:	e7f2      	b.n	800b10c <__sinit+0xc>
 800b126:	bf00      	nop
 800b128:	0800b06d 	.word	0x0800b06d
 800b12c:	200025d0 	.word	0x200025d0

0800b130 <_fwalk_sglue>:
 800b130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b134:	4607      	mov	r7, r0
 800b136:	4688      	mov	r8, r1
 800b138:	4614      	mov	r4, r2
 800b13a:	2600      	movs	r6, #0
 800b13c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b140:	f1b9 0901 	subs.w	r9, r9, #1
 800b144:	d505      	bpl.n	800b152 <_fwalk_sglue+0x22>
 800b146:	6824      	ldr	r4, [r4, #0]
 800b148:	2c00      	cmp	r4, #0
 800b14a:	d1f7      	bne.n	800b13c <_fwalk_sglue+0xc>
 800b14c:	4630      	mov	r0, r6
 800b14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b152:	89ab      	ldrh	r3, [r5, #12]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d907      	bls.n	800b168 <_fwalk_sglue+0x38>
 800b158:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b15c:	3301      	adds	r3, #1
 800b15e:	d003      	beq.n	800b168 <_fwalk_sglue+0x38>
 800b160:	4629      	mov	r1, r5
 800b162:	4638      	mov	r0, r7
 800b164:	47c0      	blx	r8
 800b166:	4306      	orrs	r6, r0
 800b168:	3568      	adds	r5, #104	@ 0x68
 800b16a:	e7e9      	b.n	800b140 <_fwalk_sglue+0x10>

0800b16c <__sread>:
 800b16c:	b510      	push	{r4, lr}
 800b16e:	460c      	mov	r4, r1
 800b170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b174:	f000 f88c 	bl	800b290 <_read_r>
 800b178:	2800      	cmp	r0, #0
 800b17a:	bfab      	itete	ge
 800b17c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b17e:	89a3      	ldrhlt	r3, [r4, #12]
 800b180:	181b      	addge	r3, r3, r0
 800b182:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b186:	bfac      	ite	ge
 800b188:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b18a:	81a3      	strhlt	r3, [r4, #12]
 800b18c:	bd10      	pop	{r4, pc}

0800b18e <__swrite>:
 800b18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b192:	461f      	mov	r7, r3
 800b194:	898b      	ldrh	r3, [r1, #12]
 800b196:	05db      	lsls	r3, r3, #23
 800b198:	4605      	mov	r5, r0
 800b19a:	460c      	mov	r4, r1
 800b19c:	4616      	mov	r6, r2
 800b19e:	d505      	bpl.n	800b1ac <__swrite+0x1e>
 800b1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f000 f860 	bl	800b26c <_lseek_r>
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1b6:	81a3      	strh	r3, [r4, #12]
 800b1b8:	4632      	mov	r2, r6
 800b1ba:	463b      	mov	r3, r7
 800b1bc:	4628      	mov	r0, r5
 800b1be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c2:	f000 b877 	b.w	800b2b4 <_write_r>

0800b1c6 <__sseek>:
 800b1c6:	b510      	push	{r4, lr}
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ce:	f000 f84d 	bl	800b26c <_lseek_r>
 800b1d2:	1c43      	adds	r3, r0, #1
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	bf15      	itete	ne
 800b1d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1e2:	81a3      	strheq	r3, [r4, #12]
 800b1e4:	bf18      	it	ne
 800b1e6:	81a3      	strhne	r3, [r4, #12]
 800b1e8:	bd10      	pop	{r4, pc}

0800b1ea <__sclose>:
 800b1ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ee:	f000 b82d 	b.w	800b24c <_close_r>

0800b1f2 <memset>:
 800b1f2:	4402      	add	r2, r0
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d100      	bne.n	800b1fc <memset+0xa>
 800b1fa:	4770      	bx	lr
 800b1fc:	f803 1b01 	strb.w	r1, [r3], #1
 800b200:	e7f9      	b.n	800b1f6 <memset+0x4>

0800b202 <strncmp>:
 800b202:	b510      	push	{r4, lr}
 800b204:	b16a      	cbz	r2, 800b222 <strncmp+0x20>
 800b206:	3901      	subs	r1, #1
 800b208:	1884      	adds	r4, r0, r2
 800b20a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b20e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b212:	429a      	cmp	r2, r3
 800b214:	d103      	bne.n	800b21e <strncmp+0x1c>
 800b216:	42a0      	cmp	r0, r4
 800b218:	d001      	beq.n	800b21e <strncmp+0x1c>
 800b21a:	2a00      	cmp	r2, #0
 800b21c:	d1f5      	bne.n	800b20a <strncmp+0x8>
 800b21e:	1ad0      	subs	r0, r2, r3
 800b220:	bd10      	pop	{r4, pc}
 800b222:	4610      	mov	r0, r2
 800b224:	e7fc      	b.n	800b220 <strncmp+0x1e>

0800b226 <strncpy>:
 800b226:	b510      	push	{r4, lr}
 800b228:	3901      	subs	r1, #1
 800b22a:	4603      	mov	r3, r0
 800b22c:	b132      	cbz	r2, 800b23c <strncpy+0x16>
 800b22e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b232:	f803 4b01 	strb.w	r4, [r3], #1
 800b236:	3a01      	subs	r2, #1
 800b238:	2c00      	cmp	r4, #0
 800b23a:	d1f7      	bne.n	800b22c <strncpy+0x6>
 800b23c:	441a      	add	r2, r3
 800b23e:	2100      	movs	r1, #0
 800b240:	4293      	cmp	r3, r2
 800b242:	d100      	bne.n	800b246 <strncpy+0x20>
 800b244:	bd10      	pop	{r4, pc}
 800b246:	f803 1b01 	strb.w	r1, [r3], #1
 800b24a:	e7f9      	b.n	800b240 <strncpy+0x1a>

0800b24c <_close_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4d06      	ldr	r5, [pc, #24]	@ (800b268 <_close_r+0x1c>)
 800b250:	2300      	movs	r3, #0
 800b252:	4604      	mov	r4, r0
 800b254:	4608      	mov	r0, r1
 800b256:	602b      	str	r3, [r5, #0]
 800b258:	f7f6 fec2 	bl	8001fe0 <_close>
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	d102      	bne.n	800b266 <_close_r+0x1a>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	b103      	cbz	r3, 800b266 <_close_r+0x1a>
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	bd38      	pop	{r3, r4, r5, pc}
 800b268:	200025d4 	.word	0x200025d4

0800b26c <_lseek_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4d07      	ldr	r5, [pc, #28]	@ (800b28c <_lseek_r+0x20>)
 800b270:	4604      	mov	r4, r0
 800b272:	4608      	mov	r0, r1
 800b274:	4611      	mov	r1, r2
 800b276:	2200      	movs	r2, #0
 800b278:	602a      	str	r2, [r5, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	f7f6 fed7 	bl	800202e <_lseek>
 800b280:	1c43      	adds	r3, r0, #1
 800b282:	d102      	bne.n	800b28a <_lseek_r+0x1e>
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	b103      	cbz	r3, 800b28a <_lseek_r+0x1e>
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
 800b28c:	200025d4 	.word	0x200025d4

0800b290 <_read_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4d07      	ldr	r5, [pc, #28]	@ (800b2b0 <_read_r+0x20>)
 800b294:	4604      	mov	r4, r0
 800b296:	4608      	mov	r0, r1
 800b298:	4611      	mov	r1, r2
 800b29a:	2200      	movs	r2, #0
 800b29c:	602a      	str	r2, [r5, #0]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f7f6 fe65 	bl	8001f6e <_read>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d102      	bne.n	800b2ae <_read_r+0x1e>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b103      	cbz	r3, 800b2ae <_read_r+0x1e>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	200025d4 	.word	0x200025d4

0800b2b4 <_write_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4d07      	ldr	r5, [pc, #28]	@ (800b2d4 <_write_r+0x20>)
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	4608      	mov	r0, r1
 800b2bc:	4611      	mov	r1, r2
 800b2be:	2200      	movs	r2, #0
 800b2c0:	602a      	str	r2, [r5, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	f7f6 fe70 	bl	8001fa8 <_write>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_write_r+0x1e>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_write_r+0x1e>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	200025d4 	.word	0x200025d4

0800b2d8 <__errno>:
 800b2d8:	4b01      	ldr	r3, [pc, #4]	@ (800b2e0 <__errno+0x8>)
 800b2da:	6818      	ldr	r0, [r3, #0]
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	20000274 	.word	0x20000274

0800b2e4 <__libc_init_array>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	4d0d      	ldr	r5, [pc, #52]	@ (800b31c <__libc_init_array+0x38>)
 800b2e8:	4c0d      	ldr	r4, [pc, #52]	@ (800b320 <__libc_init_array+0x3c>)
 800b2ea:	1b64      	subs	r4, r4, r5
 800b2ec:	10a4      	asrs	r4, r4, #2
 800b2ee:	2600      	movs	r6, #0
 800b2f0:	42a6      	cmp	r6, r4
 800b2f2:	d109      	bne.n	800b308 <__libc_init_array+0x24>
 800b2f4:	4d0b      	ldr	r5, [pc, #44]	@ (800b324 <__libc_init_array+0x40>)
 800b2f6:	4c0c      	ldr	r4, [pc, #48]	@ (800b328 <__libc_init_array+0x44>)
 800b2f8:	f001 fe70 	bl	800cfdc <_init>
 800b2fc:	1b64      	subs	r4, r4, r5
 800b2fe:	10a4      	asrs	r4, r4, #2
 800b300:	2600      	movs	r6, #0
 800b302:	42a6      	cmp	r6, r4
 800b304:	d105      	bne.n	800b312 <__libc_init_array+0x2e>
 800b306:	bd70      	pop	{r4, r5, r6, pc}
 800b308:	f855 3b04 	ldr.w	r3, [r5], #4
 800b30c:	4798      	blx	r3
 800b30e:	3601      	adds	r6, #1
 800b310:	e7ee      	b.n	800b2f0 <__libc_init_array+0xc>
 800b312:	f855 3b04 	ldr.w	r3, [r5], #4
 800b316:	4798      	blx	r3
 800b318:	3601      	adds	r6, #1
 800b31a:	e7f2      	b.n	800b302 <__libc_init_array+0x1e>
 800b31c:	0800d420 	.word	0x0800d420
 800b320:	0800d420 	.word	0x0800d420
 800b324:	0800d420 	.word	0x0800d420
 800b328:	0800d424 	.word	0x0800d424

0800b32c <__retarget_lock_init_recursive>:
 800b32c:	4770      	bx	lr

0800b32e <__retarget_lock_acquire_recursive>:
 800b32e:	4770      	bx	lr

0800b330 <__retarget_lock_release_recursive>:
 800b330:	4770      	bx	lr

0800b332 <memcpy>:
 800b332:	440a      	add	r2, r1
 800b334:	4291      	cmp	r1, r2
 800b336:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b33a:	d100      	bne.n	800b33e <memcpy+0xc>
 800b33c:	4770      	bx	lr
 800b33e:	b510      	push	{r4, lr}
 800b340:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b344:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b348:	4291      	cmp	r1, r2
 800b34a:	d1f9      	bne.n	800b340 <memcpy+0xe>
 800b34c:	bd10      	pop	{r4, pc}
	...

0800b350 <nan>:
 800b350:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b358 <nan+0x8>
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	00000000 	.word	0x00000000
 800b35c:	7ff80000 	.word	0x7ff80000

0800b360 <_free_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4605      	mov	r5, r0
 800b364:	2900      	cmp	r1, #0
 800b366:	d041      	beq.n	800b3ec <_free_r+0x8c>
 800b368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b36c:	1f0c      	subs	r4, r1, #4
 800b36e:	2b00      	cmp	r3, #0
 800b370:	bfb8      	it	lt
 800b372:	18e4      	addlt	r4, r4, r3
 800b374:	f000 fc2c 	bl	800bbd0 <__malloc_lock>
 800b378:	4a1d      	ldr	r2, [pc, #116]	@ (800b3f0 <_free_r+0x90>)
 800b37a:	6813      	ldr	r3, [r2, #0]
 800b37c:	b933      	cbnz	r3, 800b38c <_free_r+0x2c>
 800b37e:	6063      	str	r3, [r4, #4]
 800b380:	6014      	str	r4, [r2, #0]
 800b382:	4628      	mov	r0, r5
 800b384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b388:	f000 bc28 	b.w	800bbdc <__malloc_unlock>
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	d908      	bls.n	800b3a2 <_free_r+0x42>
 800b390:	6820      	ldr	r0, [r4, #0]
 800b392:	1821      	adds	r1, r4, r0
 800b394:	428b      	cmp	r3, r1
 800b396:	bf01      	itttt	eq
 800b398:	6819      	ldreq	r1, [r3, #0]
 800b39a:	685b      	ldreq	r3, [r3, #4]
 800b39c:	1809      	addeq	r1, r1, r0
 800b39e:	6021      	streq	r1, [r4, #0]
 800b3a0:	e7ed      	b.n	800b37e <_free_r+0x1e>
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	b10b      	cbz	r3, 800b3ac <_free_r+0x4c>
 800b3a8:	42a3      	cmp	r3, r4
 800b3aa:	d9fa      	bls.n	800b3a2 <_free_r+0x42>
 800b3ac:	6811      	ldr	r1, [r2, #0]
 800b3ae:	1850      	adds	r0, r2, r1
 800b3b0:	42a0      	cmp	r0, r4
 800b3b2:	d10b      	bne.n	800b3cc <_free_r+0x6c>
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	4401      	add	r1, r0
 800b3b8:	1850      	adds	r0, r2, r1
 800b3ba:	4283      	cmp	r3, r0
 800b3bc:	6011      	str	r1, [r2, #0]
 800b3be:	d1e0      	bne.n	800b382 <_free_r+0x22>
 800b3c0:	6818      	ldr	r0, [r3, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	6053      	str	r3, [r2, #4]
 800b3c6:	4408      	add	r0, r1
 800b3c8:	6010      	str	r0, [r2, #0]
 800b3ca:	e7da      	b.n	800b382 <_free_r+0x22>
 800b3cc:	d902      	bls.n	800b3d4 <_free_r+0x74>
 800b3ce:	230c      	movs	r3, #12
 800b3d0:	602b      	str	r3, [r5, #0]
 800b3d2:	e7d6      	b.n	800b382 <_free_r+0x22>
 800b3d4:	6820      	ldr	r0, [r4, #0]
 800b3d6:	1821      	adds	r1, r4, r0
 800b3d8:	428b      	cmp	r3, r1
 800b3da:	bf04      	itt	eq
 800b3dc:	6819      	ldreq	r1, [r3, #0]
 800b3de:	685b      	ldreq	r3, [r3, #4]
 800b3e0:	6063      	str	r3, [r4, #4]
 800b3e2:	bf04      	itt	eq
 800b3e4:	1809      	addeq	r1, r1, r0
 800b3e6:	6021      	streq	r1, [r4, #0]
 800b3e8:	6054      	str	r4, [r2, #4]
 800b3ea:	e7ca      	b.n	800b382 <_free_r+0x22>
 800b3ec:	bd38      	pop	{r3, r4, r5, pc}
 800b3ee:	bf00      	nop
 800b3f0:	200025e0 	.word	0x200025e0

0800b3f4 <rshift>:
 800b3f4:	6903      	ldr	r3, [r0, #16]
 800b3f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b3fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b402:	f100 0414 	add.w	r4, r0, #20
 800b406:	dd45      	ble.n	800b494 <rshift+0xa0>
 800b408:	f011 011f 	ands.w	r1, r1, #31
 800b40c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b410:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b414:	d10c      	bne.n	800b430 <rshift+0x3c>
 800b416:	f100 0710 	add.w	r7, r0, #16
 800b41a:	4629      	mov	r1, r5
 800b41c:	42b1      	cmp	r1, r6
 800b41e:	d334      	bcc.n	800b48a <rshift+0x96>
 800b420:	1a9b      	subs	r3, r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	1eea      	subs	r2, r5, #3
 800b426:	4296      	cmp	r6, r2
 800b428:	bf38      	it	cc
 800b42a:	2300      	movcc	r3, #0
 800b42c:	4423      	add	r3, r4
 800b42e:	e015      	b.n	800b45c <rshift+0x68>
 800b430:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b434:	f1c1 0820 	rsb	r8, r1, #32
 800b438:	40cf      	lsrs	r7, r1
 800b43a:	f105 0e04 	add.w	lr, r5, #4
 800b43e:	46a1      	mov	r9, r4
 800b440:	4576      	cmp	r6, lr
 800b442:	46f4      	mov	ip, lr
 800b444:	d815      	bhi.n	800b472 <rshift+0x7e>
 800b446:	1a9a      	subs	r2, r3, r2
 800b448:	0092      	lsls	r2, r2, #2
 800b44a:	3a04      	subs	r2, #4
 800b44c:	3501      	adds	r5, #1
 800b44e:	42ae      	cmp	r6, r5
 800b450:	bf38      	it	cc
 800b452:	2200      	movcc	r2, #0
 800b454:	18a3      	adds	r3, r4, r2
 800b456:	50a7      	str	r7, [r4, r2]
 800b458:	b107      	cbz	r7, 800b45c <rshift+0x68>
 800b45a:	3304      	adds	r3, #4
 800b45c:	1b1a      	subs	r2, r3, r4
 800b45e:	42a3      	cmp	r3, r4
 800b460:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b464:	bf08      	it	eq
 800b466:	2300      	moveq	r3, #0
 800b468:	6102      	str	r2, [r0, #16]
 800b46a:	bf08      	it	eq
 800b46c:	6143      	streq	r3, [r0, #20]
 800b46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b472:	f8dc c000 	ldr.w	ip, [ip]
 800b476:	fa0c fc08 	lsl.w	ip, ip, r8
 800b47a:	ea4c 0707 	orr.w	r7, ip, r7
 800b47e:	f849 7b04 	str.w	r7, [r9], #4
 800b482:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b486:	40cf      	lsrs	r7, r1
 800b488:	e7da      	b.n	800b440 <rshift+0x4c>
 800b48a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b48e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b492:	e7c3      	b.n	800b41c <rshift+0x28>
 800b494:	4623      	mov	r3, r4
 800b496:	e7e1      	b.n	800b45c <rshift+0x68>

0800b498 <__hexdig_fun>:
 800b498:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b49c:	2b09      	cmp	r3, #9
 800b49e:	d802      	bhi.n	800b4a6 <__hexdig_fun+0xe>
 800b4a0:	3820      	subs	r0, #32
 800b4a2:	b2c0      	uxtb	r0, r0
 800b4a4:	4770      	bx	lr
 800b4a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b4aa:	2b05      	cmp	r3, #5
 800b4ac:	d801      	bhi.n	800b4b2 <__hexdig_fun+0x1a>
 800b4ae:	3847      	subs	r0, #71	@ 0x47
 800b4b0:	e7f7      	b.n	800b4a2 <__hexdig_fun+0xa>
 800b4b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b4b6:	2b05      	cmp	r3, #5
 800b4b8:	d801      	bhi.n	800b4be <__hexdig_fun+0x26>
 800b4ba:	3827      	subs	r0, #39	@ 0x27
 800b4bc:	e7f1      	b.n	800b4a2 <__hexdig_fun+0xa>
 800b4be:	2000      	movs	r0, #0
 800b4c0:	4770      	bx	lr
	...

0800b4c4 <__gethex>:
 800b4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c8:	b085      	sub	sp, #20
 800b4ca:	468a      	mov	sl, r1
 800b4cc:	9302      	str	r3, [sp, #8]
 800b4ce:	680b      	ldr	r3, [r1, #0]
 800b4d0:	9001      	str	r0, [sp, #4]
 800b4d2:	4690      	mov	r8, r2
 800b4d4:	1c9c      	adds	r4, r3, #2
 800b4d6:	46a1      	mov	r9, r4
 800b4d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b4dc:	2830      	cmp	r0, #48	@ 0x30
 800b4de:	d0fa      	beq.n	800b4d6 <__gethex+0x12>
 800b4e0:	eba9 0303 	sub.w	r3, r9, r3
 800b4e4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b4e8:	f7ff ffd6 	bl	800b498 <__hexdig_fun>
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d168      	bne.n	800b5c4 <__gethex+0x100>
 800b4f2:	49a0      	ldr	r1, [pc, #640]	@ (800b774 <__gethex+0x2b0>)
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	4648      	mov	r0, r9
 800b4f8:	f7ff fe83 	bl	800b202 <strncmp>
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d167      	bne.n	800b5d2 <__gethex+0x10e>
 800b502:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b506:	4626      	mov	r6, r4
 800b508:	f7ff ffc6 	bl	800b498 <__hexdig_fun>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d062      	beq.n	800b5d6 <__gethex+0x112>
 800b510:	4623      	mov	r3, r4
 800b512:	7818      	ldrb	r0, [r3, #0]
 800b514:	2830      	cmp	r0, #48	@ 0x30
 800b516:	4699      	mov	r9, r3
 800b518:	f103 0301 	add.w	r3, r3, #1
 800b51c:	d0f9      	beq.n	800b512 <__gethex+0x4e>
 800b51e:	f7ff ffbb 	bl	800b498 <__hexdig_fun>
 800b522:	fab0 f580 	clz	r5, r0
 800b526:	096d      	lsrs	r5, r5, #5
 800b528:	f04f 0b01 	mov.w	fp, #1
 800b52c:	464a      	mov	r2, r9
 800b52e:	4616      	mov	r6, r2
 800b530:	3201      	adds	r2, #1
 800b532:	7830      	ldrb	r0, [r6, #0]
 800b534:	f7ff ffb0 	bl	800b498 <__hexdig_fun>
 800b538:	2800      	cmp	r0, #0
 800b53a:	d1f8      	bne.n	800b52e <__gethex+0x6a>
 800b53c:	498d      	ldr	r1, [pc, #564]	@ (800b774 <__gethex+0x2b0>)
 800b53e:	2201      	movs	r2, #1
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff fe5e 	bl	800b202 <strncmp>
 800b546:	2800      	cmp	r0, #0
 800b548:	d13f      	bne.n	800b5ca <__gethex+0x106>
 800b54a:	b944      	cbnz	r4, 800b55e <__gethex+0x9a>
 800b54c:	1c74      	adds	r4, r6, #1
 800b54e:	4622      	mov	r2, r4
 800b550:	4616      	mov	r6, r2
 800b552:	3201      	adds	r2, #1
 800b554:	7830      	ldrb	r0, [r6, #0]
 800b556:	f7ff ff9f 	bl	800b498 <__hexdig_fun>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d1f8      	bne.n	800b550 <__gethex+0x8c>
 800b55e:	1ba4      	subs	r4, r4, r6
 800b560:	00a7      	lsls	r7, r4, #2
 800b562:	7833      	ldrb	r3, [r6, #0]
 800b564:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b568:	2b50      	cmp	r3, #80	@ 0x50
 800b56a:	d13e      	bne.n	800b5ea <__gethex+0x126>
 800b56c:	7873      	ldrb	r3, [r6, #1]
 800b56e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b570:	d033      	beq.n	800b5da <__gethex+0x116>
 800b572:	2b2d      	cmp	r3, #45	@ 0x2d
 800b574:	d034      	beq.n	800b5e0 <__gethex+0x11c>
 800b576:	1c71      	adds	r1, r6, #1
 800b578:	2400      	movs	r4, #0
 800b57a:	7808      	ldrb	r0, [r1, #0]
 800b57c:	f7ff ff8c 	bl	800b498 <__hexdig_fun>
 800b580:	1e43      	subs	r3, r0, #1
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b18      	cmp	r3, #24
 800b586:	d830      	bhi.n	800b5ea <__gethex+0x126>
 800b588:	f1a0 0210 	sub.w	r2, r0, #16
 800b58c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b590:	f7ff ff82 	bl	800b498 <__hexdig_fun>
 800b594:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b598:	fa5f fc8c 	uxtb.w	ip, ip
 800b59c:	f1bc 0f18 	cmp.w	ip, #24
 800b5a0:	f04f 030a 	mov.w	r3, #10
 800b5a4:	d91e      	bls.n	800b5e4 <__gethex+0x120>
 800b5a6:	b104      	cbz	r4, 800b5aa <__gethex+0xe6>
 800b5a8:	4252      	negs	r2, r2
 800b5aa:	4417      	add	r7, r2
 800b5ac:	f8ca 1000 	str.w	r1, [sl]
 800b5b0:	b1ed      	cbz	r5, 800b5ee <__gethex+0x12a>
 800b5b2:	f1bb 0f00 	cmp.w	fp, #0
 800b5b6:	bf0c      	ite	eq
 800b5b8:	2506      	moveq	r5, #6
 800b5ba:	2500      	movne	r5, #0
 800b5bc:	4628      	mov	r0, r5
 800b5be:	b005      	add	sp, #20
 800b5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c4:	2500      	movs	r5, #0
 800b5c6:	462c      	mov	r4, r5
 800b5c8:	e7b0      	b.n	800b52c <__gethex+0x68>
 800b5ca:	2c00      	cmp	r4, #0
 800b5cc:	d1c7      	bne.n	800b55e <__gethex+0x9a>
 800b5ce:	4627      	mov	r7, r4
 800b5d0:	e7c7      	b.n	800b562 <__gethex+0x9e>
 800b5d2:	464e      	mov	r6, r9
 800b5d4:	462f      	mov	r7, r5
 800b5d6:	2501      	movs	r5, #1
 800b5d8:	e7c3      	b.n	800b562 <__gethex+0x9e>
 800b5da:	2400      	movs	r4, #0
 800b5dc:	1cb1      	adds	r1, r6, #2
 800b5de:	e7cc      	b.n	800b57a <__gethex+0xb6>
 800b5e0:	2401      	movs	r4, #1
 800b5e2:	e7fb      	b.n	800b5dc <__gethex+0x118>
 800b5e4:	fb03 0002 	mla	r0, r3, r2, r0
 800b5e8:	e7ce      	b.n	800b588 <__gethex+0xc4>
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	e7de      	b.n	800b5ac <__gethex+0xe8>
 800b5ee:	eba6 0309 	sub.w	r3, r6, r9
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	2b07      	cmp	r3, #7
 800b5f8:	dc0a      	bgt.n	800b610 <__gethex+0x14c>
 800b5fa:	9801      	ldr	r0, [sp, #4]
 800b5fc:	f000 faf4 	bl	800bbe8 <_Balloc>
 800b600:	4604      	mov	r4, r0
 800b602:	b940      	cbnz	r0, 800b616 <__gethex+0x152>
 800b604:	4b5c      	ldr	r3, [pc, #368]	@ (800b778 <__gethex+0x2b4>)
 800b606:	4602      	mov	r2, r0
 800b608:	21e4      	movs	r1, #228	@ 0xe4
 800b60a:	485c      	ldr	r0, [pc, #368]	@ (800b77c <__gethex+0x2b8>)
 800b60c:	f001 f868 	bl	800c6e0 <__assert_func>
 800b610:	3101      	adds	r1, #1
 800b612:	105b      	asrs	r3, r3, #1
 800b614:	e7ef      	b.n	800b5f6 <__gethex+0x132>
 800b616:	f100 0a14 	add.w	sl, r0, #20
 800b61a:	2300      	movs	r3, #0
 800b61c:	4655      	mov	r5, sl
 800b61e:	469b      	mov	fp, r3
 800b620:	45b1      	cmp	r9, r6
 800b622:	d337      	bcc.n	800b694 <__gethex+0x1d0>
 800b624:	f845 bb04 	str.w	fp, [r5], #4
 800b628:	eba5 050a 	sub.w	r5, r5, sl
 800b62c:	10ad      	asrs	r5, r5, #2
 800b62e:	6125      	str	r5, [r4, #16]
 800b630:	4658      	mov	r0, fp
 800b632:	f000 fbcb 	bl	800bdcc <__hi0bits>
 800b636:	016d      	lsls	r5, r5, #5
 800b638:	f8d8 6000 	ldr.w	r6, [r8]
 800b63c:	1a2d      	subs	r5, r5, r0
 800b63e:	42b5      	cmp	r5, r6
 800b640:	dd54      	ble.n	800b6ec <__gethex+0x228>
 800b642:	1bad      	subs	r5, r5, r6
 800b644:	4629      	mov	r1, r5
 800b646:	4620      	mov	r0, r4
 800b648:	f000 ff5f 	bl	800c50a <__any_on>
 800b64c:	4681      	mov	r9, r0
 800b64e:	b178      	cbz	r0, 800b670 <__gethex+0x1ac>
 800b650:	1e6b      	subs	r3, r5, #1
 800b652:	1159      	asrs	r1, r3, #5
 800b654:	f003 021f 	and.w	r2, r3, #31
 800b658:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b65c:	f04f 0901 	mov.w	r9, #1
 800b660:	fa09 f202 	lsl.w	r2, r9, r2
 800b664:	420a      	tst	r2, r1
 800b666:	d003      	beq.n	800b670 <__gethex+0x1ac>
 800b668:	454b      	cmp	r3, r9
 800b66a:	dc36      	bgt.n	800b6da <__gethex+0x216>
 800b66c:	f04f 0902 	mov.w	r9, #2
 800b670:	4629      	mov	r1, r5
 800b672:	4620      	mov	r0, r4
 800b674:	f7ff febe 	bl	800b3f4 <rshift>
 800b678:	442f      	add	r7, r5
 800b67a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b67e:	42bb      	cmp	r3, r7
 800b680:	da42      	bge.n	800b708 <__gethex+0x244>
 800b682:	9801      	ldr	r0, [sp, #4]
 800b684:	4621      	mov	r1, r4
 800b686:	f000 faef 	bl	800bc68 <_Bfree>
 800b68a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b68c:	2300      	movs	r3, #0
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	25a3      	movs	r5, #163	@ 0xa3
 800b692:	e793      	b.n	800b5bc <__gethex+0xf8>
 800b694:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b698:	2a2e      	cmp	r2, #46	@ 0x2e
 800b69a:	d012      	beq.n	800b6c2 <__gethex+0x1fe>
 800b69c:	2b20      	cmp	r3, #32
 800b69e:	d104      	bne.n	800b6aa <__gethex+0x1e6>
 800b6a0:	f845 bb04 	str.w	fp, [r5], #4
 800b6a4:	f04f 0b00 	mov.w	fp, #0
 800b6a8:	465b      	mov	r3, fp
 800b6aa:	7830      	ldrb	r0, [r6, #0]
 800b6ac:	9303      	str	r3, [sp, #12]
 800b6ae:	f7ff fef3 	bl	800b498 <__hexdig_fun>
 800b6b2:	9b03      	ldr	r3, [sp, #12]
 800b6b4:	f000 000f 	and.w	r0, r0, #15
 800b6b8:	4098      	lsls	r0, r3
 800b6ba:	ea4b 0b00 	orr.w	fp, fp, r0
 800b6be:	3304      	adds	r3, #4
 800b6c0:	e7ae      	b.n	800b620 <__gethex+0x15c>
 800b6c2:	45b1      	cmp	r9, r6
 800b6c4:	d8ea      	bhi.n	800b69c <__gethex+0x1d8>
 800b6c6:	492b      	ldr	r1, [pc, #172]	@ (800b774 <__gethex+0x2b0>)
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7ff fd98 	bl	800b202 <strncmp>
 800b6d2:	9b03      	ldr	r3, [sp, #12]
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d1e1      	bne.n	800b69c <__gethex+0x1d8>
 800b6d8:	e7a2      	b.n	800b620 <__gethex+0x15c>
 800b6da:	1ea9      	subs	r1, r5, #2
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f000 ff14 	bl	800c50a <__any_on>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d0c2      	beq.n	800b66c <__gethex+0x1a8>
 800b6e6:	f04f 0903 	mov.w	r9, #3
 800b6ea:	e7c1      	b.n	800b670 <__gethex+0x1ac>
 800b6ec:	da09      	bge.n	800b702 <__gethex+0x23e>
 800b6ee:	1b75      	subs	r5, r6, r5
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	9801      	ldr	r0, [sp, #4]
 800b6f4:	462a      	mov	r2, r5
 800b6f6:	f000 fccf 	bl	800c098 <__lshift>
 800b6fa:	1b7f      	subs	r7, r7, r5
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	f100 0a14 	add.w	sl, r0, #20
 800b702:	f04f 0900 	mov.w	r9, #0
 800b706:	e7b8      	b.n	800b67a <__gethex+0x1b6>
 800b708:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b70c:	42bd      	cmp	r5, r7
 800b70e:	dd6f      	ble.n	800b7f0 <__gethex+0x32c>
 800b710:	1bed      	subs	r5, r5, r7
 800b712:	42ae      	cmp	r6, r5
 800b714:	dc34      	bgt.n	800b780 <__gethex+0x2bc>
 800b716:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	d022      	beq.n	800b764 <__gethex+0x2a0>
 800b71e:	2b03      	cmp	r3, #3
 800b720:	d024      	beq.n	800b76c <__gethex+0x2a8>
 800b722:	2b01      	cmp	r3, #1
 800b724:	d115      	bne.n	800b752 <__gethex+0x28e>
 800b726:	42ae      	cmp	r6, r5
 800b728:	d113      	bne.n	800b752 <__gethex+0x28e>
 800b72a:	2e01      	cmp	r6, #1
 800b72c:	d10b      	bne.n	800b746 <__gethex+0x282>
 800b72e:	9a02      	ldr	r2, [sp, #8]
 800b730:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b734:	6013      	str	r3, [r2, #0]
 800b736:	2301      	movs	r3, #1
 800b738:	6123      	str	r3, [r4, #16]
 800b73a:	f8ca 3000 	str.w	r3, [sl]
 800b73e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b740:	2562      	movs	r5, #98	@ 0x62
 800b742:	601c      	str	r4, [r3, #0]
 800b744:	e73a      	b.n	800b5bc <__gethex+0xf8>
 800b746:	1e71      	subs	r1, r6, #1
 800b748:	4620      	mov	r0, r4
 800b74a:	f000 fede 	bl	800c50a <__any_on>
 800b74e:	2800      	cmp	r0, #0
 800b750:	d1ed      	bne.n	800b72e <__gethex+0x26a>
 800b752:	9801      	ldr	r0, [sp, #4]
 800b754:	4621      	mov	r1, r4
 800b756:	f000 fa87 	bl	800bc68 <_Bfree>
 800b75a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b75c:	2300      	movs	r3, #0
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	2550      	movs	r5, #80	@ 0x50
 800b762:	e72b      	b.n	800b5bc <__gethex+0xf8>
 800b764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d1f3      	bne.n	800b752 <__gethex+0x28e>
 800b76a:	e7e0      	b.n	800b72e <__gethex+0x26a>
 800b76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1dd      	bne.n	800b72e <__gethex+0x26a>
 800b772:	e7ee      	b.n	800b752 <__gethex+0x28e>
 800b774:	0800d060 	.word	0x0800d060
 800b778:	0800d0c8 	.word	0x0800d0c8
 800b77c:	0800d0d9 	.word	0x0800d0d9
 800b780:	1e6f      	subs	r7, r5, #1
 800b782:	f1b9 0f00 	cmp.w	r9, #0
 800b786:	d130      	bne.n	800b7ea <__gethex+0x326>
 800b788:	b127      	cbz	r7, 800b794 <__gethex+0x2d0>
 800b78a:	4639      	mov	r1, r7
 800b78c:	4620      	mov	r0, r4
 800b78e:	f000 febc 	bl	800c50a <__any_on>
 800b792:	4681      	mov	r9, r0
 800b794:	117a      	asrs	r2, r7, #5
 800b796:	2301      	movs	r3, #1
 800b798:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b79c:	f007 071f 	and.w	r7, r7, #31
 800b7a0:	40bb      	lsls	r3, r7
 800b7a2:	4213      	tst	r3, r2
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	bf18      	it	ne
 800b7aa:	f049 0902 	orrne.w	r9, r9, #2
 800b7ae:	f7ff fe21 	bl	800b3f4 <rshift>
 800b7b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b7b6:	1b76      	subs	r6, r6, r5
 800b7b8:	2502      	movs	r5, #2
 800b7ba:	f1b9 0f00 	cmp.w	r9, #0
 800b7be:	d047      	beq.n	800b850 <__gethex+0x38c>
 800b7c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d015      	beq.n	800b7f4 <__gethex+0x330>
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d017      	beq.n	800b7fc <__gethex+0x338>
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d109      	bne.n	800b7e4 <__gethex+0x320>
 800b7d0:	f019 0f02 	tst.w	r9, #2
 800b7d4:	d006      	beq.n	800b7e4 <__gethex+0x320>
 800b7d6:	f8da 3000 	ldr.w	r3, [sl]
 800b7da:	ea49 0903 	orr.w	r9, r9, r3
 800b7de:	f019 0f01 	tst.w	r9, #1
 800b7e2:	d10e      	bne.n	800b802 <__gethex+0x33e>
 800b7e4:	f045 0510 	orr.w	r5, r5, #16
 800b7e8:	e032      	b.n	800b850 <__gethex+0x38c>
 800b7ea:	f04f 0901 	mov.w	r9, #1
 800b7ee:	e7d1      	b.n	800b794 <__gethex+0x2d0>
 800b7f0:	2501      	movs	r5, #1
 800b7f2:	e7e2      	b.n	800b7ba <__gethex+0x2f6>
 800b7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7f6:	f1c3 0301 	rsb	r3, r3, #1
 800b7fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d0f0      	beq.n	800b7e4 <__gethex+0x320>
 800b802:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b806:	f104 0314 	add.w	r3, r4, #20
 800b80a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b80e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b812:	f04f 0c00 	mov.w	ip, #0
 800b816:	4618      	mov	r0, r3
 800b818:	f853 2b04 	ldr.w	r2, [r3], #4
 800b81c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b820:	d01b      	beq.n	800b85a <__gethex+0x396>
 800b822:	3201      	adds	r2, #1
 800b824:	6002      	str	r2, [r0, #0]
 800b826:	2d02      	cmp	r5, #2
 800b828:	f104 0314 	add.w	r3, r4, #20
 800b82c:	d13c      	bne.n	800b8a8 <__gethex+0x3e4>
 800b82e:	f8d8 2000 	ldr.w	r2, [r8]
 800b832:	3a01      	subs	r2, #1
 800b834:	42b2      	cmp	r2, r6
 800b836:	d109      	bne.n	800b84c <__gethex+0x388>
 800b838:	1171      	asrs	r1, r6, #5
 800b83a:	2201      	movs	r2, #1
 800b83c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b840:	f006 061f 	and.w	r6, r6, #31
 800b844:	fa02 f606 	lsl.w	r6, r2, r6
 800b848:	421e      	tst	r6, r3
 800b84a:	d13a      	bne.n	800b8c2 <__gethex+0x3fe>
 800b84c:	f045 0520 	orr.w	r5, r5, #32
 800b850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b852:	601c      	str	r4, [r3, #0]
 800b854:	9b02      	ldr	r3, [sp, #8]
 800b856:	601f      	str	r7, [r3, #0]
 800b858:	e6b0      	b.n	800b5bc <__gethex+0xf8>
 800b85a:	4299      	cmp	r1, r3
 800b85c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b860:	d8d9      	bhi.n	800b816 <__gethex+0x352>
 800b862:	68a3      	ldr	r3, [r4, #8]
 800b864:	459b      	cmp	fp, r3
 800b866:	db17      	blt.n	800b898 <__gethex+0x3d4>
 800b868:	6861      	ldr	r1, [r4, #4]
 800b86a:	9801      	ldr	r0, [sp, #4]
 800b86c:	3101      	adds	r1, #1
 800b86e:	f000 f9bb 	bl	800bbe8 <_Balloc>
 800b872:	4681      	mov	r9, r0
 800b874:	b918      	cbnz	r0, 800b87e <__gethex+0x3ba>
 800b876:	4b1a      	ldr	r3, [pc, #104]	@ (800b8e0 <__gethex+0x41c>)
 800b878:	4602      	mov	r2, r0
 800b87a:	2184      	movs	r1, #132	@ 0x84
 800b87c:	e6c5      	b.n	800b60a <__gethex+0x146>
 800b87e:	6922      	ldr	r2, [r4, #16]
 800b880:	3202      	adds	r2, #2
 800b882:	f104 010c 	add.w	r1, r4, #12
 800b886:	0092      	lsls	r2, r2, #2
 800b888:	300c      	adds	r0, #12
 800b88a:	f7ff fd52 	bl	800b332 <memcpy>
 800b88e:	4621      	mov	r1, r4
 800b890:	9801      	ldr	r0, [sp, #4]
 800b892:	f000 f9e9 	bl	800bc68 <_Bfree>
 800b896:	464c      	mov	r4, r9
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8a0:	6122      	str	r2, [r4, #16]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	615a      	str	r2, [r3, #20]
 800b8a6:	e7be      	b.n	800b826 <__gethex+0x362>
 800b8a8:	6922      	ldr	r2, [r4, #16]
 800b8aa:	455a      	cmp	r2, fp
 800b8ac:	dd0b      	ble.n	800b8c6 <__gethex+0x402>
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f7ff fd9f 	bl	800b3f4 <rshift>
 800b8b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8ba:	3701      	adds	r7, #1
 800b8bc:	42bb      	cmp	r3, r7
 800b8be:	f6ff aee0 	blt.w	800b682 <__gethex+0x1be>
 800b8c2:	2501      	movs	r5, #1
 800b8c4:	e7c2      	b.n	800b84c <__gethex+0x388>
 800b8c6:	f016 061f 	ands.w	r6, r6, #31
 800b8ca:	d0fa      	beq.n	800b8c2 <__gethex+0x3fe>
 800b8cc:	4453      	add	r3, sl
 800b8ce:	f1c6 0620 	rsb	r6, r6, #32
 800b8d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b8d6:	f000 fa79 	bl	800bdcc <__hi0bits>
 800b8da:	42b0      	cmp	r0, r6
 800b8dc:	dbe7      	blt.n	800b8ae <__gethex+0x3ea>
 800b8de:	e7f0      	b.n	800b8c2 <__gethex+0x3fe>
 800b8e0:	0800d0c8 	.word	0x0800d0c8

0800b8e4 <L_shift>:
 800b8e4:	f1c2 0208 	rsb	r2, r2, #8
 800b8e8:	0092      	lsls	r2, r2, #2
 800b8ea:	b570      	push	{r4, r5, r6, lr}
 800b8ec:	f1c2 0620 	rsb	r6, r2, #32
 800b8f0:	6843      	ldr	r3, [r0, #4]
 800b8f2:	6804      	ldr	r4, [r0, #0]
 800b8f4:	fa03 f506 	lsl.w	r5, r3, r6
 800b8f8:	432c      	orrs	r4, r5
 800b8fa:	40d3      	lsrs	r3, r2
 800b8fc:	6004      	str	r4, [r0, #0]
 800b8fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800b902:	4288      	cmp	r0, r1
 800b904:	d3f4      	bcc.n	800b8f0 <L_shift+0xc>
 800b906:	bd70      	pop	{r4, r5, r6, pc}

0800b908 <__match>:
 800b908:	b530      	push	{r4, r5, lr}
 800b90a:	6803      	ldr	r3, [r0, #0]
 800b90c:	3301      	adds	r3, #1
 800b90e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b912:	b914      	cbnz	r4, 800b91a <__match+0x12>
 800b914:	6003      	str	r3, [r0, #0]
 800b916:	2001      	movs	r0, #1
 800b918:	bd30      	pop	{r4, r5, pc}
 800b91a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b91e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b922:	2d19      	cmp	r5, #25
 800b924:	bf98      	it	ls
 800b926:	3220      	addls	r2, #32
 800b928:	42a2      	cmp	r2, r4
 800b92a:	d0f0      	beq.n	800b90e <__match+0x6>
 800b92c:	2000      	movs	r0, #0
 800b92e:	e7f3      	b.n	800b918 <__match+0x10>

0800b930 <__hexnan>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	680b      	ldr	r3, [r1, #0]
 800b936:	6801      	ldr	r1, [r0, #0]
 800b938:	115e      	asrs	r6, r3, #5
 800b93a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b93e:	f013 031f 	ands.w	r3, r3, #31
 800b942:	b087      	sub	sp, #28
 800b944:	bf18      	it	ne
 800b946:	3604      	addne	r6, #4
 800b948:	2500      	movs	r5, #0
 800b94a:	1f37      	subs	r7, r6, #4
 800b94c:	4682      	mov	sl, r0
 800b94e:	4690      	mov	r8, r2
 800b950:	9301      	str	r3, [sp, #4]
 800b952:	f846 5c04 	str.w	r5, [r6, #-4]
 800b956:	46b9      	mov	r9, r7
 800b958:	463c      	mov	r4, r7
 800b95a:	9502      	str	r5, [sp, #8]
 800b95c:	46ab      	mov	fp, r5
 800b95e:	784a      	ldrb	r2, [r1, #1]
 800b960:	1c4b      	adds	r3, r1, #1
 800b962:	9303      	str	r3, [sp, #12]
 800b964:	b342      	cbz	r2, 800b9b8 <__hexnan+0x88>
 800b966:	4610      	mov	r0, r2
 800b968:	9105      	str	r1, [sp, #20]
 800b96a:	9204      	str	r2, [sp, #16]
 800b96c:	f7ff fd94 	bl	800b498 <__hexdig_fun>
 800b970:	2800      	cmp	r0, #0
 800b972:	d151      	bne.n	800ba18 <__hexnan+0xe8>
 800b974:	9a04      	ldr	r2, [sp, #16]
 800b976:	9905      	ldr	r1, [sp, #20]
 800b978:	2a20      	cmp	r2, #32
 800b97a:	d818      	bhi.n	800b9ae <__hexnan+0x7e>
 800b97c:	9b02      	ldr	r3, [sp, #8]
 800b97e:	459b      	cmp	fp, r3
 800b980:	dd13      	ble.n	800b9aa <__hexnan+0x7a>
 800b982:	454c      	cmp	r4, r9
 800b984:	d206      	bcs.n	800b994 <__hexnan+0x64>
 800b986:	2d07      	cmp	r5, #7
 800b988:	dc04      	bgt.n	800b994 <__hexnan+0x64>
 800b98a:	462a      	mov	r2, r5
 800b98c:	4649      	mov	r1, r9
 800b98e:	4620      	mov	r0, r4
 800b990:	f7ff ffa8 	bl	800b8e4 <L_shift>
 800b994:	4544      	cmp	r4, r8
 800b996:	d952      	bls.n	800ba3e <__hexnan+0x10e>
 800b998:	2300      	movs	r3, #0
 800b99a:	f1a4 0904 	sub.w	r9, r4, #4
 800b99e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9a2:	f8cd b008 	str.w	fp, [sp, #8]
 800b9a6:	464c      	mov	r4, r9
 800b9a8:	461d      	mov	r5, r3
 800b9aa:	9903      	ldr	r1, [sp, #12]
 800b9ac:	e7d7      	b.n	800b95e <__hexnan+0x2e>
 800b9ae:	2a29      	cmp	r2, #41	@ 0x29
 800b9b0:	d157      	bne.n	800ba62 <__hexnan+0x132>
 800b9b2:	3102      	adds	r1, #2
 800b9b4:	f8ca 1000 	str.w	r1, [sl]
 800b9b8:	f1bb 0f00 	cmp.w	fp, #0
 800b9bc:	d051      	beq.n	800ba62 <__hexnan+0x132>
 800b9be:	454c      	cmp	r4, r9
 800b9c0:	d206      	bcs.n	800b9d0 <__hexnan+0xa0>
 800b9c2:	2d07      	cmp	r5, #7
 800b9c4:	dc04      	bgt.n	800b9d0 <__hexnan+0xa0>
 800b9c6:	462a      	mov	r2, r5
 800b9c8:	4649      	mov	r1, r9
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f7ff ff8a 	bl	800b8e4 <L_shift>
 800b9d0:	4544      	cmp	r4, r8
 800b9d2:	d936      	bls.n	800ba42 <__hexnan+0x112>
 800b9d4:	f1a8 0204 	sub.w	r2, r8, #4
 800b9d8:	4623      	mov	r3, r4
 800b9da:	f853 1b04 	ldr.w	r1, [r3], #4
 800b9de:	f842 1f04 	str.w	r1, [r2, #4]!
 800b9e2:	429f      	cmp	r7, r3
 800b9e4:	d2f9      	bcs.n	800b9da <__hexnan+0xaa>
 800b9e6:	1b3b      	subs	r3, r7, r4
 800b9e8:	f023 0303 	bic.w	r3, r3, #3
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	3401      	adds	r4, #1
 800b9f0:	3e03      	subs	r6, #3
 800b9f2:	42b4      	cmp	r4, r6
 800b9f4:	bf88      	it	hi
 800b9f6:	2304      	movhi	r3, #4
 800b9f8:	4443      	add	r3, r8
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f843 2b04 	str.w	r2, [r3], #4
 800ba00:	429f      	cmp	r7, r3
 800ba02:	d2fb      	bcs.n	800b9fc <__hexnan+0xcc>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	b91b      	cbnz	r3, 800ba10 <__hexnan+0xe0>
 800ba08:	4547      	cmp	r7, r8
 800ba0a:	d128      	bne.n	800ba5e <__hexnan+0x12e>
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	603b      	str	r3, [r7, #0]
 800ba10:	2005      	movs	r0, #5
 800ba12:	b007      	add	sp, #28
 800ba14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba18:	3501      	adds	r5, #1
 800ba1a:	2d08      	cmp	r5, #8
 800ba1c:	f10b 0b01 	add.w	fp, fp, #1
 800ba20:	dd06      	ble.n	800ba30 <__hexnan+0x100>
 800ba22:	4544      	cmp	r4, r8
 800ba24:	d9c1      	bls.n	800b9aa <__hexnan+0x7a>
 800ba26:	2300      	movs	r3, #0
 800ba28:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba2c:	2501      	movs	r5, #1
 800ba2e:	3c04      	subs	r4, #4
 800ba30:	6822      	ldr	r2, [r4, #0]
 800ba32:	f000 000f 	and.w	r0, r0, #15
 800ba36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ba3a:	6020      	str	r0, [r4, #0]
 800ba3c:	e7b5      	b.n	800b9aa <__hexnan+0x7a>
 800ba3e:	2508      	movs	r5, #8
 800ba40:	e7b3      	b.n	800b9aa <__hexnan+0x7a>
 800ba42:	9b01      	ldr	r3, [sp, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d0dd      	beq.n	800ba04 <__hexnan+0xd4>
 800ba48:	f1c3 0320 	rsb	r3, r3, #32
 800ba4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba50:	40da      	lsrs	r2, r3
 800ba52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ba56:	4013      	ands	r3, r2
 800ba58:	f846 3c04 	str.w	r3, [r6, #-4]
 800ba5c:	e7d2      	b.n	800ba04 <__hexnan+0xd4>
 800ba5e:	3f04      	subs	r7, #4
 800ba60:	e7d0      	b.n	800ba04 <__hexnan+0xd4>
 800ba62:	2004      	movs	r0, #4
 800ba64:	e7d5      	b.n	800ba12 <__hexnan+0xe2>
	...

0800ba68 <sbrk_aligned>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	4e0f      	ldr	r6, [pc, #60]	@ (800baa8 <sbrk_aligned+0x40>)
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	6831      	ldr	r1, [r6, #0]
 800ba70:	4605      	mov	r5, r0
 800ba72:	b911      	cbnz	r1, 800ba7a <sbrk_aligned+0x12>
 800ba74:	f000 fe24 	bl	800c6c0 <_sbrk_r>
 800ba78:	6030      	str	r0, [r6, #0]
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	f000 fe1f 	bl	800c6c0 <_sbrk_r>
 800ba82:	1c43      	adds	r3, r0, #1
 800ba84:	d103      	bne.n	800ba8e <sbrk_aligned+0x26>
 800ba86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	bd70      	pop	{r4, r5, r6, pc}
 800ba8e:	1cc4      	adds	r4, r0, #3
 800ba90:	f024 0403 	bic.w	r4, r4, #3
 800ba94:	42a0      	cmp	r0, r4
 800ba96:	d0f8      	beq.n	800ba8a <sbrk_aligned+0x22>
 800ba98:	1a21      	subs	r1, r4, r0
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f000 fe10 	bl	800c6c0 <_sbrk_r>
 800baa0:	3001      	adds	r0, #1
 800baa2:	d1f2      	bne.n	800ba8a <sbrk_aligned+0x22>
 800baa4:	e7ef      	b.n	800ba86 <sbrk_aligned+0x1e>
 800baa6:	bf00      	nop
 800baa8:	200025dc 	.word	0x200025dc

0800baac <_malloc_r>:
 800baac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bab0:	1ccd      	adds	r5, r1, #3
 800bab2:	f025 0503 	bic.w	r5, r5, #3
 800bab6:	3508      	adds	r5, #8
 800bab8:	2d0c      	cmp	r5, #12
 800baba:	bf38      	it	cc
 800babc:	250c      	movcc	r5, #12
 800babe:	2d00      	cmp	r5, #0
 800bac0:	4606      	mov	r6, r0
 800bac2:	db01      	blt.n	800bac8 <_malloc_r+0x1c>
 800bac4:	42a9      	cmp	r1, r5
 800bac6:	d904      	bls.n	800bad2 <_malloc_r+0x26>
 800bac8:	230c      	movs	r3, #12
 800baca:	6033      	str	r3, [r6, #0]
 800bacc:	2000      	movs	r0, #0
 800bace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bba8 <_malloc_r+0xfc>
 800bad6:	f000 f87b 	bl	800bbd0 <__malloc_lock>
 800bada:	f8d8 3000 	ldr.w	r3, [r8]
 800bade:	461c      	mov	r4, r3
 800bae0:	bb44      	cbnz	r4, 800bb34 <_malloc_r+0x88>
 800bae2:	4629      	mov	r1, r5
 800bae4:	4630      	mov	r0, r6
 800bae6:	f7ff ffbf 	bl	800ba68 <sbrk_aligned>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	4604      	mov	r4, r0
 800baee:	d158      	bne.n	800bba2 <_malloc_r+0xf6>
 800baf0:	f8d8 4000 	ldr.w	r4, [r8]
 800baf4:	4627      	mov	r7, r4
 800baf6:	2f00      	cmp	r7, #0
 800baf8:	d143      	bne.n	800bb82 <_malloc_r+0xd6>
 800bafa:	2c00      	cmp	r4, #0
 800bafc:	d04b      	beq.n	800bb96 <_malloc_r+0xea>
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	4639      	mov	r1, r7
 800bb02:	4630      	mov	r0, r6
 800bb04:	eb04 0903 	add.w	r9, r4, r3
 800bb08:	f000 fdda 	bl	800c6c0 <_sbrk_r>
 800bb0c:	4581      	cmp	r9, r0
 800bb0e:	d142      	bne.n	800bb96 <_malloc_r+0xea>
 800bb10:	6821      	ldr	r1, [r4, #0]
 800bb12:	1a6d      	subs	r5, r5, r1
 800bb14:	4629      	mov	r1, r5
 800bb16:	4630      	mov	r0, r6
 800bb18:	f7ff ffa6 	bl	800ba68 <sbrk_aligned>
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	d03a      	beq.n	800bb96 <_malloc_r+0xea>
 800bb20:	6823      	ldr	r3, [r4, #0]
 800bb22:	442b      	add	r3, r5
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	f8d8 3000 	ldr.w	r3, [r8]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	bb62      	cbnz	r2, 800bb88 <_malloc_r+0xdc>
 800bb2e:	f8c8 7000 	str.w	r7, [r8]
 800bb32:	e00f      	b.n	800bb54 <_malloc_r+0xa8>
 800bb34:	6822      	ldr	r2, [r4, #0]
 800bb36:	1b52      	subs	r2, r2, r5
 800bb38:	d420      	bmi.n	800bb7c <_malloc_r+0xd0>
 800bb3a:	2a0b      	cmp	r2, #11
 800bb3c:	d917      	bls.n	800bb6e <_malloc_r+0xc2>
 800bb3e:	1961      	adds	r1, r4, r5
 800bb40:	42a3      	cmp	r3, r4
 800bb42:	6025      	str	r5, [r4, #0]
 800bb44:	bf18      	it	ne
 800bb46:	6059      	strne	r1, [r3, #4]
 800bb48:	6863      	ldr	r3, [r4, #4]
 800bb4a:	bf08      	it	eq
 800bb4c:	f8c8 1000 	streq.w	r1, [r8]
 800bb50:	5162      	str	r2, [r4, r5]
 800bb52:	604b      	str	r3, [r1, #4]
 800bb54:	4630      	mov	r0, r6
 800bb56:	f000 f841 	bl	800bbdc <__malloc_unlock>
 800bb5a:	f104 000b 	add.w	r0, r4, #11
 800bb5e:	1d23      	adds	r3, r4, #4
 800bb60:	f020 0007 	bic.w	r0, r0, #7
 800bb64:	1ac2      	subs	r2, r0, r3
 800bb66:	bf1c      	itt	ne
 800bb68:	1a1b      	subne	r3, r3, r0
 800bb6a:	50a3      	strne	r3, [r4, r2]
 800bb6c:	e7af      	b.n	800bace <_malloc_r+0x22>
 800bb6e:	6862      	ldr	r2, [r4, #4]
 800bb70:	42a3      	cmp	r3, r4
 800bb72:	bf0c      	ite	eq
 800bb74:	f8c8 2000 	streq.w	r2, [r8]
 800bb78:	605a      	strne	r2, [r3, #4]
 800bb7a:	e7eb      	b.n	800bb54 <_malloc_r+0xa8>
 800bb7c:	4623      	mov	r3, r4
 800bb7e:	6864      	ldr	r4, [r4, #4]
 800bb80:	e7ae      	b.n	800bae0 <_malloc_r+0x34>
 800bb82:	463c      	mov	r4, r7
 800bb84:	687f      	ldr	r7, [r7, #4]
 800bb86:	e7b6      	b.n	800baf6 <_malloc_r+0x4a>
 800bb88:	461a      	mov	r2, r3
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	42a3      	cmp	r3, r4
 800bb8e:	d1fb      	bne.n	800bb88 <_malloc_r+0xdc>
 800bb90:	2300      	movs	r3, #0
 800bb92:	6053      	str	r3, [r2, #4]
 800bb94:	e7de      	b.n	800bb54 <_malloc_r+0xa8>
 800bb96:	230c      	movs	r3, #12
 800bb98:	6033      	str	r3, [r6, #0]
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f000 f81e 	bl	800bbdc <__malloc_unlock>
 800bba0:	e794      	b.n	800bacc <_malloc_r+0x20>
 800bba2:	6005      	str	r5, [r0, #0]
 800bba4:	e7d6      	b.n	800bb54 <_malloc_r+0xa8>
 800bba6:	bf00      	nop
 800bba8:	200025e0 	.word	0x200025e0

0800bbac <__ascii_mbtowc>:
 800bbac:	b082      	sub	sp, #8
 800bbae:	b901      	cbnz	r1, 800bbb2 <__ascii_mbtowc+0x6>
 800bbb0:	a901      	add	r1, sp, #4
 800bbb2:	b142      	cbz	r2, 800bbc6 <__ascii_mbtowc+0x1a>
 800bbb4:	b14b      	cbz	r3, 800bbca <__ascii_mbtowc+0x1e>
 800bbb6:	7813      	ldrb	r3, [r2, #0]
 800bbb8:	600b      	str	r3, [r1, #0]
 800bbba:	7812      	ldrb	r2, [r2, #0]
 800bbbc:	1e10      	subs	r0, r2, #0
 800bbbe:	bf18      	it	ne
 800bbc0:	2001      	movne	r0, #1
 800bbc2:	b002      	add	sp, #8
 800bbc4:	4770      	bx	lr
 800bbc6:	4610      	mov	r0, r2
 800bbc8:	e7fb      	b.n	800bbc2 <__ascii_mbtowc+0x16>
 800bbca:	f06f 0001 	mvn.w	r0, #1
 800bbce:	e7f8      	b.n	800bbc2 <__ascii_mbtowc+0x16>

0800bbd0 <__malloc_lock>:
 800bbd0:	4801      	ldr	r0, [pc, #4]	@ (800bbd8 <__malloc_lock+0x8>)
 800bbd2:	f7ff bbac 	b.w	800b32e <__retarget_lock_acquire_recursive>
 800bbd6:	bf00      	nop
 800bbd8:	200025d8 	.word	0x200025d8

0800bbdc <__malloc_unlock>:
 800bbdc:	4801      	ldr	r0, [pc, #4]	@ (800bbe4 <__malloc_unlock+0x8>)
 800bbde:	f7ff bba7 	b.w	800b330 <__retarget_lock_release_recursive>
 800bbe2:	bf00      	nop
 800bbe4:	200025d8 	.word	0x200025d8

0800bbe8 <_Balloc>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	69c6      	ldr	r6, [r0, #28]
 800bbec:	4604      	mov	r4, r0
 800bbee:	460d      	mov	r5, r1
 800bbf0:	b976      	cbnz	r6, 800bc10 <_Balloc+0x28>
 800bbf2:	2010      	movs	r0, #16
 800bbf4:	f000 fda6 	bl	800c744 <malloc>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	61e0      	str	r0, [r4, #28]
 800bbfc:	b920      	cbnz	r0, 800bc08 <_Balloc+0x20>
 800bbfe:	4b18      	ldr	r3, [pc, #96]	@ (800bc60 <_Balloc+0x78>)
 800bc00:	4818      	ldr	r0, [pc, #96]	@ (800bc64 <_Balloc+0x7c>)
 800bc02:	216b      	movs	r1, #107	@ 0x6b
 800bc04:	f000 fd6c 	bl	800c6e0 <__assert_func>
 800bc08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc0c:	6006      	str	r6, [r0, #0]
 800bc0e:	60c6      	str	r6, [r0, #12]
 800bc10:	69e6      	ldr	r6, [r4, #28]
 800bc12:	68f3      	ldr	r3, [r6, #12]
 800bc14:	b183      	cbz	r3, 800bc38 <_Balloc+0x50>
 800bc16:	69e3      	ldr	r3, [r4, #28]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc1e:	b9b8      	cbnz	r0, 800bc50 <_Balloc+0x68>
 800bc20:	2101      	movs	r1, #1
 800bc22:	fa01 f605 	lsl.w	r6, r1, r5
 800bc26:	1d72      	adds	r2, r6, #5
 800bc28:	0092      	lsls	r2, r2, #2
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 fd76 	bl	800c71c <_calloc_r>
 800bc30:	b160      	cbz	r0, 800bc4c <_Balloc+0x64>
 800bc32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc36:	e00e      	b.n	800bc56 <_Balloc+0x6e>
 800bc38:	2221      	movs	r2, #33	@ 0x21
 800bc3a:	2104      	movs	r1, #4
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f000 fd6d 	bl	800c71c <_calloc_r>
 800bc42:	69e3      	ldr	r3, [r4, #28]
 800bc44:	60f0      	str	r0, [r6, #12]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1e4      	bne.n	800bc16 <_Balloc+0x2e>
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}
 800bc50:	6802      	ldr	r2, [r0, #0]
 800bc52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc56:	2300      	movs	r3, #0
 800bc58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc5c:	e7f7      	b.n	800bc4e <_Balloc+0x66>
 800bc5e:	bf00      	nop
 800bc60:	0800d139 	.word	0x0800d139
 800bc64:	0800d150 	.word	0x0800d150

0800bc68 <_Bfree>:
 800bc68:	b570      	push	{r4, r5, r6, lr}
 800bc6a:	69c6      	ldr	r6, [r0, #28]
 800bc6c:	4605      	mov	r5, r0
 800bc6e:	460c      	mov	r4, r1
 800bc70:	b976      	cbnz	r6, 800bc90 <_Bfree+0x28>
 800bc72:	2010      	movs	r0, #16
 800bc74:	f000 fd66 	bl	800c744 <malloc>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	61e8      	str	r0, [r5, #28]
 800bc7c:	b920      	cbnz	r0, 800bc88 <_Bfree+0x20>
 800bc7e:	4b09      	ldr	r3, [pc, #36]	@ (800bca4 <_Bfree+0x3c>)
 800bc80:	4809      	ldr	r0, [pc, #36]	@ (800bca8 <_Bfree+0x40>)
 800bc82:	218f      	movs	r1, #143	@ 0x8f
 800bc84:	f000 fd2c 	bl	800c6e0 <__assert_func>
 800bc88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc8c:	6006      	str	r6, [r0, #0]
 800bc8e:	60c6      	str	r6, [r0, #12]
 800bc90:	b13c      	cbz	r4, 800bca2 <_Bfree+0x3a>
 800bc92:	69eb      	ldr	r3, [r5, #28]
 800bc94:	6862      	ldr	r2, [r4, #4]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc9c:	6021      	str	r1, [r4, #0]
 800bc9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bca2:	bd70      	pop	{r4, r5, r6, pc}
 800bca4:	0800d139 	.word	0x0800d139
 800bca8:	0800d150 	.word	0x0800d150

0800bcac <__multadd>:
 800bcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb0:	690d      	ldr	r5, [r1, #16]
 800bcb2:	4607      	mov	r7, r0
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	461e      	mov	r6, r3
 800bcb8:	f101 0c14 	add.w	ip, r1, #20
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	f8dc 3000 	ldr.w	r3, [ip]
 800bcc2:	b299      	uxth	r1, r3
 800bcc4:	fb02 6101 	mla	r1, r2, r1, r6
 800bcc8:	0c1e      	lsrs	r6, r3, #16
 800bcca:	0c0b      	lsrs	r3, r1, #16
 800bccc:	fb02 3306 	mla	r3, r2, r6, r3
 800bcd0:	b289      	uxth	r1, r1
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcd8:	4285      	cmp	r5, r0
 800bcda:	f84c 1b04 	str.w	r1, [ip], #4
 800bcde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bce2:	dcec      	bgt.n	800bcbe <__multadd+0x12>
 800bce4:	b30e      	cbz	r6, 800bd2a <__multadd+0x7e>
 800bce6:	68a3      	ldr	r3, [r4, #8]
 800bce8:	42ab      	cmp	r3, r5
 800bcea:	dc19      	bgt.n	800bd20 <__multadd+0x74>
 800bcec:	6861      	ldr	r1, [r4, #4]
 800bcee:	4638      	mov	r0, r7
 800bcf0:	3101      	adds	r1, #1
 800bcf2:	f7ff ff79 	bl	800bbe8 <_Balloc>
 800bcf6:	4680      	mov	r8, r0
 800bcf8:	b928      	cbnz	r0, 800bd06 <__multadd+0x5a>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	4b0c      	ldr	r3, [pc, #48]	@ (800bd30 <__multadd+0x84>)
 800bcfe:	480d      	ldr	r0, [pc, #52]	@ (800bd34 <__multadd+0x88>)
 800bd00:	21ba      	movs	r1, #186	@ 0xba
 800bd02:	f000 fced 	bl	800c6e0 <__assert_func>
 800bd06:	6922      	ldr	r2, [r4, #16]
 800bd08:	3202      	adds	r2, #2
 800bd0a:	f104 010c 	add.w	r1, r4, #12
 800bd0e:	0092      	lsls	r2, r2, #2
 800bd10:	300c      	adds	r0, #12
 800bd12:	f7ff fb0e 	bl	800b332 <memcpy>
 800bd16:	4621      	mov	r1, r4
 800bd18:	4638      	mov	r0, r7
 800bd1a:	f7ff ffa5 	bl	800bc68 <_Bfree>
 800bd1e:	4644      	mov	r4, r8
 800bd20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd24:	3501      	adds	r5, #1
 800bd26:	615e      	str	r6, [r3, #20]
 800bd28:	6125      	str	r5, [r4, #16]
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd30:	0800d0c8 	.word	0x0800d0c8
 800bd34:	0800d150 	.word	0x0800d150

0800bd38 <__s2b>:
 800bd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	4615      	mov	r5, r2
 800bd40:	461f      	mov	r7, r3
 800bd42:	2209      	movs	r2, #9
 800bd44:	3308      	adds	r3, #8
 800bd46:	4606      	mov	r6, r0
 800bd48:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	2201      	movs	r2, #1
 800bd50:	429a      	cmp	r2, r3
 800bd52:	db09      	blt.n	800bd68 <__s2b+0x30>
 800bd54:	4630      	mov	r0, r6
 800bd56:	f7ff ff47 	bl	800bbe8 <_Balloc>
 800bd5a:	b940      	cbnz	r0, 800bd6e <__s2b+0x36>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	4b19      	ldr	r3, [pc, #100]	@ (800bdc4 <__s2b+0x8c>)
 800bd60:	4819      	ldr	r0, [pc, #100]	@ (800bdc8 <__s2b+0x90>)
 800bd62:	21d3      	movs	r1, #211	@ 0xd3
 800bd64:	f000 fcbc 	bl	800c6e0 <__assert_func>
 800bd68:	0052      	lsls	r2, r2, #1
 800bd6a:	3101      	adds	r1, #1
 800bd6c:	e7f0      	b.n	800bd50 <__s2b+0x18>
 800bd6e:	9b08      	ldr	r3, [sp, #32]
 800bd70:	6143      	str	r3, [r0, #20]
 800bd72:	2d09      	cmp	r5, #9
 800bd74:	f04f 0301 	mov.w	r3, #1
 800bd78:	6103      	str	r3, [r0, #16]
 800bd7a:	dd16      	ble.n	800bdaa <__s2b+0x72>
 800bd7c:	f104 0909 	add.w	r9, r4, #9
 800bd80:	46c8      	mov	r8, r9
 800bd82:	442c      	add	r4, r5
 800bd84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd88:	4601      	mov	r1, r0
 800bd8a:	3b30      	subs	r3, #48	@ 0x30
 800bd8c:	220a      	movs	r2, #10
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f7ff ff8c 	bl	800bcac <__multadd>
 800bd94:	45a0      	cmp	r8, r4
 800bd96:	d1f5      	bne.n	800bd84 <__s2b+0x4c>
 800bd98:	f1a5 0408 	sub.w	r4, r5, #8
 800bd9c:	444c      	add	r4, r9
 800bd9e:	1b2d      	subs	r5, r5, r4
 800bda0:	1963      	adds	r3, r4, r5
 800bda2:	42bb      	cmp	r3, r7
 800bda4:	db04      	blt.n	800bdb0 <__s2b+0x78>
 800bda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdaa:	340a      	adds	r4, #10
 800bdac:	2509      	movs	r5, #9
 800bdae:	e7f6      	b.n	800bd9e <__s2b+0x66>
 800bdb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bdb4:	4601      	mov	r1, r0
 800bdb6:	3b30      	subs	r3, #48	@ 0x30
 800bdb8:	220a      	movs	r2, #10
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7ff ff76 	bl	800bcac <__multadd>
 800bdc0:	e7ee      	b.n	800bda0 <__s2b+0x68>
 800bdc2:	bf00      	nop
 800bdc4:	0800d0c8 	.word	0x0800d0c8
 800bdc8:	0800d150 	.word	0x0800d150

0800bdcc <__hi0bits>:
 800bdcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	bf36      	itet	cc
 800bdd4:	0403      	lslcc	r3, r0, #16
 800bdd6:	2000      	movcs	r0, #0
 800bdd8:	2010      	movcc	r0, #16
 800bdda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdde:	bf3c      	itt	cc
 800bde0:	021b      	lslcc	r3, r3, #8
 800bde2:	3008      	addcc	r0, #8
 800bde4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bde8:	bf3c      	itt	cc
 800bdea:	011b      	lslcc	r3, r3, #4
 800bdec:	3004      	addcc	r0, #4
 800bdee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdf2:	bf3c      	itt	cc
 800bdf4:	009b      	lslcc	r3, r3, #2
 800bdf6:	3002      	addcc	r0, #2
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	db05      	blt.n	800be08 <__hi0bits+0x3c>
 800bdfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be00:	f100 0001 	add.w	r0, r0, #1
 800be04:	bf08      	it	eq
 800be06:	2020      	moveq	r0, #32
 800be08:	4770      	bx	lr

0800be0a <__lo0bits>:
 800be0a:	6803      	ldr	r3, [r0, #0]
 800be0c:	4602      	mov	r2, r0
 800be0e:	f013 0007 	ands.w	r0, r3, #7
 800be12:	d00b      	beq.n	800be2c <__lo0bits+0x22>
 800be14:	07d9      	lsls	r1, r3, #31
 800be16:	d421      	bmi.n	800be5c <__lo0bits+0x52>
 800be18:	0798      	lsls	r0, r3, #30
 800be1a:	bf49      	itett	mi
 800be1c:	085b      	lsrmi	r3, r3, #1
 800be1e:	089b      	lsrpl	r3, r3, #2
 800be20:	2001      	movmi	r0, #1
 800be22:	6013      	strmi	r3, [r2, #0]
 800be24:	bf5c      	itt	pl
 800be26:	6013      	strpl	r3, [r2, #0]
 800be28:	2002      	movpl	r0, #2
 800be2a:	4770      	bx	lr
 800be2c:	b299      	uxth	r1, r3
 800be2e:	b909      	cbnz	r1, 800be34 <__lo0bits+0x2a>
 800be30:	0c1b      	lsrs	r3, r3, #16
 800be32:	2010      	movs	r0, #16
 800be34:	b2d9      	uxtb	r1, r3
 800be36:	b909      	cbnz	r1, 800be3c <__lo0bits+0x32>
 800be38:	3008      	adds	r0, #8
 800be3a:	0a1b      	lsrs	r3, r3, #8
 800be3c:	0719      	lsls	r1, r3, #28
 800be3e:	bf04      	itt	eq
 800be40:	091b      	lsreq	r3, r3, #4
 800be42:	3004      	addeq	r0, #4
 800be44:	0799      	lsls	r1, r3, #30
 800be46:	bf04      	itt	eq
 800be48:	089b      	lsreq	r3, r3, #2
 800be4a:	3002      	addeq	r0, #2
 800be4c:	07d9      	lsls	r1, r3, #31
 800be4e:	d403      	bmi.n	800be58 <__lo0bits+0x4e>
 800be50:	085b      	lsrs	r3, r3, #1
 800be52:	f100 0001 	add.w	r0, r0, #1
 800be56:	d003      	beq.n	800be60 <__lo0bits+0x56>
 800be58:	6013      	str	r3, [r2, #0]
 800be5a:	4770      	bx	lr
 800be5c:	2000      	movs	r0, #0
 800be5e:	4770      	bx	lr
 800be60:	2020      	movs	r0, #32
 800be62:	4770      	bx	lr

0800be64 <__i2b>:
 800be64:	b510      	push	{r4, lr}
 800be66:	460c      	mov	r4, r1
 800be68:	2101      	movs	r1, #1
 800be6a:	f7ff febd 	bl	800bbe8 <_Balloc>
 800be6e:	4602      	mov	r2, r0
 800be70:	b928      	cbnz	r0, 800be7e <__i2b+0x1a>
 800be72:	4b05      	ldr	r3, [pc, #20]	@ (800be88 <__i2b+0x24>)
 800be74:	4805      	ldr	r0, [pc, #20]	@ (800be8c <__i2b+0x28>)
 800be76:	f240 1145 	movw	r1, #325	@ 0x145
 800be7a:	f000 fc31 	bl	800c6e0 <__assert_func>
 800be7e:	2301      	movs	r3, #1
 800be80:	6144      	str	r4, [r0, #20]
 800be82:	6103      	str	r3, [r0, #16]
 800be84:	bd10      	pop	{r4, pc}
 800be86:	bf00      	nop
 800be88:	0800d0c8 	.word	0x0800d0c8
 800be8c:	0800d150 	.word	0x0800d150

0800be90 <__multiply>:
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	4614      	mov	r4, r2
 800be96:	690a      	ldr	r2, [r1, #16]
 800be98:	6923      	ldr	r3, [r4, #16]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	bfa8      	it	ge
 800be9e:	4623      	movge	r3, r4
 800bea0:	460f      	mov	r7, r1
 800bea2:	bfa4      	itt	ge
 800bea4:	460c      	movge	r4, r1
 800bea6:	461f      	movge	r7, r3
 800bea8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800beac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800beb0:	68a3      	ldr	r3, [r4, #8]
 800beb2:	6861      	ldr	r1, [r4, #4]
 800beb4:	eb0a 0609 	add.w	r6, sl, r9
 800beb8:	42b3      	cmp	r3, r6
 800beba:	b085      	sub	sp, #20
 800bebc:	bfb8      	it	lt
 800bebe:	3101      	addlt	r1, #1
 800bec0:	f7ff fe92 	bl	800bbe8 <_Balloc>
 800bec4:	b930      	cbnz	r0, 800bed4 <__multiply+0x44>
 800bec6:	4602      	mov	r2, r0
 800bec8:	4b44      	ldr	r3, [pc, #272]	@ (800bfdc <__multiply+0x14c>)
 800beca:	4845      	ldr	r0, [pc, #276]	@ (800bfe0 <__multiply+0x150>)
 800becc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bed0:	f000 fc06 	bl	800c6e0 <__assert_func>
 800bed4:	f100 0514 	add.w	r5, r0, #20
 800bed8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bedc:	462b      	mov	r3, r5
 800bede:	2200      	movs	r2, #0
 800bee0:	4543      	cmp	r3, r8
 800bee2:	d321      	bcc.n	800bf28 <__multiply+0x98>
 800bee4:	f107 0114 	add.w	r1, r7, #20
 800bee8:	f104 0214 	add.w	r2, r4, #20
 800beec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bef0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bef4:	9302      	str	r3, [sp, #8]
 800bef6:	1b13      	subs	r3, r2, r4
 800bef8:	3b15      	subs	r3, #21
 800befa:	f023 0303 	bic.w	r3, r3, #3
 800befe:	3304      	adds	r3, #4
 800bf00:	f104 0715 	add.w	r7, r4, #21
 800bf04:	42ba      	cmp	r2, r7
 800bf06:	bf38      	it	cc
 800bf08:	2304      	movcc	r3, #4
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	9b02      	ldr	r3, [sp, #8]
 800bf0e:	9103      	str	r1, [sp, #12]
 800bf10:	428b      	cmp	r3, r1
 800bf12:	d80c      	bhi.n	800bf2e <__multiply+0x9e>
 800bf14:	2e00      	cmp	r6, #0
 800bf16:	dd03      	ble.n	800bf20 <__multiply+0x90>
 800bf18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d05b      	beq.n	800bfd8 <__multiply+0x148>
 800bf20:	6106      	str	r6, [r0, #16]
 800bf22:	b005      	add	sp, #20
 800bf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf28:	f843 2b04 	str.w	r2, [r3], #4
 800bf2c:	e7d8      	b.n	800bee0 <__multiply+0x50>
 800bf2e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bf32:	f1ba 0f00 	cmp.w	sl, #0
 800bf36:	d024      	beq.n	800bf82 <__multiply+0xf2>
 800bf38:	f104 0e14 	add.w	lr, r4, #20
 800bf3c:	46a9      	mov	r9, r5
 800bf3e:	f04f 0c00 	mov.w	ip, #0
 800bf42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf46:	f8d9 3000 	ldr.w	r3, [r9]
 800bf4a:	fa1f fb87 	uxth.w	fp, r7
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	fb0a 330b 	mla	r3, sl, fp, r3
 800bf54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bf58:	f8d9 7000 	ldr.w	r7, [r9]
 800bf5c:	4463      	add	r3, ip
 800bf5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf62:	fb0a c70b 	mla	r7, sl, fp, ip
 800bf66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf70:	4572      	cmp	r2, lr
 800bf72:	f849 3b04 	str.w	r3, [r9], #4
 800bf76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf7a:	d8e2      	bhi.n	800bf42 <__multiply+0xb2>
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	f845 c003 	str.w	ip, [r5, r3]
 800bf82:	9b03      	ldr	r3, [sp, #12]
 800bf84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf88:	3104      	adds	r1, #4
 800bf8a:	f1b9 0f00 	cmp.w	r9, #0
 800bf8e:	d021      	beq.n	800bfd4 <__multiply+0x144>
 800bf90:	682b      	ldr	r3, [r5, #0]
 800bf92:	f104 0c14 	add.w	ip, r4, #20
 800bf96:	46ae      	mov	lr, r5
 800bf98:	f04f 0a00 	mov.w	sl, #0
 800bf9c:	f8bc b000 	ldrh.w	fp, [ip]
 800bfa0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bfa4:	fb09 770b 	mla	r7, r9, fp, r7
 800bfa8:	4457      	add	r7, sl
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bfb0:	f84e 3b04 	str.w	r3, [lr], #4
 800bfb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bfb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfbc:	f8be 3000 	ldrh.w	r3, [lr]
 800bfc0:	fb09 330a 	mla	r3, r9, sl, r3
 800bfc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bfc8:	4562      	cmp	r2, ip
 800bfca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfce:	d8e5      	bhi.n	800bf9c <__multiply+0x10c>
 800bfd0:	9f01      	ldr	r7, [sp, #4]
 800bfd2:	51eb      	str	r3, [r5, r7]
 800bfd4:	3504      	adds	r5, #4
 800bfd6:	e799      	b.n	800bf0c <__multiply+0x7c>
 800bfd8:	3e01      	subs	r6, #1
 800bfda:	e79b      	b.n	800bf14 <__multiply+0x84>
 800bfdc:	0800d0c8 	.word	0x0800d0c8
 800bfe0:	0800d150 	.word	0x0800d150

0800bfe4 <__pow5mult>:
 800bfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe8:	4615      	mov	r5, r2
 800bfea:	f012 0203 	ands.w	r2, r2, #3
 800bfee:	4607      	mov	r7, r0
 800bff0:	460e      	mov	r6, r1
 800bff2:	d007      	beq.n	800c004 <__pow5mult+0x20>
 800bff4:	4c25      	ldr	r4, [pc, #148]	@ (800c08c <__pow5mult+0xa8>)
 800bff6:	3a01      	subs	r2, #1
 800bff8:	2300      	movs	r3, #0
 800bffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bffe:	f7ff fe55 	bl	800bcac <__multadd>
 800c002:	4606      	mov	r6, r0
 800c004:	10ad      	asrs	r5, r5, #2
 800c006:	d03d      	beq.n	800c084 <__pow5mult+0xa0>
 800c008:	69fc      	ldr	r4, [r7, #28]
 800c00a:	b97c      	cbnz	r4, 800c02c <__pow5mult+0x48>
 800c00c:	2010      	movs	r0, #16
 800c00e:	f000 fb99 	bl	800c744 <malloc>
 800c012:	4602      	mov	r2, r0
 800c014:	61f8      	str	r0, [r7, #28]
 800c016:	b928      	cbnz	r0, 800c024 <__pow5mult+0x40>
 800c018:	4b1d      	ldr	r3, [pc, #116]	@ (800c090 <__pow5mult+0xac>)
 800c01a:	481e      	ldr	r0, [pc, #120]	@ (800c094 <__pow5mult+0xb0>)
 800c01c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c020:	f000 fb5e 	bl	800c6e0 <__assert_func>
 800c024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c028:	6004      	str	r4, [r0, #0]
 800c02a:	60c4      	str	r4, [r0, #12]
 800c02c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c034:	b94c      	cbnz	r4, 800c04a <__pow5mult+0x66>
 800c036:	f240 2171 	movw	r1, #625	@ 0x271
 800c03a:	4638      	mov	r0, r7
 800c03c:	f7ff ff12 	bl	800be64 <__i2b>
 800c040:	2300      	movs	r3, #0
 800c042:	f8c8 0008 	str.w	r0, [r8, #8]
 800c046:	4604      	mov	r4, r0
 800c048:	6003      	str	r3, [r0, #0]
 800c04a:	f04f 0900 	mov.w	r9, #0
 800c04e:	07eb      	lsls	r3, r5, #31
 800c050:	d50a      	bpl.n	800c068 <__pow5mult+0x84>
 800c052:	4631      	mov	r1, r6
 800c054:	4622      	mov	r2, r4
 800c056:	4638      	mov	r0, r7
 800c058:	f7ff ff1a 	bl	800be90 <__multiply>
 800c05c:	4631      	mov	r1, r6
 800c05e:	4680      	mov	r8, r0
 800c060:	4638      	mov	r0, r7
 800c062:	f7ff fe01 	bl	800bc68 <_Bfree>
 800c066:	4646      	mov	r6, r8
 800c068:	106d      	asrs	r5, r5, #1
 800c06a:	d00b      	beq.n	800c084 <__pow5mult+0xa0>
 800c06c:	6820      	ldr	r0, [r4, #0]
 800c06e:	b938      	cbnz	r0, 800c080 <__pow5mult+0x9c>
 800c070:	4622      	mov	r2, r4
 800c072:	4621      	mov	r1, r4
 800c074:	4638      	mov	r0, r7
 800c076:	f7ff ff0b 	bl	800be90 <__multiply>
 800c07a:	6020      	str	r0, [r4, #0]
 800c07c:	f8c0 9000 	str.w	r9, [r0]
 800c080:	4604      	mov	r4, r0
 800c082:	e7e4      	b.n	800c04e <__pow5mult+0x6a>
 800c084:	4630      	mov	r0, r6
 800c086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c08a:	bf00      	nop
 800c08c:	0800d1ac 	.word	0x0800d1ac
 800c090:	0800d139 	.word	0x0800d139
 800c094:	0800d150 	.word	0x0800d150

0800c098 <__lshift>:
 800c098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c09c:	460c      	mov	r4, r1
 800c09e:	6849      	ldr	r1, [r1, #4]
 800c0a0:	6923      	ldr	r3, [r4, #16]
 800c0a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c0a6:	68a3      	ldr	r3, [r4, #8]
 800c0a8:	4607      	mov	r7, r0
 800c0aa:	4691      	mov	r9, r2
 800c0ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0b0:	f108 0601 	add.w	r6, r8, #1
 800c0b4:	42b3      	cmp	r3, r6
 800c0b6:	db0b      	blt.n	800c0d0 <__lshift+0x38>
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f7ff fd95 	bl	800bbe8 <_Balloc>
 800c0be:	4605      	mov	r5, r0
 800c0c0:	b948      	cbnz	r0, 800c0d6 <__lshift+0x3e>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	4b28      	ldr	r3, [pc, #160]	@ (800c168 <__lshift+0xd0>)
 800c0c6:	4829      	ldr	r0, [pc, #164]	@ (800c16c <__lshift+0xd4>)
 800c0c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c0cc:	f000 fb08 	bl	800c6e0 <__assert_func>
 800c0d0:	3101      	adds	r1, #1
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	e7ee      	b.n	800c0b4 <__lshift+0x1c>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f100 0114 	add.w	r1, r0, #20
 800c0dc:	f100 0210 	add.w	r2, r0, #16
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	4553      	cmp	r3, sl
 800c0e4:	db33      	blt.n	800c14e <__lshift+0xb6>
 800c0e6:	6920      	ldr	r0, [r4, #16]
 800c0e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0ec:	f104 0314 	add.w	r3, r4, #20
 800c0f0:	f019 091f 	ands.w	r9, r9, #31
 800c0f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0fc:	d02b      	beq.n	800c156 <__lshift+0xbe>
 800c0fe:	f1c9 0e20 	rsb	lr, r9, #32
 800c102:	468a      	mov	sl, r1
 800c104:	2200      	movs	r2, #0
 800c106:	6818      	ldr	r0, [r3, #0]
 800c108:	fa00 f009 	lsl.w	r0, r0, r9
 800c10c:	4310      	orrs	r0, r2
 800c10e:	f84a 0b04 	str.w	r0, [sl], #4
 800c112:	f853 2b04 	ldr.w	r2, [r3], #4
 800c116:	459c      	cmp	ip, r3
 800c118:	fa22 f20e 	lsr.w	r2, r2, lr
 800c11c:	d8f3      	bhi.n	800c106 <__lshift+0x6e>
 800c11e:	ebac 0304 	sub.w	r3, ip, r4
 800c122:	3b15      	subs	r3, #21
 800c124:	f023 0303 	bic.w	r3, r3, #3
 800c128:	3304      	adds	r3, #4
 800c12a:	f104 0015 	add.w	r0, r4, #21
 800c12e:	4584      	cmp	ip, r0
 800c130:	bf38      	it	cc
 800c132:	2304      	movcc	r3, #4
 800c134:	50ca      	str	r2, [r1, r3]
 800c136:	b10a      	cbz	r2, 800c13c <__lshift+0xa4>
 800c138:	f108 0602 	add.w	r6, r8, #2
 800c13c:	3e01      	subs	r6, #1
 800c13e:	4638      	mov	r0, r7
 800c140:	612e      	str	r6, [r5, #16]
 800c142:	4621      	mov	r1, r4
 800c144:	f7ff fd90 	bl	800bc68 <_Bfree>
 800c148:	4628      	mov	r0, r5
 800c14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c152:	3301      	adds	r3, #1
 800c154:	e7c5      	b.n	800c0e2 <__lshift+0x4a>
 800c156:	3904      	subs	r1, #4
 800c158:	f853 2b04 	ldr.w	r2, [r3], #4
 800c15c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c160:	459c      	cmp	ip, r3
 800c162:	d8f9      	bhi.n	800c158 <__lshift+0xc0>
 800c164:	e7ea      	b.n	800c13c <__lshift+0xa4>
 800c166:	bf00      	nop
 800c168:	0800d0c8 	.word	0x0800d0c8
 800c16c:	0800d150 	.word	0x0800d150

0800c170 <__mcmp>:
 800c170:	690a      	ldr	r2, [r1, #16]
 800c172:	4603      	mov	r3, r0
 800c174:	6900      	ldr	r0, [r0, #16]
 800c176:	1a80      	subs	r0, r0, r2
 800c178:	b530      	push	{r4, r5, lr}
 800c17a:	d10e      	bne.n	800c19a <__mcmp+0x2a>
 800c17c:	3314      	adds	r3, #20
 800c17e:	3114      	adds	r1, #20
 800c180:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c184:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c188:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c18c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c190:	4295      	cmp	r5, r2
 800c192:	d003      	beq.n	800c19c <__mcmp+0x2c>
 800c194:	d205      	bcs.n	800c1a2 <__mcmp+0x32>
 800c196:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c19a:	bd30      	pop	{r4, r5, pc}
 800c19c:	42a3      	cmp	r3, r4
 800c19e:	d3f3      	bcc.n	800c188 <__mcmp+0x18>
 800c1a0:	e7fb      	b.n	800c19a <__mcmp+0x2a>
 800c1a2:	2001      	movs	r0, #1
 800c1a4:	e7f9      	b.n	800c19a <__mcmp+0x2a>
	...

0800c1a8 <__mdiff>:
 800c1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	4689      	mov	r9, r1
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	4648      	mov	r0, r9
 800c1b4:	4614      	mov	r4, r2
 800c1b6:	f7ff ffdb 	bl	800c170 <__mcmp>
 800c1ba:	1e05      	subs	r5, r0, #0
 800c1bc:	d112      	bne.n	800c1e4 <__mdiff+0x3c>
 800c1be:	4629      	mov	r1, r5
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	f7ff fd11 	bl	800bbe8 <_Balloc>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	b928      	cbnz	r0, 800c1d6 <__mdiff+0x2e>
 800c1ca:	4b3f      	ldr	r3, [pc, #252]	@ (800c2c8 <__mdiff+0x120>)
 800c1cc:	f240 2137 	movw	r1, #567	@ 0x237
 800c1d0:	483e      	ldr	r0, [pc, #248]	@ (800c2cc <__mdiff+0x124>)
 800c1d2:	f000 fa85 	bl	800c6e0 <__assert_func>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1dc:	4610      	mov	r0, r2
 800c1de:	b003      	add	sp, #12
 800c1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e4:	bfbc      	itt	lt
 800c1e6:	464b      	movlt	r3, r9
 800c1e8:	46a1      	movlt	r9, r4
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c1f0:	bfba      	itte	lt
 800c1f2:	461c      	movlt	r4, r3
 800c1f4:	2501      	movlt	r5, #1
 800c1f6:	2500      	movge	r5, #0
 800c1f8:	f7ff fcf6 	bl	800bbe8 <_Balloc>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	b918      	cbnz	r0, 800c208 <__mdiff+0x60>
 800c200:	4b31      	ldr	r3, [pc, #196]	@ (800c2c8 <__mdiff+0x120>)
 800c202:	f240 2145 	movw	r1, #581	@ 0x245
 800c206:	e7e3      	b.n	800c1d0 <__mdiff+0x28>
 800c208:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c20c:	6926      	ldr	r6, [r4, #16]
 800c20e:	60c5      	str	r5, [r0, #12]
 800c210:	f109 0310 	add.w	r3, r9, #16
 800c214:	f109 0514 	add.w	r5, r9, #20
 800c218:	f104 0e14 	add.w	lr, r4, #20
 800c21c:	f100 0b14 	add.w	fp, r0, #20
 800c220:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c224:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c228:	9301      	str	r3, [sp, #4]
 800c22a:	46d9      	mov	r9, fp
 800c22c:	f04f 0c00 	mov.w	ip, #0
 800c230:	9b01      	ldr	r3, [sp, #4]
 800c232:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c236:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c23a:	9301      	str	r3, [sp, #4]
 800c23c:	fa1f f38a 	uxth.w	r3, sl
 800c240:	4619      	mov	r1, r3
 800c242:	b283      	uxth	r3, r0
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	0c00      	lsrs	r0, r0, #16
 800c248:	4463      	add	r3, ip
 800c24a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c24e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c252:	b29b      	uxth	r3, r3
 800c254:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c258:	4576      	cmp	r6, lr
 800c25a:	f849 3b04 	str.w	r3, [r9], #4
 800c25e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c262:	d8e5      	bhi.n	800c230 <__mdiff+0x88>
 800c264:	1b33      	subs	r3, r6, r4
 800c266:	3b15      	subs	r3, #21
 800c268:	f023 0303 	bic.w	r3, r3, #3
 800c26c:	3415      	adds	r4, #21
 800c26e:	3304      	adds	r3, #4
 800c270:	42a6      	cmp	r6, r4
 800c272:	bf38      	it	cc
 800c274:	2304      	movcc	r3, #4
 800c276:	441d      	add	r5, r3
 800c278:	445b      	add	r3, fp
 800c27a:	461e      	mov	r6, r3
 800c27c:	462c      	mov	r4, r5
 800c27e:	4544      	cmp	r4, r8
 800c280:	d30e      	bcc.n	800c2a0 <__mdiff+0xf8>
 800c282:	f108 0103 	add.w	r1, r8, #3
 800c286:	1b49      	subs	r1, r1, r5
 800c288:	f021 0103 	bic.w	r1, r1, #3
 800c28c:	3d03      	subs	r5, #3
 800c28e:	45a8      	cmp	r8, r5
 800c290:	bf38      	it	cc
 800c292:	2100      	movcc	r1, #0
 800c294:	440b      	add	r3, r1
 800c296:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c29a:	b191      	cbz	r1, 800c2c2 <__mdiff+0x11a>
 800c29c:	6117      	str	r7, [r2, #16]
 800c29e:	e79d      	b.n	800c1dc <__mdiff+0x34>
 800c2a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c2a4:	46e6      	mov	lr, ip
 800c2a6:	0c08      	lsrs	r0, r1, #16
 800c2a8:	fa1c fc81 	uxtah	ip, ip, r1
 800c2ac:	4471      	add	r1, lr
 800c2ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c2b2:	b289      	uxth	r1, r1
 800c2b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c2b8:	f846 1b04 	str.w	r1, [r6], #4
 800c2bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2c0:	e7dd      	b.n	800c27e <__mdiff+0xd6>
 800c2c2:	3f01      	subs	r7, #1
 800c2c4:	e7e7      	b.n	800c296 <__mdiff+0xee>
 800c2c6:	bf00      	nop
 800c2c8:	0800d0c8 	.word	0x0800d0c8
 800c2cc:	0800d150 	.word	0x0800d150

0800c2d0 <__ulp>:
 800c2d0:	b082      	sub	sp, #8
 800c2d2:	ed8d 0b00 	vstr	d0, [sp]
 800c2d6:	9a01      	ldr	r2, [sp, #4]
 800c2d8:	4b0f      	ldr	r3, [pc, #60]	@ (800c318 <__ulp+0x48>)
 800c2da:	4013      	ands	r3, r2
 800c2dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	dc08      	bgt.n	800c2f6 <__ulp+0x26>
 800c2e4:	425b      	negs	r3, r3
 800c2e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c2ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c2ee:	da04      	bge.n	800c2fa <__ulp+0x2a>
 800c2f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c2f4:	4113      	asrs	r3, r2
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	e008      	b.n	800c30c <__ulp+0x3c>
 800c2fa:	f1a2 0314 	sub.w	r3, r2, #20
 800c2fe:	2b1e      	cmp	r3, #30
 800c300:	bfda      	itte	le
 800c302:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c306:	40da      	lsrle	r2, r3
 800c308:	2201      	movgt	r2, #1
 800c30a:	2300      	movs	r3, #0
 800c30c:	4619      	mov	r1, r3
 800c30e:	4610      	mov	r0, r2
 800c310:	ec41 0b10 	vmov	d0, r0, r1
 800c314:	b002      	add	sp, #8
 800c316:	4770      	bx	lr
 800c318:	7ff00000 	.word	0x7ff00000

0800c31c <__b2d>:
 800c31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c320:	6906      	ldr	r6, [r0, #16]
 800c322:	f100 0814 	add.w	r8, r0, #20
 800c326:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c32a:	1f37      	subs	r7, r6, #4
 800c32c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c330:	4610      	mov	r0, r2
 800c332:	f7ff fd4b 	bl	800bdcc <__hi0bits>
 800c336:	f1c0 0320 	rsb	r3, r0, #32
 800c33a:	280a      	cmp	r0, #10
 800c33c:	600b      	str	r3, [r1, #0]
 800c33e:	491b      	ldr	r1, [pc, #108]	@ (800c3ac <__b2d+0x90>)
 800c340:	dc15      	bgt.n	800c36e <__b2d+0x52>
 800c342:	f1c0 0c0b 	rsb	ip, r0, #11
 800c346:	fa22 f30c 	lsr.w	r3, r2, ip
 800c34a:	45b8      	cmp	r8, r7
 800c34c:	ea43 0501 	orr.w	r5, r3, r1
 800c350:	bf34      	ite	cc
 800c352:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c356:	2300      	movcs	r3, #0
 800c358:	3015      	adds	r0, #21
 800c35a:	fa02 f000 	lsl.w	r0, r2, r0
 800c35e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c362:	4303      	orrs	r3, r0
 800c364:	461c      	mov	r4, r3
 800c366:	ec45 4b10 	vmov	d0, r4, r5
 800c36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c36e:	45b8      	cmp	r8, r7
 800c370:	bf3a      	itte	cc
 800c372:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c376:	f1a6 0708 	subcc.w	r7, r6, #8
 800c37a:	2300      	movcs	r3, #0
 800c37c:	380b      	subs	r0, #11
 800c37e:	d012      	beq.n	800c3a6 <__b2d+0x8a>
 800c380:	f1c0 0120 	rsb	r1, r0, #32
 800c384:	fa23 f401 	lsr.w	r4, r3, r1
 800c388:	4082      	lsls	r2, r0
 800c38a:	4322      	orrs	r2, r4
 800c38c:	4547      	cmp	r7, r8
 800c38e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c392:	bf8c      	ite	hi
 800c394:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c398:	2200      	movls	r2, #0
 800c39a:	4083      	lsls	r3, r0
 800c39c:	40ca      	lsrs	r2, r1
 800c39e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	e7de      	b.n	800c364 <__b2d+0x48>
 800c3a6:	ea42 0501 	orr.w	r5, r2, r1
 800c3aa:	e7db      	b.n	800c364 <__b2d+0x48>
 800c3ac:	3ff00000 	.word	0x3ff00000

0800c3b0 <__d2b>:
 800c3b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3b4:	460f      	mov	r7, r1
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	ec59 8b10 	vmov	r8, r9, d0
 800c3bc:	4616      	mov	r6, r2
 800c3be:	f7ff fc13 	bl	800bbe8 <_Balloc>
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	b930      	cbnz	r0, 800c3d4 <__d2b+0x24>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	4b23      	ldr	r3, [pc, #140]	@ (800c458 <__d2b+0xa8>)
 800c3ca:	4824      	ldr	r0, [pc, #144]	@ (800c45c <__d2b+0xac>)
 800c3cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800c3d0:	f000 f986 	bl	800c6e0 <__assert_func>
 800c3d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c3d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3dc:	b10d      	cbz	r5, 800c3e2 <__d2b+0x32>
 800c3de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3e2:	9301      	str	r3, [sp, #4]
 800c3e4:	f1b8 0300 	subs.w	r3, r8, #0
 800c3e8:	d023      	beq.n	800c432 <__d2b+0x82>
 800c3ea:	4668      	mov	r0, sp
 800c3ec:	9300      	str	r3, [sp, #0]
 800c3ee:	f7ff fd0c 	bl	800be0a <__lo0bits>
 800c3f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c3f6:	b1d0      	cbz	r0, 800c42e <__d2b+0x7e>
 800c3f8:	f1c0 0320 	rsb	r3, r0, #32
 800c3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c400:	430b      	orrs	r3, r1
 800c402:	40c2      	lsrs	r2, r0
 800c404:	6163      	str	r3, [r4, #20]
 800c406:	9201      	str	r2, [sp, #4]
 800c408:	9b01      	ldr	r3, [sp, #4]
 800c40a:	61a3      	str	r3, [r4, #24]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	bf0c      	ite	eq
 800c410:	2201      	moveq	r2, #1
 800c412:	2202      	movne	r2, #2
 800c414:	6122      	str	r2, [r4, #16]
 800c416:	b1a5      	cbz	r5, 800c442 <__d2b+0x92>
 800c418:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c41c:	4405      	add	r5, r0
 800c41e:	603d      	str	r5, [r7, #0]
 800c420:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c424:	6030      	str	r0, [r6, #0]
 800c426:	4620      	mov	r0, r4
 800c428:	b003      	add	sp, #12
 800c42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c42e:	6161      	str	r1, [r4, #20]
 800c430:	e7ea      	b.n	800c408 <__d2b+0x58>
 800c432:	a801      	add	r0, sp, #4
 800c434:	f7ff fce9 	bl	800be0a <__lo0bits>
 800c438:	9b01      	ldr	r3, [sp, #4]
 800c43a:	6163      	str	r3, [r4, #20]
 800c43c:	3020      	adds	r0, #32
 800c43e:	2201      	movs	r2, #1
 800c440:	e7e8      	b.n	800c414 <__d2b+0x64>
 800c442:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c446:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c44a:	6038      	str	r0, [r7, #0]
 800c44c:	6918      	ldr	r0, [r3, #16]
 800c44e:	f7ff fcbd 	bl	800bdcc <__hi0bits>
 800c452:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c456:	e7e5      	b.n	800c424 <__d2b+0x74>
 800c458:	0800d0c8 	.word	0x0800d0c8
 800c45c:	0800d150 	.word	0x0800d150

0800c460 <__ratio>:
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	b085      	sub	sp, #20
 800c466:	e9cd 1000 	strd	r1, r0, [sp]
 800c46a:	a902      	add	r1, sp, #8
 800c46c:	f7ff ff56 	bl	800c31c <__b2d>
 800c470:	9800      	ldr	r0, [sp, #0]
 800c472:	a903      	add	r1, sp, #12
 800c474:	ec55 4b10 	vmov	r4, r5, d0
 800c478:	f7ff ff50 	bl	800c31c <__b2d>
 800c47c:	9b01      	ldr	r3, [sp, #4]
 800c47e:	6919      	ldr	r1, [r3, #16]
 800c480:	9b00      	ldr	r3, [sp, #0]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	1ac9      	subs	r1, r1, r3
 800c486:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c48a:	1a9b      	subs	r3, r3, r2
 800c48c:	ec5b ab10 	vmov	sl, fp, d0
 800c490:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c494:	2b00      	cmp	r3, #0
 800c496:	bfce      	itee	gt
 800c498:	462a      	movgt	r2, r5
 800c49a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c49e:	465a      	movle	r2, fp
 800c4a0:	462f      	mov	r7, r5
 800c4a2:	46d9      	mov	r9, fp
 800c4a4:	bfcc      	ite	gt
 800c4a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c4aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c4ae:	464b      	mov	r3, r9
 800c4b0:	4652      	mov	r2, sl
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	4639      	mov	r1, r7
 800c4b6:	f7f4 f9c9 	bl	800084c <__aeabi_ddiv>
 800c4ba:	ec41 0b10 	vmov	d0, r0, r1
 800c4be:	b005      	add	sp, #20
 800c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4c4 <__copybits>:
 800c4c4:	3901      	subs	r1, #1
 800c4c6:	b570      	push	{r4, r5, r6, lr}
 800c4c8:	1149      	asrs	r1, r1, #5
 800c4ca:	6914      	ldr	r4, [r2, #16]
 800c4cc:	3101      	adds	r1, #1
 800c4ce:	f102 0314 	add.w	r3, r2, #20
 800c4d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c4d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c4da:	1f05      	subs	r5, r0, #4
 800c4dc:	42a3      	cmp	r3, r4
 800c4de:	d30c      	bcc.n	800c4fa <__copybits+0x36>
 800c4e0:	1aa3      	subs	r3, r4, r2
 800c4e2:	3b11      	subs	r3, #17
 800c4e4:	f023 0303 	bic.w	r3, r3, #3
 800c4e8:	3211      	adds	r2, #17
 800c4ea:	42a2      	cmp	r2, r4
 800c4ec:	bf88      	it	hi
 800c4ee:	2300      	movhi	r3, #0
 800c4f0:	4418      	add	r0, r3
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	4288      	cmp	r0, r1
 800c4f6:	d305      	bcc.n	800c504 <__copybits+0x40>
 800c4f8:	bd70      	pop	{r4, r5, r6, pc}
 800c4fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800c4fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800c502:	e7eb      	b.n	800c4dc <__copybits+0x18>
 800c504:	f840 3b04 	str.w	r3, [r0], #4
 800c508:	e7f4      	b.n	800c4f4 <__copybits+0x30>

0800c50a <__any_on>:
 800c50a:	f100 0214 	add.w	r2, r0, #20
 800c50e:	6900      	ldr	r0, [r0, #16]
 800c510:	114b      	asrs	r3, r1, #5
 800c512:	4298      	cmp	r0, r3
 800c514:	b510      	push	{r4, lr}
 800c516:	db11      	blt.n	800c53c <__any_on+0x32>
 800c518:	dd0a      	ble.n	800c530 <__any_on+0x26>
 800c51a:	f011 011f 	ands.w	r1, r1, #31
 800c51e:	d007      	beq.n	800c530 <__any_on+0x26>
 800c520:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c524:	fa24 f001 	lsr.w	r0, r4, r1
 800c528:	fa00 f101 	lsl.w	r1, r0, r1
 800c52c:	428c      	cmp	r4, r1
 800c52e:	d10b      	bne.n	800c548 <__any_on+0x3e>
 800c530:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c534:	4293      	cmp	r3, r2
 800c536:	d803      	bhi.n	800c540 <__any_on+0x36>
 800c538:	2000      	movs	r0, #0
 800c53a:	bd10      	pop	{r4, pc}
 800c53c:	4603      	mov	r3, r0
 800c53e:	e7f7      	b.n	800c530 <__any_on+0x26>
 800c540:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c544:	2900      	cmp	r1, #0
 800c546:	d0f5      	beq.n	800c534 <__any_on+0x2a>
 800c548:	2001      	movs	r0, #1
 800c54a:	e7f6      	b.n	800c53a <__any_on+0x30>

0800c54c <__ascii_wctomb>:
 800c54c:	4603      	mov	r3, r0
 800c54e:	4608      	mov	r0, r1
 800c550:	b141      	cbz	r1, 800c564 <__ascii_wctomb+0x18>
 800c552:	2aff      	cmp	r2, #255	@ 0xff
 800c554:	d904      	bls.n	800c560 <__ascii_wctomb+0x14>
 800c556:	228a      	movs	r2, #138	@ 0x8a
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c55e:	4770      	bx	lr
 800c560:	700a      	strb	r2, [r1, #0]
 800c562:	2001      	movs	r0, #1
 800c564:	4770      	bx	lr
	...

0800c568 <__sflush_r>:
 800c568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c570:	0716      	lsls	r6, r2, #28
 800c572:	4605      	mov	r5, r0
 800c574:	460c      	mov	r4, r1
 800c576:	d454      	bmi.n	800c622 <__sflush_r+0xba>
 800c578:	684b      	ldr	r3, [r1, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	dc02      	bgt.n	800c584 <__sflush_r+0x1c>
 800c57e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c580:	2b00      	cmp	r3, #0
 800c582:	dd48      	ble.n	800c616 <__sflush_r+0xae>
 800c584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c586:	2e00      	cmp	r6, #0
 800c588:	d045      	beq.n	800c616 <__sflush_r+0xae>
 800c58a:	2300      	movs	r3, #0
 800c58c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c590:	682f      	ldr	r7, [r5, #0]
 800c592:	6a21      	ldr	r1, [r4, #32]
 800c594:	602b      	str	r3, [r5, #0]
 800c596:	d030      	beq.n	800c5fa <__sflush_r+0x92>
 800c598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	0759      	lsls	r1, r3, #29
 800c59e:	d505      	bpl.n	800c5ac <__sflush_r+0x44>
 800c5a0:	6863      	ldr	r3, [r4, #4]
 800c5a2:	1ad2      	subs	r2, r2, r3
 800c5a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c5a6:	b10b      	cbz	r3, 800c5ac <__sflush_r+0x44>
 800c5a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c5aa:	1ad2      	subs	r2, r2, r3
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5b0:	6a21      	ldr	r1, [r4, #32]
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	47b0      	blx	r6
 800c5b6:	1c43      	adds	r3, r0, #1
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	d106      	bne.n	800c5ca <__sflush_r+0x62>
 800c5bc:	6829      	ldr	r1, [r5, #0]
 800c5be:	291d      	cmp	r1, #29
 800c5c0:	d82b      	bhi.n	800c61a <__sflush_r+0xb2>
 800c5c2:	4a2a      	ldr	r2, [pc, #168]	@ (800c66c <__sflush_r+0x104>)
 800c5c4:	410a      	asrs	r2, r1
 800c5c6:	07d6      	lsls	r6, r2, #31
 800c5c8:	d427      	bmi.n	800c61a <__sflush_r+0xb2>
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	6062      	str	r2, [r4, #4]
 800c5ce:	04d9      	lsls	r1, r3, #19
 800c5d0:	6922      	ldr	r2, [r4, #16]
 800c5d2:	6022      	str	r2, [r4, #0]
 800c5d4:	d504      	bpl.n	800c5e0 <__sflush_r+0x78>
 800c5d6:	1c42      	adds	r2, r0, #1
 800c5d8:	d101      	bne.n	800c5de <__sflush_r+0x76>
 800c5da:	682b      	ldr	r3, [r5, #0]
 800c5dc:	b903      	cbnz	r3, 800c5e0 <__sflush_r+0x78>
 800c5de:	6560      	str	r0, [r4, #84]	@ 0x54
 800c5e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5e2:	602f      	str	r7, [r5, #0]
 800c5e4:	b1b9      	cbz	r1, 800c616 <__sflush_r+0xae>
 800c5e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5ea:	4299      	cmp	r1, r3
 800c5ec:	d002      	beq.n	800c5f4 <__sflush_r+0x8c>
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f7fe feb6 	bl	800b360 <_free_r>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5f8:	e00d      	b.n	800c616 <__sflush_r+0xae>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	47b0      	blx	r6
 800c600:	4602      	mov	r2, r0
 800c602:	1c50      	adds	r0, r2, #1
 800c604:	d1c9      	bne.n	800c59a <__sflush_r+0x32>
 800c606:	682b      	ldr	r3, [r5, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d0c6      	beq.n	800c59a <__sflush_r+0x32>
 800c60c:	2b1d      	cmp	r3, #29
 800c60e:	d001      	beq.n	800c614 <__sflush_r+0xac>
 800c610:	2b16      	cmp	r3, #22
 800c612:	d11e      	bne.n	800c652 <__sflush_r+0xea>
 800c614:	602f      	str	r7, [r5, #0]
 800c616:	2000      	movs	r0, #0
 800c618:	e022      	b.n	800c660 <__sflush_r+0xf8>
 800c61a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c61e:	b21b      	sxth	r3, r3
 800c620:	e01b      	b.n	800c65a <__sflush_r+0xf2>
 800c622:	690f      	ldr	r7, [r1, #16]
 800c624:	2f00      	cmp	r7, #0
 800c626:	d0f6      	beq.n	800c616 <__sflush_r+0xae>
 800c628:	0793      	lsls	r3, r2, #30
 800c62a:	680e      	ldr	r6, [r1, #0]
 800c62c:	bf08      	it	eq
 800c62e:	694b      	ldreq	r3, [r1, #20]
 800c630:	600f      	str	r7, [r1, #0]
 800c632:	bf18      	it	ne
 800c634:	2300      	movne	r3, #0
 800c636:	eba6 0807 	sub.w	r8, r6, r7
 800c63a:	608b      	str	r3, [r1, #8]
 800c63c:	f1b8 0f00 	cmp.w	r8, #0
 800c640:	dde9      	ble.n	800c616 <__sflush_r+0xae>
 800c642:	6a21      	ldr	r1, [r4, #32]
 800c644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c646:	4643      	mov	r3, r8
 800c648:	463a      	mov	r2, r7
 800c64a:	4628      	mov	r0, r5
 800c64c:	47b0      	blx	r6
 800c64e:	2800      	cmp	r0, #0
 800c650:	dc08      	bgt.n	800c664 <__sflush_r+0xfc>
 800c652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c65a:	81a3      	strh	r3, [r4, #12]
 800c65c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c664:	4407      	add	r7, r0
 800c666:	eba8 0800 	sub.w	r8, r8, r0
 800c66a:	e7e7      	b.n	800c63c <__sflush_r+0xd4>
 800c66c:	dfbffffe 	.word	0xdfbffffe

0800c670 <_fflush_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	690b      	ldr	r3, [r1, #16]
 800c674:	4605      	mov	r5, r0
 800c676:	460c      	mov	r4, r1
 800c678:	b913      	cbnz	r3, 800c680 <_fflush_r+0x10>
 800c67a:	2500      	movs	r5, #0
 800c67c:	4628      	mov	r0, r5
 800c67e:	bd38      	pop	{r3, r4, r5, pc}
 800c680:	b118      	cbz	r0, 800c68a <_fflush_r+0x1a>
 800c682:	6a03      	ldr	r3, [r0, #32]
 800c684:	b90b      	cbnz	r3, 800c68a <_fflush_r+0x1a>
 800c686:	f7fe fd3b 	bl	800b100 <__sinit>
 800c68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0f3      	beq.n	800c67a <_fflush_r+0xa>
 800c692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c694:	07d0      	lsls	r0, r2, #31
 800c696:	d404      	bmi.n	800c6a2 <_fflush_r+0x32>
 800c698:	0599      	lsls	r1, r3, #22
 800c69a:	d402      	bmi.n	800c6a2 <_fflush_r+0x32>
 800c69c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c69e:	f7fe fe46 	bl	800b32e <__retarget_lock_acquire_recursive>
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	4621      	mov	r1, r4
 800c6a6:	f7ff ff5f 	bl	800c568 <__sflush_r>
 800c6aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6ac:	07da      	lsls	r2, r3, #31
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	d4e4      	bmi.n	800c67c <_fflush_r+0xc>
 800c6b2:	89a3      	ldrh	r3, [r4, #12]
 800c6b4:	059b      	lsls	r3, r3, #22
 800c6b6:	d4e1      	bmi.n	800c67c <_fflush_r+0xc>
 800c6b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6ba:	f7fe fe39 	bl	800b330 <__retarget_lock_release_recursive>
 800c6be:	e7dd      	b.n	800c67c <_fflush_r+0xc>

0800c6c0 <_sbrk_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4d06      	ldr	r5, [pc, #24]	@ (800c6dc <_sbrk_r+0x1c>)
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	4608      	mov	r0, r1
 800c6ca:	602b      	str	r3, [r5, #0]
 800c6cc:	f7f5 fcbc 	bl	8002048 <_sbrk>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	d102      	bne.n	800c6da <_sbrk_r+0x1a>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	b103      	cbz	r3, 800c6da <_sbrk_r+0x1a>
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	bd38      	pop	{r3, r4, r5, pc}
 800c6dc:	200025d4 	.word	0x200025d4

0800c6e0 <__assert_func>:
 800c6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6e2:	4614      	mov	r4, r2
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	4b09      	ldr	r3, [pc, #36]	@ (800c70c <__assert_func+0x2c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	68d8      	ldr	r0, [r3, #12]
 800c6ee:	b954      	cbnz	r4, 800c706 <__assert_func+0x26>
 800c6f0:	4b07      	ldr	r3, [pc, #28]	@ (800c710 <__assert_func+0x30>)
 800c6f2:	461c      	mov	r4, r3
 800c6f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6f8:	9100      	str	r1, [sp, #0]
 800c6fa:	462b      	mov	r3, r5
 800c6fc:	4905      	ldr	r1, [pc, #20]	@ (800c714 <__assert_func+0x34>)
 800c6fe:	f000 f829 	bl	800c754 <fiprintf>
 800c702:	f000 f839 	bl	800c778 <abort>
 800c706:	4b04      	ldr	r3, [pc, #16]	@ (800c718 <__assert_func+0x38>)
 800c708:	e7f4      	b.n	800c6f4 <__assert_func+0x14>
 800c70a:	bf00      	nop
 800c70c:	20000274 	.word	0x20000274
 800c710:	0800d3e4 	.word	0x0800d3e4
 800c714:	0800d3b6 	.word	0x0800d3b6
 800c718:	0800d3a9 	.word	0x0800d3a9

0800c71c <_calloc_r>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	fba1 5402 	umull	r5, r4, r1, r2
 800c722:	b93c      	cbnz	r4, 800c734 <_calloc_r+0x18>
 800c724:	4629      	mov	r1, r5
 800c726:	f7ff f9c1 	bl	800baac <_malloc_r>
 800c72a:	4606      	mov	r6, r0
 800c72c:	b928      	cbnz	r0, 800c73a <_calloc_r+0x1e>
 800c72e:	2600      	movs	r6, #0
 800c730:	4630      	mov	r0, r6
 800c732:	bd70      	pop	{r4, r5, r6, pc}
 800c734:	220c      	movs	r2, #12
 800c736:	6002      	str	r2, [r0, #0]
 800c738:	e7f9      	b.n	800c72e <_calloc_r+0x12>
 800c73a:	462a      	mov	r2, r5
 800c73c:	4621      	mov	r1, r4
 800c73e:	f7fe fd58 	bl	800b1f2 <memset>
 800c742:	e7f5      	b.n	800c730 <_calloc_r+0x14>

0800c744 <malloc>:
 800c744:	4b02      	ldr	r3, [pc, #8]	@ (800c750 <malloc+0xc>)
 800c746:	4601      	mov	r1, r0
 800c748:	6818      	ldr	r0, [r3, #0]
 800c74a:	f7ff b9af 	b.w	800baac <_malloc_r>
 800c74e:	bf00      	nop
 800c750:	20000274 	.word	0x20000274

0800c754 <fiprintf>:
 800c754:	b40e      	push	{r1, r2, r3}
 800c756:	b503      	push	{r0, r1, lr}
 800c758:	4601      	mov	r1, r0
 800c75a:	ab03      	add	r3, sp, #12
 800c75c:	4805      	ldr	r0, [pc, #20]	@ (800c774 <fiprintf+0x20>)
 800c75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c762:	6800      	ldr	r0, [r0, #0]
 800c764:	9301      	str	r3, [sp, #4]
 800c766:	f000 f837 	bl	800c7d8 <_vfiprintf_r>
 800c76a:	b002      	add	sp, #8
 800c76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c770:	b003      	add	sp, #12
 800c772:	4770      	bx	lr
 800c774:	20000274 	.word	0x20000274

0800c778 <abort>:
 800c778:	b508      	push	{r3, lr}
 800c77a:	2006      	movs	r0, #6
 800c77c:	f000 fb8e 	bl	800ce9c <raise>
 800c780:	2001      	movs	r0, #1
 800c782:	f7f5 fbe9 	bl	8001f58 <_exit>

0800c786 <__sfputc_r>:
 800c786:	6893      	ldr	r3, [r2, #8]
 800c788:	3b01      	subs	r3, #1
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	b410      	push	{r4}
 800c78e:	6093      	str	r3, [r2, #8]
 800c790:	da08      	bge.n	800c7a4 <__sfputc_r+0x1e>
 800c792:	6994      	ldr	r4, [r2, #24]
 800c794:	42a3      	cmp	r3, r4
 800c796:	db01      	blt.n	800c79c <__sfputc_r+0x16>
 800c798:	290a      	cmp	r1, #10
 800c79a:	d103      	bne.n	800c7a4 <__sfputc_r+0x1e>
 800c79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7a0:	f000 bac0 	b.w	800cd24 <__swbuf_r>
 800c7a4:	6813      	ldr	r3, [r2, #0]
 800c7a6:	1c58      	adds	r0, r3, #1
 800c7a8:	6010      	str	r0, [r2, #0]
 800c7aa:	7019      	strb	r1, [r3, #0]
 800c7ac:	4608      	mov	r0, r1
 800c7ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <__sfputs_r>:
 800c7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	460f      	mov	r7, r1
 800c7ba:	4614      	mov	r4, r2
 800c7bc:	18d5      	adds	r5, r2, r3
 800c7be:	42ac      	cmp	r4, r5
 800c7c0:	d101      	bne.n	800c7c6 <__sfputs_r+0x12>
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	e007      	b.n	800c7d6 <__sfputs_r+0x22>
 800c7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ca:	463a      	mov	r2, r7
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	f7ff ffda 	bl	800c786 <__sfputc_r>
 800c7d2:	1c43      	adds	r3, r0, #1
 800c7d4:	d1f3      	bne.n	800c7be <__sfputs_r+0xa>
 800c7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c7d8 <_vfiprintf_r>:
 800c7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7dc:	460d      	mov	r5, r1
 800c7de:	b09d      	sub	sp, #116	@ 0x74
 800c7e0:	4614      	mov	r4, r2
 800c7e2:	4698      	mov	r8, r3
 800c7e4:	4606      	mov	r6, r0
 800c7e6:	b118      	cbz	r0, 800c7f0 <_vfiprintf_r+0x18>
 800c7e8:	6a03      	ldr	r3, [r0, #32]
 800c7ea:	b90b      	cbnz	r3, 800c7f0 <_vfiprintf_r+0x18>
 800c7ec:	f7fe fc88 	bl	800b100 <__sinit>
 800c7f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7f2:	07d9      	lsls	r1, r3, #31
 800c7f4:	d405      	bmi.n	800c802 <_vfiprintf_r+0x2a>
 800c7f6:	89ab      	ldrh	r3, [r5, #12]
 800c7f8:	059a      	lsls	r2, r3, #22
 800c7fa:	d402      	bmi.n	800c802 <_vfiprintf_r+0x2a>
 800c7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7fe:	f7fe fd96 	bl	800b32e <__retarget_lock_acquire_recursive>
 800c802:	89ab      	ldrh	r3, [r5, #12]
 800c804:	071b      	lsls	r3, r3, #28
 800c806:	d501      	bpl.n	800c80c <_vfiprintf_r+0x34>
 800c808:	692b      	ldr	r3, [r5, #16]
 800c80a:	b99b      	cbnz	r3, 800c834 <_vfiprintf_r+0x5c>
 800c80c:	4629      	mov	r1, r5
 800c80e:	4630      	mov	r0, r6
 800c810:	f000 fac6 	bl	800cda0 <__swsetup_r>
 800c814:	b170      	cbz	r0, 800c834 <_vfiprintf_r+0x5c>
 800c816:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c818:	07dc      	lsls	r4, r3, #31
 800c81a:	d504      	bpl.n	800c826 <_vfiprintf_r+0x4e>
 800c81c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c820:	b01d      	add	sp, #116	@ 0x74
 800c822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c826:	89ab      	ldrh	r3, [r5, #12]
 800c828:	0598      	lsls	r0, r3, #22
 800c82a:	d4f7      	bmi.n	800c81c <_vfiprintf_r+0x44>
 800c82c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c82e:	f7fe fd7f 	bl	800b330 <__retarget_lock_release_recursive>
 800c832:	e7f3      	b.n	800c81c <_vfiprintf_r+0x44>
 800c834:	2300      	movs	r3, #0
 800c836:	9309      	str	r3, [sp, #36]	@ 0x24
 800c838:	2320      	movs	r3, #32
 800c83a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c83e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c842:	2330      	movs	r3, #48	@ 0x30
 800c844:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c9f4 <_vfiprintf_r+0x21c>
 800c848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c84c:	f04f 0901 	mov.w	r9, #1
 800c850:	4623      	mov	r3, r4
 800c852:	469a      	mov	sl, r3
 800c854:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c858:	b10a      	cbz	r2, 800c85e <_vfiprintf_r+0x86>
 800c85a:	2a25      	cmp	r2, #37	@ 0x25
 800c85c:	d1f9      	bne.n	800c852 <_vfiprintf_r+0x7a>
 800c85e:	ebba 0b04 	subs.w	fp, sl, r4
 800c862:	d00b      	beq.n	800c87c <_vfiprintf_r+0xa4>
 800c864:	465b      	mov	r3, fp
 800c866:	4622      	mov	r2, r4
 800c868:	4629      	mov	r1, r5
 800c86a:	4630      	mov	r0, r6
 800c86c:	f7ff ffa2 	bl	800c7b4 <__sfputs_r>
 800c870:	3001      	adds	r0, #1
 800c872:	f000 80a7 	beq.w	800c9c4 <_vfiprintf_r+0x1ec>
 800c876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c878:	445a      	add	r2, fp
 800c87a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c87c:	f89a 3000 	ldrb.w	r3, [sl]
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 809f 	beq.w	800c9c4 <_vfiprintf_r+0x1ec>
 800c886:	2300      	movs	r3, #0
 800c888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c88c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c890:	f10a 0a01 	add.w	sl, sl, #1
 800c894:	9304      	str	r3, [sp, #16]
 800c896:	9307      	str	r3, [sp, #28]
 800c898:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c89c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c89e:	4654      	mov	r4, sl
 800c8a0:	2205      	movs	r2, #5
 800c8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a6:	4853      	ldr	r0, [pc, #332]	@ (800c9f4 <_vfiprintf_r+0x21c>)
 800c8a8:	f7f3 fc9a 	bl	80001e0 <memchr>
 800c8ac:	9a04      	ldr	r2, [sp, #16]
 800c8ae:	b9d8      	cbnz	r0, 800c8e8 <_vfiprintf_r+0x110>
 800c8b0:	06d1      	lsls	r1, r2, #27
 800c8b2:	bf44      	itt	mi
 800c8b4:	2320      	movmi	r3, #32
 800c8b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8ba:	0713      	lsls	r3, r2, #28
 800c8bc:	bf44      	itt	mi
 800c8be:	232b      	movmi	r3, #43	@ 0x2b
 800c8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8ca:	d015      	beq.n	800c8f8 <_vfiprintf_r+0x120>
 800c8cc:	9a07      	ldr	r2, [sp, #28]
 800c8ce:	4654      	mov	r4, sl
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	f04f 0c0a 	mov.w	ip, #10
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8dc:	3b30      	subs	r3, #48	@ 0x30
 800c8de:	2b09      	cmp	r3, #9
 800c8e0:	d94b      	bls.n	800c97a <_vfiprintf_r+0x1a2>
 800c8e2:	b1b0      	cbz	r0, 800c912 <_vfiprintf_r+0x13a>
 800c8e4:	9207      	str	r2, [sp, #28]
 800c8e6:	e014      	b.n	800c912 <_vfiprintf_r+0x13a>
 800c8e8:	eba0 0308 	sub.w	r3, r0, r8
 800c8ec:	fa09 f303 	lsl.w	r3, r9, r3
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	9304      	str	r3, [sp, #16]
 800c8f4:	46a2      	mov	sl, r4
 800c8f6:	e7d2      	b.n	800c89e <_vfiprintf_r+0xc6>
 800c8f8:	9b03      	ldr	r3, [sp, #12]
 800c8fa:	1d19      	adds	r1, r3, #4
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	9103      	str	r1, [sp, #12]
 800c900:	2b00      	cmp	r3, #0
 800c902:	bfbb      	ittet	lt
 800c904:	425b      	neglt	r3, r3
 800c906:	f042 0202 	orrlt.w	r2, r2, #2
 800c90a:	9307      	strge	r3, [sp, #28]
 800c90c:	9307      	strlt	r3, [sp, #28]
 800c90e:	bfb8      	it	lt
 800c910:	9204      	strlt	r2, [sp, #16]
 800c912:	7823      	ldrb	r3, [r4, #0]
 800c914:	2b2e      	cmp	r3, #46	@ 0x2e
 800c916:	d10a      	bne.n	800c92e <_vfiprintf_r+0x156>
 800c918:	7863      	ldrb	r3, [r4, #1]
 800c91a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c91c:	d132      	bne.n	800c984 <_vfiprintf_r+0x1ac>
 800c91e:	9b03      	ldr	r3, [sp, #12]
 800c920:	1d1a      	adds	r2, r3, #4
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	9203      	str	r2, [sp, #12]
 800c926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c92a:	3402      	adds	r4, #2
 800c92c:	9305      	str	r3, [sp, #20]
 800c92e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ca04 <_vfiprintf_r+0x22c>
 800c932:	7821      	ldrb	r1, [r4, #0]
 800c934:	2203      	movs	r2, #3
 800c936:	4650      	mov	r0, sl
 800c938:	f7f3 fc52 	bl	80001e0 <memchr>
 800c93c:	b138      	cbz	r0, 800c94e <_vfiprintf_r+0x176>
 800c93e:	9b04      	ldr	r3, [sp, #16]
 800c940:	eba0 000a 	sub.w	r0, r0, sl
 800c944:	2240      	movs	r2, #64	@ 0x40
 800c946:	4082      	lsls	r2, r0
 800c948:	4313      	orrs	r3, r2
 800c94a:	3401      	adds	r4, #1
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c952:	4829      	ldr	r0, [pc, #164]	@ (800c9f8 <_vfiprintf_r+0x220>)
 800c954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c958:	2206      	movs	r2, #6
 800c95a:	f7f3 fc41 	bl	80001e0 <memchr>
 800c95e:	2800      	cmp	r0, #0
 800c960:	d03f      	beq.n	800c9e2 <_vfiprintf_r+0x20a>
 800c962:	4b26      	ldr	r3, [pc, #152]	@ (800c9fc <_vfiprintf_r+0x224>)
 800c964:	bb1b      	cbnz	r3, 800c9ae <_vfiprintf_r+0x1d6>
 800c966:	9b03      	ldr	r3, [sp, #12]
 800c968:	3307      	adds	r3, #7
 800c96a:	f023 0307 	bic.w	r3, r3, #7
 800c96e:	3308      	adds	r3, #8
 800c970:	9303      	str	r3, [sp, #12]
 800c972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c974:	443b      	add	r3, r7
 800c976:	9309      	str	r3, [sp, #36]	@ 0x24
 800c978:	e76a      	b.n	800c850 <_vfiprintf_r+0x78>
 800c97a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c97e:	460c      	mov	r4, r1
 800c980:	2001      	movs	r0, #1
 800c982:	e7a8      	b.n	800c8d6 <_vfiprintf_r+0xfe>
 800c984:	2300      	movs	r3, #0
 800c986:	3401      	adds	r4, #1
 800c988:	9305      	str	r3, [sp, #20]
 800c98a:	4619      	mov	r1, r3
 800c98c:	f04f 0c0a 	mov.w	ip, #10
 800c990:	4620      	mov	r0, r4
 800c992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c996:	3a30      	subs	r2, #48	@ 0x30
 800c998:	2a09      	cmp	r2, #9
 800c99a:	d903      	bls.n	800c9a4 <_vfiprintf_r+0x1cc>
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d0c6      	beq.n	800c92e <_vfiprintf_r+0x156>
 800c9a0:	9105      	str	r1, [sp, #20]
 800c9a2:	e7c4      	b.n	800c92e <_vfiprintf_r+0x156>
 800c9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9a8:	4604      	mov	r4, r0
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e7f0      	b.n	800c990 <_vfiprintf_r+0x1b8>
 800c9ae:	ab03      	add	r3, sp, #12
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	462a      	mov	r2, r5
 800c9b4:	4b12      	ldr	r3, [pc, #72]	@ (800ca00 <_vfiprintf_r+0x228>)
 800c9b6:	a904      	add	r1, sp, #16
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f3af 8000 	nop.w
 800c9be:	4607      	mov	r7, r0
 800c9c0:	1c78      	adds	r0, r7, #1
 800c9c2:	d1d6      	bne.n	800c972 <_vfiprintf_r+0x19a>
 800c9c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9c6:	07d9      	lsls	r1, r3, #31
 800c9c8:	d405      	bmi.n	800c9d6 <_vfiprintf_r+0x1fe>
 800c9ca:	89ab      	ldrh	r3, [r5, #12]
 800c9cc:	059a      	lsls	r2, r3, #22
 800c9ce:	d402      	bmi.n	800c9d6 <_vfiprintf_r+0x1fe>
 800c9d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9d2:	f7fe fcad 	bl	800b330 <__retarget_lock_release_recursive>
 800c9d6:	89ab      	ldrh	r3, [r5, #12]
 800c9d8:	065b      	lsls	r3, r3, #25
 800c9da:	f53f af1f 	bmi.w	800c81c <_vfiprintf_r+0x44>
 800c9de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9e0:	e71e      	b.n	800c820 <_vfiprintf_r+0x48>
 800c9e2:	ab03      	add	r3, sp, #12
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	462a      	mov	r2, r5
 800c9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ca00 <_vfiprintf_r+0x228>)
 800c9ea:	a904      	add	r1, sp, #16
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f000 f879 	bl	800cae4 <_printf_i>
 800c9f2:	e7e4      	b.n	800c9be <_vfiprintf_r+0x1e6>
 800c9f4:	0800d3e5 	.word	0x0800d3e5
 800c9f8:	0800d3ef 	.word	0x0800d3ef
 800c9fc:	00000000 	.word	0x00000000
 800ca00:	0800c7b5 	.word	0x0800c7b5
 800ca04:	0800d3eb 	.word	0x0800d3eb

0800ca08 <_printf_common>:
 800ca08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca0c:	4616      	mov	r6, r2
 800ca0e:	4698      	mov	r8, r3
 800ca10:	688a      	ldr	r2, [r1, #8]
 800ca12:	690b      	ldr	r3, [r1, #16]
 800ca14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	bfb8      	it	lt
 800ca1c:	4613      	movlt	r3, r2
 800ca1e:	6033      	str	r3, [r6, #0]
 800ca20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca24:	4607      	mov	r7, r0
 800ca26:	460c      	mov	r4, r1
 800ca28:	b10a      	cbz	r2, 800ca2e <_printf_common+0x26>
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	6033      	str	r3, [r6, #0]
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	0699      	lsls	r1, r3, #26
 800ca32:	bf42      	ittt	mi
 800ca34:	6833      	ldrmi	r3, [r6, #0]
 800ca36:	3302      	addmi	r3, #2
 800ca38:	6033      	strmi	r3, [r6, #0]
 800ca3a:	6825      	ldr	r5, [r4, #0]
 800ca3c:	f015 0506 	ands.w	r5, r5, #6
 800ca40:	d106      	bne.n	800ca50 <_printf_common+0x48>
 800ca42:	f104 0a19 	add.w	sl, r4, #25
 800ca46:	68e3      	ldr	r3, [r4, #12]
 800ca48:	6832      	ldr	r2, [r6, #0]
 800ca4a:	1a9b      	subs	r3, r3, r2
 800ca4c:	42ab      	cmp	r3, r5
 800ca4e:	dc26      	bgt.n	800ca9e <_printf_common+0x96>
 800ca50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca54:	6822      	ldr	r2, [r4, #0]
 800ca56:	3b00      	subs	r3, #0
 800ca58:	bf18      	it	ne
 800ca5a:	2301      	movne	r3, #1
 800ca5c:	0692      	lsls	r2, r2, #26
 800ca5e:	d42b      	bmi.n	800cab8 <_printf_common+0xb0>
 800ca60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca64:	4641      	mov	r1, r8
 800ca66:	4638      	mov	r0, r7
 800ca68:	47c8      	blx	r9
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	d01e      	beq.n	800caac <_printf_common+0xa4>
 800ca6e:	6823      	ldr	r3, [r4, #0]
 800ca70:	6922      	ldr	r2, [r4, #16]
 800ca72:	f003 0306 	and.w	r3, r3, #6
 800ca76:	2b04      	cmp	r3, #4
 800ca78:	bf02      	ittt	eq
 800ca7a:	68e5      	ldreq	r5, [r4, #12]
 800ca7c:	6833      	ldreq	r3, [r6, #0]
 800ca7e:	1aed      	subeq	r5, r5, r3
 800ca80:	68a3      	ldr	r3, [r4, #8]
 800ca82:	bf0c      	ite	eq
 800ca84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca88:	2500      	movne	r5, #0
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	bfc4      	itt	gt
 800ca8e:	1a9b      	subgt	r3, r3, r2
 800ca90:	18ed      	addgt	r5, r5, r3
 800ca92:	2600      	movs	r6, #0
 800ca94:	341a      	adds	r4, #26
 800ca96:	42b5      	cmp	r5, r6
 800ca98:	d11a      	bne.n	800cad0 <_printf_common+0xc8>
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	e008      	b.n	800cab0 <_printf_common+0xa8>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	4652      	mov	r2, sl
 800caa2:	4641      	mov	r1, r8
 800caa4:	4638      	mov	r0, r7
 800caa6:	47c8      	blx	r9
 800caa8:	3001      	adds	r0, #1
 800caaa:	d103      	bne.n	800cab4 <_printf_common+0xac>
 800caac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab4:	3501      	adds	r5, #1
 800cab6:	e7c6      	b.n	800ca46 <_printf_common+0x3e>
 800cab8:	18e1      	adds	r1, r4, r3
 800caba:	1c5a      	adds	r2, r3, #1
 800cabc:	2030      	movs	r0, #48	@ 0x30
 800cabe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cac2:	4422      	add	r2, r4
 800cac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cacc:	3302      	adds	r3, #2
 800cace:	e7c7      	b.n	800ca60 <_printf_common+0x58>
 800cad0:	2301      	movs	r3, #1
 800cad2:	4622      	mov	r2, r4
 800cad4:	4641      	mov	r1, r8
 800cad6:	4638      	mov	r0, r7
 800cad8:	47c8      	blx	r9
 800cada:	3001      	adds	r0, #1
 800cadc:	d0e6      	beq.n	800caac <_printf_common+0xa4>
 800cade:	3601      	adds	r6, #1
 800cae0:	e7d9      	b.n	800ca96 <_printf_common+0x8e>
	...

0800cae4 <_printf_i>:
 800cae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cae8:	7e0f      	ldrb	r7, [r1, #24]
 800caea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800caec:	2f78      	cmp	r7, #120	@ 0x78
 800caee:	4691      	mov	r9, r2
 800caf0:	4680      	mov	r8, r0
 800caf2:	460c      	mov	r4, r1
 800caf4:	469a      	mov	sl, r3
 800caf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cafa:	d807      	bhi.n	800cb0c <_printf_i+0x28>
 800cafc:	2f62      	cmp	r7, #98	@ 0x62
 800cafe:	d80a      	bhi.n	800cb16 <_printf_i+0x32>
 800cb00:	2f00      	cmp	r7, #0
 800cb02:	f000 80d2 	beq.w	800ccaa <_printf_i+0x1c6>
 800cb06:	2f58      	cmp	r7, #88	@ 0x58
 800cb08:	f000 80b9 	beq.w	800cc7e <_printf_i+0x19a>
 800cb0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb14:	e03a      	b.n	800cb8c <_printf_i+0xa8>
 800cb16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb1a:	2b15      	cmp	r3, #21
 800cb1c:	d8f6      	bhi.n	800cb0c <_printf_i+0x28>
 800cb1e:	a101      	add	r1, pc, #4	@ (adr r1, 800cb24 <_printf_i+0x40>)
 800cb20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb24:	0800cb7d 	.word	0x0800cb7d
 800cb28:	0800cb91 	.word	0x0800cb91
 800cb2c:	0800cb0d 	.word	0x0800cb0d
 800cb30:	0800cb0d 	.word	0x0800cb0d
 800cb34:	0800cb0d 	.word	0x0800cb0d
 800cb38:	0800cb0d 	.word	0x0800cb0d
 800cb3c:	0800cb91 	.word	0x0800cb91
 800cb40:	0800cb0d 	.word	0x0800cb0d
 800cb44:	0800cb0d 	.word	0x0800cb0d
 800cb48:	0800cb0d 	.word	0x0800cb0d
 800cb4c:	0800cb0d 	.word	0x0800cb0d
 800cb50:	0800cc91 	.word	0x0800cc91
 800cb54:	0800cbbb 	.word	0x0800cbbb
 800cb58:	0800cc4b 	.word	0x0800cc4b
 800cb5c:	0800cb0d 	.word	0x0800cb0d
 800cb60:	0800cb0d 	.word	0x0800cb0d
 800cb64:	0800ccb3 	.word	0x0800ccb3
 800cb68:	0800cb0d 	.word	0x0800cb0d
 800cb6c:	0800cbbb 	.word	0x0800cbbb
 800cb70:	0800cb0d 	.word	0x0800cb0d
 800cb74:	0800cb0d 	.word	0x0800cb0d
 800cb78:	0800cc53 	.word	0x0800cc53
 800cb7c:	6833      	ldr	r3, [r6, #0]
 800cb7e:	1d1a      	adds	r2, r3, #4
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	6032      	str	r2, [r6, #0]
 800cb84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	e09d      	b.n	800cccc <_printf_i+0x1e8>
 800cb90:	6833      	ldr	r3, [r6, #0]
 800cb92:	6820      	ldr	r0, [r4, #0]
 800cb94:	1d19      	adds	r1, r3, #4
 800cb96:	6031      	str	r1, [r6, #0]
 800cb98:	0606      	lsls	r6, r0, #24
 800cb9a:	d501      	bpl.n	800cba0 <_printf_i+0xbc>
 800cb9c:	681d      	ldr	r5, [r3, #0]
 800cb9e:	e003      	b.n	800cba8 <_printf_i+0xc4>
 800cba0:	0645      	lsls	r5, r0, #25
 800cba2:	d5fb      	bpl.n	800cb9c <_printf_i+0xb8>
 800cba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cba8:	2d00      	cmp	r5, #0
 800cbaa:	da03      	bge.n	800cbb4 <_printf_i+0xd0>
 800cbac:	232d      	movs	r3, #45	@ 0x2d
 800cbae:	426d      	negs	r5, r5
 800cbb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbb4:	4859      	ldr	r0, [pc, #356]	@ (800cd1c <_printf_i+0x238>)
 800cbb6:	230a      	movs	r3, #10
 800cbb8:	e011      	b.n	800cbde <_printf_i+0xfa>
 800cbba:	6821      	ldr	r1, [r4, #0]
 800cbbc:	6833      	ldr	r3, [r6, #0]
 800cbbe:	0608      	lsls	r0, r1, #24
 800cbc0:	f853 5b04 	ldr.w	r5, [r3], #4
 800cbc4:	d402      	bmi.n	800cbcc <_printf_i+0xe8>
 800cbc6:	0649      	lsls	r1, r1, #25
 800cbc8:	bf48      	it	mi
 800cbca:	b2ad      	uxthmi	r5, r5
 800cbcc:	2f6f      	cmp	r7, #111	@ 0x6f
 800cbce:	4853      	ldr	r0, [pc, #332]	@ (800cd1c <_printf_i+0x238>)
 800cbd0:	6033      	str	r3, [r6, #0]
 800cbd2:	bf14      	ite	ne
 800cbd4:	230a      	movne	r3, #10
 800cbd6:	2308      	moveq	r3, #8
 800cbd8:	2100      	movs	r1, #0
 800cbda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbde:	6866      	ldr	r6, [r4, #4]
 800cbe0:	60a6      	str	r6, [r4, #8]
 800cbe2:	2e00      	cmp	r6, #0
 800cbe4:	bfa2      	ittt	ge
 800cbe6:	6821      	ldrge	r1, [r4, #0]
 800cbe8:	f021 0104 	bicge.w	r1, r1, #4
 800cbec:	6021      	strge	r1, [r4, #0]
 800cbee:	b90d      	cbnz	r5, 800cbf4 <_printf_i+0x110>
 800cbf0:	2e00      	cmp	r6, #0
 800cbf2:	d04b      	beq.n	800cc8c <_printf_i+0x1a8>
 800cbf4:	4616      	mov	r6, r2
 800cbf6:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbfa:	fb03 5711 	mls	r7, r3, r1, r5
 800cbfe:	5dc7      	ldrb	r7, [r0, r7]
 800cc00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc04:	462f      	mov	r7, r5
 800cc06:	42bb      	cmp	r3, r7
 800cc08:	460d      	mov	r5, r1
 800cc0a:	d9f4      	bls.n	800cbf6 <_printf_i+0x112>
 800cc0c:	2b08      	cmp	r3, #8
 800cc0e:	d10b      	bne.n	800cc28 <_printf_i+0x144>
 800cc10:	6823      	ldr	r3, [r4, #0]
 800cc12:	07df      	lsls	r7, r3, #31
 800cc14:	d508      	bpl.n	800cc28 <_printf_i+0x144>
 800cc16:	6923      	ldr	r3, [r4, #16]
 800cc18:	6861      	ldr	r1, [r4, #4]
 800cc1a:	4299      	cmp	r1, r3
 800cc1c:	bfde      	ittt	le
 800cc1e:	2330      	movle	r3, #48	@ 0x30
 800cc20:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc24:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cc28:	1b92      	subs	r2, r2, r6
 800cc2a:	6122      	str	r2, [r4, #16]
 800cc2c:	f8cd a000 	str.w	sl, [sp]
 800cc30:	464b      	mov	r3, r9
 800cc32:	aa03      	add	r2, sp, #12
 800cc34:	4621      	mov	r1, r4
 800cc36:	4640      	mov	r0, r8
 800cc38:	f7ff fee6 	bl	800ca08 <_printf_common>
 800cc3c:	3001      	adds	r0, #1
 800cc3e:	d14a      	bne.n	800ccd6 <_printf_i+0x1f2>
 800cc40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc44:	b004      	add	sp, #16
 800cc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	f043 0320 	orr.w	r3, r3, #32
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	4833      	ldr	r0, [pc, #204]	@ (800cd20 <_printf_i+0x23c>)
 800cc54:	2778      	movs	r7, #120	@ 0x78
 800cc56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	6831      	ldr	r1, [r6, #0]
 800cc5e:	061f      	lsls	r7, r3, #24
 800cc60:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc64:	d402      	bmi.n	800cc6c <_printf_i+0x188>
 800cc66:	065f      	lsls	r7, r3, #25
 800cc68:	bf48      	it	mi
 800cc6a:	b2ad      	uxthmi	r5, r5
 800cc6c:	6031      	str	r1, [r6, #0]
 800cc6e:	07d9      	lsls	r1, r3, #31
 800cc70:	bf44      	itt	mi
 800cc72:	f043 0320 	orrmi.w	r3, r3, #32
 800cc76:	6023      	strmi	r3, [r4, #0]
 800cc78:	b11d      	cbz	r5, 800cc82 <_printf_i+0x19e>
 800cc7a:	2310      	movs	r3, #16
 800cc7c:	e7ac      	b.n	800cbd8 <_printf_i+0xf4>
 800cc7e:	4827      	ldr	r0, [pc, #156]	@ (800cd1c <_printf_i+0x238>)
 800cc80:	e7e9      	b.n	800cc56 <_printf_i+0x172>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	f023 0320 	bic.w	r3, r3, #32
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	e7f6      	b.n	800cc7a <_printf_i+0x196>
 800cc8c:	4616      	mov	r6, r2
 800cc8e:	e7bd      	b.n	800cc0c <_printf_i+0x128>
 800cc90:	6833      	ldr	r3, [r6, #0]
 800cc92:	6825      	ldr	r5, [r4, #0]
 800cc94:	6961      	ldr	r1, [r4, #20]
 800cc96:	1d18      	adds	r0, r3, #4
 800cc98:	6030      	str	r0, [r6, #0]
 800cc9a:	062e      	lsls	r6, r5, #24
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	d501      	bpl.n	800cca4 <_printf_i+0x1c0>
 800cca0:	6019      	str	r1, [r3, #0]
 800cca2:	e002      	b.n	800ccaa <_printf_i+0x1c6>
 800cca4:	0668      	lsls	r0, r5, #25
 800cca6:	d5fb      	bpl.n	800cca0 <_printf_i+0x1bc>
 800cca8:	8019      	strh	r1, [r3, #0]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	6123      	str	r3, [r4, #16]
 800ccae:	4616      	mov	r6, r2
 800ccb0:	e7bc      	b.n	800cc2c <_printf_i+0x148>
 800ccb2:	6833      	ldr	r3, [r6, #0]
 800ccb4:	1d1a      	adds	r2, r3, #4
 800ccb6:	6032      	str	r2, [r6, #0]
 800ccb8:	681e      	ldr	r6, [r3, #0]
 800ccba:	6862      	ldr	r2, [r4, #4]
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f7f3 fa8e 	bl	80001e0 <memchr>
 800ccc4:	b108      	cbz	r0, 800ccca <_printf_i+0x1e6>
 800ccc6:	1b80      	subs	r0, r0, r6
 800ccc8:	6060      	str	r0, [r4, #4]
 800ccca:	6863      	ldr	r3, [r4, #4]
 800cccc:	6123      	str	r3, [r4, #16]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccd4:	e7aa      	b.n	800cc2c <_printf_i+0x148>
 800ccd6:	6923      	ldr	r3, [r4, #16]
 800ccd8:	4632      	mov	r2, r6
 800ccda:	4649      	mov	r1, r9
 800ccdc:	4640      	mov	r0, r8
 800ccde:	47d0      	blx	sl
 800cce0:	3001      	adds	r0, #1
 800cce2:	d0ad      	beq.n	800cc40 <_printf_i+0x15c>
 800cce4:	6823      	ldr	r3, [r4, #0]
 800cce6:	079b      	lsls	r3, r3, #30
 800cce8:	d413      	bmi.n	800cd12 <_printf_i+0x22e>
 800ccea:	68e0      	ldr	r0, [r4, #12]
 800ccec:	9b03      	ldr	r3, [sp, #12]
 800ccee:	4298      	cmp	r0, r3
 800ccf0:	bfb8      	it	lt
 800ccf2:	4618      	movlt	r0, r3
 800ccf4:	e7a6      	b.n	800cc44 <_printf_i+0x160>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	4632      	mov	r2, r6
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	47d0      	blx	sl
 800cd00:	3001      	adds	r0, #1
 800cd02:	d09d      	beq.n	800cc40 <_printf_i+0x15c>
 800cd04:	3501      	adds	r5, #1
 800cd06:	68e3      	ldr	r3, [r4, #12]
 800cd08:	9903      	ldr	r1, [sp, #12]
 800cd0a:	1a5b      	subs	r3, r3, r1
 800cd0c:	42ab      	cmp	r3, r5
 800cd0e:	dcf2      	bgt.n	800ccf6 <_printf_i+0x212>
 800cd10:	e7eb      	b.n	800ccea <_printf_i+0x206>
 800cd12:	2500      	movs	r5, #0
 800cd14:	f104 0619 	add.w	r6, r4, #25
 800cd18:	e7f5      	b.n	800cd06 <_printf_i+0x222>
 800cd1a:	bf00      	nop
 800cd1c:	0800d3f6 	.word	0x0800d3f6
 800cd20:	0800d407 	.word	0x0800d407

0800cd24 <__swbuf_r>:
 800cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd26:	460e      	mov	r6, r1
 800cd28:	4614      	mov	r4, r2
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	b118      	cbz	r0, 800cd36 <__swbuf_r+0x12>
 800cd2e:	6a03      	ldr	r3, [r0, #32]
 800cd30:	b90b      	cbnz	r3, 800cd36 <__swbuf_r+0x12>
 800cd32:	f7fe f9e5 	bl	800b100 <__sinit>
 800cd36:	69a3      	ldr	r3, [r4, #24]
 800cd38:	60a3      	str	r3, [r4, #8]
 800cd3a:	89a3      	ldrh	r3, [r4, #12]
 800cd3c:	071a      	lsls	r2, r3, #28
 800cd3e:	d501      	bpl.n	800cd44 <__swbuf_r+0x20>
 800cd40:	6923      	ldr	r3, [r4, #16]
 800cd42:	b943      	cbnz	r3, 800cd56 <__swbuf_r+0x32>
 800cd44:	4621      	mov	r1, r4
 800cd46:	4628      	mov	r0, r5
 800cd48:	f000 f82a 	bl	800cda0 <__swsetup_r>
 800cd4c:	b118      	cbz	r0, 800cd56 <__swbuf_r+0x32>
 800cd4e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cd52:	4638      	mov	r0, r7
 800cd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	6922      	ldr	r2, [r4, #16]
 800cd5a:	1a98      	subs	r0, r3, r2
 800cd5c:	6963      	ldr	r3, [r4, #20]
 800cd5e:	b2f6      	uxtb	r6, r6
 800cd60:	4283      	cmp	r3, r0
 800cd62:	4637      	mov	r7, r6
 800cd64:	dc05      	bgt.n	800cd72 <__swbuf_r+0x4e>
 800cd66:	4621      	mov	r1, r4
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f7ff fc81 	bl	800c670 <_fflush_r>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d1ed      	bne.n	800cd4e <__swbuf_r+0x2a>
 800cd72:	68a3      	ldr	r3, [r4, #8]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	60a3      	str	r3, [r4, #8]
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	6022      	str	r2, [r4, #0]
 800cd7e:	701e      	strb	r6, [r3, #0]
 800cd80:	6962      	ldr	r2, [r4, #20]
 800cd82:	1c43      	adds	r3, r0, #1
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d004      	beq.n	800cd92 <__swbuf_r+0x6e>
 800cd88:	89a3      	ldrh	r3, [r4, #12]
 800cd8a:	07db      	lsls	r3, r3, #31
 800cd8c:	d5e1      	bpl.n	800cd52 <__swbuf_r+0x2e>
 800cd8e:	2e0a      	cmp	r6, #10
 800cd90:	d1df      	bne.n	800cd52 <__swbuf_r+0x2e>
 800cd92:	4621      	mov	r1, r4
 800cd94:	4628      	mov	r0, r5
 800cd96:	f7ff fc6b 	bl	800c670 <_fflush_r>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d0d9      	beq.n	800cd52 <__swbuf_r+0x2e>
 800cd9e:	e7d6      	b.n	800cd4e <__swbuf_r+0x2a>

0800cda0 <__swsetup_r>:
 800cda0:	b538      	push	{r3, r4, r5, lr}
 800cda2:	4b29      	ldr	r3, [pc, #164]	@ (800ce48 <__swsetup_r+0xa8>)
 800cda4:	4605      	mov	r5, r0
 800cda6:	6818      	ldr	r0, [r3, #0]
 800cda8:	460c      	mov	r4, r1
 800cdaa:	b118      	cbz	r0, 800cdb4 <__swsetup_r+0x14>
 800cdac:	6a03      	ldr	r3, [r0, #32]
 800cdae:	b90b      	cbnz	r3, 800cdb4 <__swsetup_r+0x14>
 800cdb0:	f7fe f9a6 	bl	800b100 <__sinit>
 800cdb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb8:	0719      	lsls	r1, r3, #28
 800cdba:	d422      	bmi.n	800ce02 <__swsetup_r+0x62>
 800cdbc:	06da      	lsls	r2, r3, #27
 800cdbe:	d407      	bmi.n	800cdd0 <__swsetup_r+0x30>
 800cdc0:	2209      	movs	r2, #9
 800cdc2:	602a      	str	r2, [r5, #0]
 800cdc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdc8:	81a3      	strh	r3, [r4, #12]
 800cdca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cdce:	e033      	b.n	800ce38 <__swsetup_r+0x98>
 800cdd0:	0758      	lsls	r0, r3, #29
 800cdd2:	d512      	bpl.n	800cdfa <__swsetup_r+0x5a>
 800cdd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdd6:	b141      	cbz	r1, 800cdea <__swsetup_r+0x4a>
 800cdd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cddc:	4299      	cmp	r1, r3
 800cdde:	d002      	beq.n	800cde6 <__swsetup_r+0x46>
 800cde0:	4628      	mov	r0, r5
 800cde2:	f7fe fabd 	bl	800b360 <_free_r>
 800cde6:	2300      	movs	r3, #0
 800cde8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cdf0:	81a3      	strh	r3, [r4, #12]
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	6063      	str	r3, [r4, #4]
 800cdf6:	6923      	ldr	r3, [r4, #16]
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	f043 0308 	orr.w	r3, r3, #8
 800ce00:	81a3      	strh	r3, [r4, #12]
 800ce02:	6923      	ldr	r3, [r4, #16]
 800ce04:	b94b      	cbnz	r3, 800ce1a <__swsetup_r+0x7a>
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ce0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce10:	d003      	beq.n	800ce1a <__swsetup_r+0x7a>
 800ce12:	4621      	mov	r1, r4
 800ce14:	4628      	mov	r0, r5
 800ce16:	f000 f883 	bl	800cf20 <__smakebuf_r>
 800ce1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1e:	f013 0201 	ands.w	r2, r3, #1
 800ce22:	d00a      	beq.n	800ce3a <__swsetup_r+0x9a>
 800ce24:	2200      	movs	r2, #0
 800ce26:	60a2      	str	r2, [r4, #8]
 800ce28:	6962      	ldr	r2, [r4, #20]
 800ce2a:	4252      	negs	r2, r2
 800ce2c:	61a2      	str	r2, [r4, #24]
 800ce2e:	6922      	ldr	r2, [r4, #16]
 800ce30:	b942      	cbnz	r2, 800ce44 <__swsetup_r+0xa4>
 800ce32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce36:	d1c5      	bne.n	800cdc4 <__swsetup_r+0x24>
 800ce38:	bd38      	pop	{r3, r4, r5, pc}
 800ce3a:	0799      	lsls	r1, r3, #30
 800ce3c:	bf58      	it	pl
 800ce3e:	6962      	ldrpl	r2, [r4, #20]
 800ce40:	60a2      	str	r2, [r4, #8]
 800ce42:	e7f4      	b.n	800ce2e <__swsetup_r+0x8e>
 800ce44:	2000      	movs	r0, #0
 800ce46:	e7f7      	b.n	800ce38 <__swsetup_r+0x98>
 800ce48:	20000274 	.word	0x20000274

0800ce4c <_raise_r>:
 800ce4c:	291f      	cmp	r1, #31
 800ce4e:	b538      	push	{r3, r4, r5, lr}
 800ce50:	4605      	mov	r5, r0
 800ce52:	460c      	mov	r4, r1
 800ce54:	d904      	bls.n	800ce60 <_raise_r+0x14>
 800ce56:	2316      	movs	r3, #22
 800ce58:	6003      	str	r3, [r0, #0]
 800ce5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce5e:	bd38      	pop	{r3, r4, r5, pc}
 800ce60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce62:	b112      	cbz	r2, 800ce6a <_raise_r+0x1e>
 800ce64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce68:	b94b      	cbnz	r3, 800ce7e <_raise_r+0x32>
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	f000 f830 	bl	800ced0 <_getpid_r>
 800ce70:	4622      	mov	r2, r4
 800ce72:	4601      	mov	r1, r0
 800ce74:	4628      	mov	r0, r5
 800ce76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce7a:	f000 b817 	b.w	800ceac <_kill_r>
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d00a      	beq.n	800ce98 <_raise_r+0x4c>
 800ce82:	1c59      	adds	r1, r3, #1
 800ce84:	d103      	bne.n	800ce8e <_raise_r+0x42>
 800ce86:	2316      	movs	r3, #22
 800ce88:	6003      	str	r3, [r0, #0]
 800ce8a:	2001      	movs	r0, #1
 800ce8c:	e7e7      	b.n	800ce5e <_raise_r+0x12>
 800ce8e:	2100      	movs	r1, #0
 800ce90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ce94:	4620      	mov	r0, r4
 800ce96:	4798      	blx	r3
 800ce98:	2000      	movs	r0, #0
 800ce9a:	e7e0      	b.n	800ce5e <_raise_r+0x12>

0800ce9c <raise>:
 800ce9c:	4b02      	ldr	r3, [pc, #8]	@ (800cea8 <raise+0xc>)
 800ce9e:	4601      	mov	r1, r0
 800cea0:	6818      	ldr	r0, [r3, #0]
 800cea2:	f7ff bfd3 	b.w	800ce4c <_raise_r>
 800cea6:	bf00      	nop
 800cea8:	20000274 	.word	0x20000274

0800ceac <_kill_r>:
 800ceac:	b538      	push	{r3, r4, r5, lr}
 800ceae:	4d07      	ldr	r5, [pc, #28]	@ (800cecc <_kill_r+0x20>)
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	4608      	mov	r0, r1
 800ceb6:	4611      	mov	r1, r2
 800ceb8:	602b      	str	r3, [r5, #0]
 800ceba:	f7f5 f83d 	bl	8001f38 <_kill>
 800cebe:	1c43      	adds	r3, r0, #1
 800cec0:	d102      	bne.n	800cec8 <_kill_r+0x1c>
 800cec2:	682b      	ldr	r3, [r5, #0]
 800cec4:	b103      	cbz	r3, 800cec8 <_kill_r+0x1c>
 800cec6:	6023      	str	r3, [r4, #0]
 800cec8:	bd38      	pop	{r3, r4, r5, pc}
 800ceca:	bf00      	nop
 800cecc:	200025d4 	.word	0x200025d4

0800ced0 <_getpid_r>:
 800ced0:	f7f5 b82a 	b.w	8001f28 <_getpid>

0800ced4 <__swhatbuf_r>:
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	460c      	mov	r4, r1
 800ced8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cedc:	2900      	cmp	r1, #0
 800cede:	b096      	sub	sp, #88	@ 0x58
 800cee0:	4615      	mov	r5, r2
 800cee2:	461e      	mov	r6, r3
 800cee4:	da0d      	bge.n	800cf02 <__swhatbuf_r+0x2e>
 800cee6:	89a3      	ldrh	r3, [r4, #12]
 800cee8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ceec:	f04f 0100 	mov.w	r1, #0
 800cef0:	bf14      	ite	ne
 800cef2:	2340      	movne	r3, #64	@ 0x40
 800cef4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cef8:	2000      	movs	r0, #0
 800cefa:	6031      	str	r1, [r6, #0]
 800cefc:	602b      	str	r3, [r5, #0]
 800cefe:	b016      	add	sp, #88	@ 0x58
 800cf00:	bd70      	pop	{r4, r5, r6, pc}
 800cf02:	466a      	mov	r2, sp
 800cf04:	f000 f848 	bl	800cf98 <_fstat_r>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	dbec      	blt.n	800cee6 <__swhatbuf_r+0x12>
 800cf0c:	9901      	ldr	r1, [sp, #4]
 800cf0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cf12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cf16:	4259      	negs	r1, r3
 800cf18:	4159      	adcs	r1, r3
 800cf1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf1e:	e7eb      	b.n	800cef8 <__swhatbuf_r+0x24>

0800cf20 <__smakebuf_r>:
 800cf20:	898b      	ldrh	r3, [r1, #12]
 800cf22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf24:	079d      	lsls	r5, r3, #30
 800cf26:	4606      	mov	r6, r0
 800cf28:	460c      	mov	r4, r1
 800cf2a:	d507      	bpl.n	800cf3c <__smakebuf_r+0x1c>
 800cf2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	6123      	str	r3, [r4, #16]
 800cf34:	2301      	movs	r3, #1
 800cf36:	6163      	str	r3, [r4, #20]
 800cf38:	b003      	add	sp, #12
 800cf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf3c:	ab01      	add	r3, sp, #4
 800cf3e:	466a      	mov	r2, sp
 800cf40:	f7ff ffc8 	bl	800ced4 <__swhatbuf_r>
 800cf44:	9f00      	ldr	r7, [sp, #0]
 800cf46:	4605      	mov	r5, r0
 800cf48:	4639      	mov	r1, r7
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f7fe fdae 	bl	800baac <_malloc_r>
 800cf50:	b948      	cbnz	r0, 800cf66 <__smakebuf_r+0x46>
 800cf52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf56:	059a      	lsls	r2, r3, #22
 800cf58:	d4ee      	bmi.n	800cf38 <__smakebuf_r+0x18>
 800cf5a:	f023 0303 	bic.w	r3, r3, #3
 800cf5e:	f043 0302 	orr.w	r3, r3, #2
 800cf62:	81a3      	strh	r3, [r4, #12]
 800cf64:	e7e2      	b.n	800cf2c <__smakebuf_r+0xc>
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	6020      	str	r0, [r4, #0]
 800cf6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf6e:	81a3      	strh	r3, [r4, #12]
 800cf70:	9b01      	ldr	r3, [sp, #4]
 800cf72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf76:	b15b      	cbz	r3, 800cf90 <__smakebuf_r+0x70>
 800cf78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f000 f81d 	bl	800cfbc <_isatty_r>
 800cf82:	b128      	cbz	r0, 800cf90 <__smakebuf_r+0x70>
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	f023 0303 	bic.w	r3, r3, #3
 800cf8a:	f043 0301 	orr.w	r3, r3, #1
 800cf8e:	81a3      	strh	r3, [r4, #12]
 800cf90:	89a3      	ldrh	r3, [r4, #12]
 800cf92:	431d      	orrs	r5, r3
 800cf94:	81a5      	strh	r5, [r4, #12]
 800cf96:	e7cf      	b.n	800cf38 <__smakebuf_r+0x18>

0800cf98 <_fstat_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	4d07      	ldr	r5, [pc, #28]	@ (800cfb8 <_fstat_r+0x20>)
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	4608      	mov	r0, r1
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	602b      	str	r3, [r5, #0]
 800cfa6:	f7f5 f827 	bl	8001ff8 <_fstat>
 800cfaa:	1c43      	adds	r3, r0, #1
 800cfac:	d102      	bne.n	800cfb4 <_fstat_r+0x1c>
 800cfae:	682b      	ldr	r3, [r5, #0]
 800cfb0:	b103      	cbz	r3, 800cfb4 <_fstat_r+0x1c>
 800cfb2:	6023      	str	r3, [r4, #0]
 800cfb4:	bd38      	pop	{r3, r4, r5, pc}
 800cfb6:	bf00      	nop
 800cfb8:	200025d4 	.word	0x200025d4

0800cfbc <_isatty_r>:
 800cfbc:	b538      	push	{r3, r4, r5, lr}
 800cfbe:	4d06      	ldr	r5, [pc, #24]	@ (800cfd8 <_isatty_r+0x1c>)
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	4608      	mov	r0, r1
 800cfc6:	602b      	str	r3, [r5, #0]
 800cfc8:	f7f5 f826 	bl	8002018 <_isatty>
 800cfcc:	1c43      	adds	r3, r0, #1
 800cfce:	d102      	bne.n	800cfd6 <_isatty_r+0x1a>
 800cfd0:	682b      	ldr	r3, [r5, #0]
 800cfd2:	b103      	cbz	r3, 800cfd6 <_isatty_r+0x1a>
 800cfd4:	6023      	str	r3, [r4, #0]
 800cfd6:	bd38      	pop	{r3, r4, r5, pc}
 800cfd8:	200025d4 	.word	0x200025d4

0800cfdc <_init>:
 800cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfde:	bf00      	nop
 800cfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfe2:	bc08      	pop	{r3}
 800cfe4:	469e      	mov	lr, r3
 800cfe6:	4770      	bx	lr

0800cfe8 <_fini>:
 800cfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfea:	bf00      	nop
 800cfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfee:	bc08      	pop	{r3}
 800cff0:	469e      	mov	lr, r3
 800cff2:	4770      	bx	lr
