
IMU_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be24  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800bfc8  0800bfc8  0000cfc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3e0  0800c3e0  0000e2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3e0  0800c3e0  0000d3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3e8  0800c3e8  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3e8  0800c3e8  0000d3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3ec  0800c3ec  0000d3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800c3f0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e90  200002c8  0800c6b4  0000e2c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002158  0800c6b4  0000f158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159e2  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003638  00000000  00000000  00023cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00027310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5e  00000000  00000000  000285d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e51  00000000  00000000  00029436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016949  00000000  00000000  00043287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093174  00000000  00000000  00059bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecd44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f78  00000000  00000000  000ecd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f2d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bfac 	.word	0x0800bfac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800bfac 	.word	0x0800bfac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b9a0 	b.w	8000ec4 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f83c 	bl	8000c08 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2lz>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	f7ff ff99 	bl	8000adc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x1c>
 8000bac:	4620      	mov	r0, r4
 8000bae:	4629      	mov	r1, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fd0f 	bl	80005f8 <__aeabi_dmul>
 8000bda:	f7ff ffa7 	bl	8000b2c <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc90 	bl	8000504 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <__aeabi_d2ulz+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fd06 	bl	80005f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb48 	bl	8000288 <__aeabi_dsub>
 8000bf8:	f7ff ff98 	bl	8000b2c <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f000 fc10 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f83c 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f000 f91c 	bl	8001110 <MX_GPIO_Init>
  MX_TIM9_Init();
 8000ed8:	f000 f8b6 	bl	8001048 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8000edc:	f000 f8ee 	bl	80010bc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000ee0:	f007 fd58 	bl	8008994 <MX_USB_DEVICE_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ee4:	f000 f89c 	bl	8001020 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      get_pitch(); // IMU 데이터를 업데이트
 8000ee8:	f000 f92c 	bl	8001144 <get_pitch>

      // Roll, Pitch, Yaw 데이터를 전송 버퍼에 넣기
      memcpy(data_buffer, &roll, sizeof(roll));
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <main+0x6c>)
 8000eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <main+0x70>)
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	460a      	mov	r2, r1
 8000efa:	605a      	str	r2, [r3, #4]
      memcpy(data_buffer + 8, &pitch, sizeof(pitch));
 8000efc:	490f      	ldr	r1, [pc, #60]	@ (8000f3c <main+0x74>)
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <main+0x78>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	600a      	str	r2, [r1, #0]
 8000f06:	604b      	str	r3, [r1, #4]
      memcpy(data_buffer + 16, &yaw, sizeof(yaw));
 8000f08:	490e      	ldr	r1, [pc, #56]	@ (8000f44 <main+0x7c>)
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <main+0x80>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	600a      	str	r2, [r1, #0]
 8000f12:	604b      	str	r3, [r1, #4]

      // USB CDC를 통해 데이터 전송
      if (CDC_Transmit_FS(data_buffer, sizeof(data_buffer)) == USBD_OK) {
 8000f14:	2120      	movs	r1, #32
 8000f16:	4808      	ldr	r0, [pc, #32]	@ (8000f38 <main+0x70>)
 8000f18:	f007 fdfa 	bl	8008b10 <CDC_Transmit_FS>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d103      	bne.n	8000f2a <main+0x62>
         HAL_Delay(100); // 100ms 대기 (전송 주기)
 8000f22:	2064      	movs	r0, #100	@ 0x64
 8000f24:	f000 fc56 	bl	80017d4 <HAL_Delay>
 8000f28:	e7de      	b.n	8000ee8 <main+0x20>
      } else {
         HAL_Delay(10); // 실패 시 잠시 대기 후 재시도
 8000f2a:	200a      	movs	r0, #10
 8000f2c:	f000 fc52 	bl	80017d4 <HAL_Delay>
      get_pitch(); // IMU 데이터를 업데이트
 8000f30:	e7da      	b.n	8000ee8 <main+0x20>
 8000f32:	bf00      	nop
 8000f34:	20000308 	.word	0x20000308
 8000f38:	20000370 	.word	0x20000370
 8000f3c:	20000378 	.word	0x20000378
 8000f40:	20000310 	.word	0x20000310
 8000f44:	20000380 	.word	0x20000380
 8000f48:	20000318 	.word	0x20000318

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	@ 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	@ 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f009 f941 	bl	800a1e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b28      	ldr	r3, [pc, #160]	@ (8001018 <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	4a27      	ldr	r2, [pc, #156]	@ (8001018 <SystemClock_Config+0xcc>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f80:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b22      	ldr	r3, [pc, #136]	@ (800101c <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f98:	4a20      	ldr	r2, [pc, #128]	@ (800101c <SystemClock_Config+0xd0>)
 8000f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fc4:	23c0      	movs	r3, #192	@ 0xc0
 8000fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fa21 	bl	800341c <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fe0:	f000 f9a8 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fc84 	bl	800390c <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800100a:	f000 f993 	bl	8001334 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	@ 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2043      	movs	r0, #67	@ 0x43
 800102a:	f000 fcd2 	bl	80019d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800102e:	2043      	movs	r0, #67	@ 0x43
 8001030:	f000 fceb 	bl	8001a0a <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2025      	movs	r0, #37	@ 0x25
 800103a:	f000 fcca 	bl	80019d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800103e:	2025      	movs	r0, #37	@ 0x25
 8001040:	f000 fce3 	bl	8001a0a <HAL_NVIC_EnableIRQ>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800105a:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <MX_TIM9_Init+0x6c>)
 800105c:	4a16      	ldr	r2, [pc, #88]	@ (80010b8 <MX_TIM9_Init+0x70>)
 800105e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8399;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_TIM9_Init+0x6c>)
 8001062:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001066:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <MX_TIM9_Init+0x6c>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_TIM9_Init+0x6c>)
 8001070:	2263      	movs	r2, #99	@ 0x63
 8001072:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <MX_TIM9_Init+0x6c>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_TIM9_Init+0x6c>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <MX_TIM9_Init+0x6c>)
 8001082:	f002 fe23 	bl	8003ccc <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800108c:	f000 f952 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001094:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <MX_TIM9_Init+0x6c>)
 800109c:	f002 fe65 	bl	8003d6a <HAL_TIM_ConfigClockSource>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80010a6:	f000 f945 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000390 	.word	0x20000390
 80010b8:	40014000 	.word	0x40014000

080010bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <MX_USART1_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_USART1_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <MX_USART1_UART_Init+0x4c>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_USART1_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <MX_USART1_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <MX_USART1_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <MX_USART1_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <MX_USART1_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <MX_USART1_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_USART1_UART_Init+0x4c>)
 80010f4:	f003 f826 	bl	8004144 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f000 f919 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200003d8 	.word	0x200003d8
 800110c:	40011000 	.word	0x40011000

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_GPIO_Init+0x30>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <MX_GPIO_Init+0x30>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_GPIO_Init+0x30>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <get_pitch>:

/* USER CODE BEGIN 4 */
void get_pitch(){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
   HAL_UART_Receive_DMA(&huart1, &IMUarray[0], 31);
 800114a:	221f      	movs	r2, #31
 800114c:	4968      	ldr	r1, [pc, #416]	@ (80012f0 <get_pitch+0x1ac>)
 800114e:	4869      	ldr	r0, [pc, #420]	@ (80012f4 <get_pitch+0x1b0>)
 8001150:	f003 f848 	bl	80041e4 <HAL_UART_Receive_DMA>
   for(int i = 1; i < 31; i++){
 8001154:	2301      	movs	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	e054      	b.n	8001204 <get_pitch+0xc0>
      if(IMUarray[i] == ','){
 800115a:	4a65      	ldr	r2, [pc, #404]	@ (80012f0 <get_pitch+0x1ac>)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b2c      	cmp	r3, #44	@ 0x2c
 8001164:	d116      	bne.n	8001194 <get_pitch+0x50>
         if(cnt0 == 0){
 8001166:	4b64      	ldr	r3, [pc, #400]	@ (80012f8 <get_pitch+0x1b4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d104      	bne.n	8001178 <get_pitch+0x34>
            cnt1 = i + 1;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3301      	adds	r3, #1
 8001172:	4a62      	ldr	r2, [pc, #392]	@ (80012fc <get_pitch+0x1b8>)
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e007      	b.n	8001188 <get_pitch+0x44>
         }
         else if (cnt0 == 1){
 8001178:	4b5f      	ldr	r3, [pc, #380]	@ (80012f8 <get_pitch+0x1b4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d103      	bne.n	8001188 <get_pitch+0x44>
            cnt2 = i + 1;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	4a5e      	ldr	r2, [pc, #376]	@ (8001300 <get_pitch+0x1bc>)
 8001186:	6013      	str	r3, [r2, #0]
         }
         cnt0++;
 8001188:	4b5b      	ldr	r3, [pc, #364]	@ (80012f8 <get_pitch+0x1b4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a5a      	ldr	r2, [pc, #360]	@ (80012f8 <get_pitch+0x1b4>)
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e029      	b.n	80011e8 <get_pitch+0xa4>
      }
      else{
         switch (cnt0){
 8001194:	4b58      	ldr	r3, [pc, #352]	@ (80012f8 <get_pitch+0x1b4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d01a      	beq.n	80011d2 <get_pitch+0x8e>
 800119c:	2b02      	cmp	r3, #2
 800119e:	dc23      	bgt.n	80011e8 <get_pitch+0xa4>
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <get_pitch+0x66>
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d009      	beq.n	80011bc <get_pitch+0x78>
 80011a8:	e01e      	b.n	80011e8 <get_pitch+0xa4>
         case 0:{
            alpha[i - 1] = IMUarray[i];
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	4950      	ldr	r1, [pc, #320]	@ (80012f0 <get_pitch+0x1ac>)
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	440a      	add	r2, r1
 80011b4:	7811      	ldrb	r1, [r2, #0]
 80011b6:	4a53      	ldr	r2, [pc, #332]	@ (8001304 <get_pitch+0x1c0>)
 80011b8:	54d1      	strb	r1, [r2, r3]
            break;
 80011ba:	e015      	b.n	80011e8 <get_pitch+0xa4>
         }
         case 1:{
            beta[i - cnt1] = IMUarray[i];
 80011bc:	4b4f      	ldr	r3, [pc, #316]	@ (80012fc <get_pitch+0x1b8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	494a      	ldr	r1, [pc, #296]	@ (80012f0 <get_pitch+0x1ac>)
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	440a      	add	r2, r1
 80011ca:	7811      	ldrb	r1, [r2, #0]
 80011cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001308 <get_pitch+0x1c4>)
 80011ce:	54d1      	strb	r1, [r2, r3]
            break;
 80011d0:	e00a      	b.n	80011e8 <get_pitch+0xa4>
         }
         case 2:{
            gamm[i - cnt2] = IMUarray[i];
 80011d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001300 <get_pitch+0x1bc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	4945      	ldr	r1, [pc, #276]	@ (80012f0 <get_pitch+0x1ac>)
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	440a      	add	r2, r1
 80011e0:	7811      	ldrb	r1, [r2, #0]
 80011e2:	4a4a      	ldr	r2, [pc, #296]	@ (800130c <get_pitch+0x1c8>)
 80011e4:	54d1      	strb	r1, [r2, r3]
            break;
 80011e6:	bf00      	nop
         }
         }
      }
      if(IMUarray[i] == '\r'){
 80011e8:	4a41      	ldr	r2, [pc, #260]	@ (80012f0 <get_pitch+0x1ac>)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b0d      	cmp	r3, #13
 80011f2:	d104      	bne.n	80011fe <get_pitch+0xba>
         cnt3 = i + 1;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a45      	ldr	r2, [pc, #276]	@ (8001310 <get_pitch+0x1cc>)
 80011fa:	6013      	str	r3, [r2, #0]
         break;
 80011fc:	e005      	b.n	800120a <get_pitch+0xc6>
   for(int i = 1; i < 31; i++){
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3301      	adds	r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b1e      	cmp	r3, #30
 8001208:	dda7      	ble.n	800115a <get_pitch+0x16>
      }
   }
   for (int j = cnt1 - 2; j < 7; j++){
 800120a:	4b3c      	ldr	r3, [pc, #240]	@ (80012fc <get_pitch+0x1b8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3b02      	subs	r3, #2
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	e007      	b.n	8001224 <get_pitch+0xe0>
      alpha[j] = '0';
 8001214:	4a3b      	ldr	r2, [pc, #236]	@ (8001304 <get_pitch+0x1c0>)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	4413      	add	r3, r2
 800121a:	2230      	movs	r2, #48	@ 0x30
 800121c:	701a      	strb	r2, [r3, #0]
   for (int j = cnt1 - 2; j < 7; j++){
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	3301      	adds	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b06      	cmp	r3, #6
 8001228:	ddf4      	ble.n	8001214 <get_pitch+0xd0>
   }
   for (int k = cnt2 - (cnt1); k < 8; k++){
 800122a:	4b35      	ldr	r3, [pc, #212]	@ (8001300 <get_pitch+0x1bc>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b33      	ldr	r3, [pc, #204]	@ (80012fc <get_pitch+0x1b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	e007      	b.n	8001248 <get_pitch+0x104>
      beta[k - 1] = '0';
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a32      	ldr	r2, [pc, #200]	@ (8001308 <get_pitch+0x1c4>)
 800123e:	2130      	movs	r1, #48	@ 0x30
 8001240:	54d1      	strb	r1, [r2, r3]
   for (int k = cnt2 - (cnt1); k < 8; k++){
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3301      	adds	r3, #1
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b07      	cmp	r3, #7
 800124c:	ddf4      	ble.n	8001238 <get_pitch+0xf4>
   }
   for (int l = cnt3 - (cnt2); l < 8; l++){
 800124e:	4b30      	ldr	r3, [pc, #192]	@ (8001310 <get_pitch+0x1cc>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <get_pitch+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	e007      	b.n	800126c <get_pitch+0x128>
      gamm[l - 1] = '0';
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3b01      	subs	r3, #1
 8001260:	4a2a      	ldr	r2, [pc, #168]	@ (800130c <get_pitch+0x1c8>)
 8001262:	2130      	movs	r1, #48	@ 0x30
 8001264:	54d1      	strb	r1, [r2, r3]
   for (int l = cnt3 - (cnt2); l < 8; l++){
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b07      	cmp	r3, #7
 8001270:	ddf4      	ble.n	800125c <get_pitch+0x118>
   }
   cnt0 = 0;
 8001272:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <get_pitch+0x1b4>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

   roll_tp = strtod(alpha, &pos);
 8001278:	4926      	ldr	r1, [pc, #152]	@ (8001314 <get_pitch+0x1d0>)
 800127a:	4822      	ldr	r0, [pc, #136]	@ (8001304 <get_pitch+0x1c0>)
 800127c:	f008 fea0 	bl	8009fc0 <strtod>
 8001280:	eeb0 7a40 	vmov.f32	s14, s0
 8001284:	eef0 7a60 	vmov.f32	s15, s1
 8001288:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <get_pitch+0x1d4>)
 800128a:	ed83 7b00 	vstr	d7, [r3]
   pitch_tp = strtod(beta, &pos);
 800128e:	4921      	ldr	r1, [pc, #132]	@ (8001314 <get_pitch+0x1d0>)
 8001290:	481d      	ldr	r0, [pc, #116]	@ (8001308 <get_pitch+0x1c4>)
 8001292:	f008 fe95 	bl	8009fc0 <strtod>
 8001296:	eeb0 7a40 	vmov.f32	s14, s0
 800129a:	eef0 7a60 	vmov.f32	s15, s1
 800129e:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <get_pitch+0x1d8>)
 80012a0:	ed83 7b00 	vstr	d7, [r3]
   yaw_tp = strtod(gamm, &pos);
 80012a4:	491b      	ldr	r1, [pc, #108]	@ (8001314 <get_pitch+0x1d0>)
 80012a6:	4819      	ldr	r0, [pc, #100]	@ (800130c <get_pitch+0x1c8>)
 80012a8:	f008 fe8a 	bl	8009fc0 <strtod>
 80012ac:	eeb0 7a40 	vmov.f32	s14, s0
 80012b0:	eef0 7a60 	vmov.f32	s15, s1
 80012b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <get_pitch+0x1dc>)
 80012b6:	ed83 7b00 	vstr	d7, [r3]

   cnt4 += 1;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <get_pitch+0x1e0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a18      	ldr	r2, [pc, #96]	@ (8001324 <get_pitch+0x1e0>)
 80012c2:	6013      	str	r3, [r2, #0]
   pitch = roll_tp;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <get_pitch+0x1d4>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	4917      	ldr	r1, [pc, #92]	@ (8001328 <get_pitch+0x1e4>)
 80012cc:	e9c1 2300 	strd	r2, r3, [r1]
   roll = pitch_tp;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <get_pitch+0x1d8>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	4915      	ldr	r1, [pc, #84]	@ (800132c <get_pitch+0x1e8>)
 80012d8:	e9c1 2300 	strd	r2, r3, [r1]
   yaw = yaw_tp;
 80012dc:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <get_pitch+0x1dc>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	4913      	ldr	r1, [pc, #76]	@ (8001330 <get_pitch+0x1ec>)
 80012e4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200002e4 	.word	0x200002e4
 80012f4:	200003d8 	.word	0x200003d8
 80012f8:	20000338 	.word	0x20000338
 80012fc:	2000033c 	.word	0x2000033c
 8001300:	20000340 	.word	0x20000340
 8001304:	2000034c 	.word	0x2000034c
 8001308:	20000358 	.word	0x20000358
 800130c:	20000364 	.word	0x20000364
 8001310:	20000344 	.word	0x20000344
 8001314:	20000304 	.word	0x20000304
 8001318:	20000320 	.word	0x20000320
 800131c:	20000328 	.word	0x20000328
 8001320:	20000330 	.word	0x20000330
 8001324:	20000348 	.word	0x20000348
 8001328:	20000310 	.word	0x20000310
 800132c:	20000308 	.word	0x20000308
 8001330:	20000318 	.word	0x20000318

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <Error_Handler+0x8>

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	4a0f      	ldr	r2, [pc, #60]	@ (800138c <HAL_MspInit+0x4c>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001354:	6453      	str	r3, [r2, #68]	@ 0x44
 8001356:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	4a08      	ldr	r2, [pc, #32]	@ (800138c <HAL_MspInit+0x4c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	@ 0x40
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <HAL_TIM_Base_MspInit+0x3c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10d      	bne.n	80013be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_TIM_Base_MspInit+0x40>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	4a09      	ldr	r2, [pc, #36]	@ (80013d0 <HAL_TIM_Base_MspInit+0x40>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <HAL_TIM_Base_MspInit+0x40>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40014000 	.word	0x40014000
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	@ (8001458 <HAL_UART_MspInit+0x84>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12c      	bne.n	8001450 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_UART_MspInit+0x88>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a17      	ldr	r2, [pc, #92]	@ (800145c <HAL_UART_MspInit+0x88>)
 8001400:	f043 0310 	orr.w	r3, r3, #16
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_UART_MspInit+0x88>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_UART_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a10      	ldr	r2, [pc, #64]	@ (800145c <HAL_UART_MspInit+0x88>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <HAL_UART_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800142e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001440:	2307      	movs	r3, #7
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <HAL_UART_MspInit+0x8c>)
 800144c:	f000 fc10 	bl	8001c70 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	@ 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40011000 	.word	0x40011000
 800145c:	40023800 	.word	0x40023800
 8001460:	40020000 	.word	0x40020000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <NMI_Handler+0x4>

0800146c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <MemManage_Handler+0x4>

0800147c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <UsageFault_Handler+0x4>

0800148c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ba:	f000 f96b 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <USART1_IRQHandler+0x10>)
 80014ca:	f002 feb1 	bl	8004230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200003d8 	.word	0x200003d8

080014d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <OTG_FS_IRQHandler+0x10>)
 80014de:	f000 fe8f 	bl	8002200 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20001908 	.word	0x20001908

080014ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return 1;
 80014f0:	2301      	movs	r3, #1
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_kill>:

int _kill(int pid, int sig)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001506:	f008 fecd 	bl	800a2a4 <__errno>
 800150a:	4603      	mov	r3, r0
 800150c:	2216      	movs	r2, #22
 800150e:	601a      	str	r2, [r3, #0]
  return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_exit>:

void _exit (int status)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001524:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ffe7 	bl	80014fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800152e:	bf00      	nop
 8001530:	e7fd      	b.n	800152e <_exit+0x12>

08001532 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e00a      	b.n	800155a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001544:	f3af 8000 	nop.w
 8001548:	4601      	mov	r1, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	60ba      	str	r2, [r7, #8]
 8001550:	b2ca      	uxtb	r2, r1
 8001552:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbf0      	blt.n	8001544 <_read+0x12>
  }

  return len;
 8001562:	687b      	ldr	r3, [r7, #4]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e009      	b.n	8001592 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	60ba      	str	r2, [r7, #8]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	dbf1      	blt.n	800157e <_write+0x12>
  }
  return len;
 800159a:	687b      	ldr	r3, [r7, #4]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_close>:

int _close(int file)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015cc:	605a      	str	r2, [r3, #4]
  return 0;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_isatty>:

int _isatty(int file)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f008 fe32 	bl	800a2a4 <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	@ (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20018000 	.word	0x20018000
 800166c:	00000400 	.word	0x00000400
 8001670:	20000420 	.word	0x20000420
 8001674:	20002158 	.word	0x20002158

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	@ (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016a0:	f7ff ffea 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a4:	480c      	ldr	r0, [pc, #48]	@ (80016d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016a6:	490d      	ldr	r1, [pc, #52]	@ (80016dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016bc:	4c0a      	ldr	r4, [pc, #40]	@ (80016e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f008 fdf1 	bl	800a2b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff fbfb 	bl	8000ec8 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80016e0:	0800c3f0 	.word	0x0800c3f0
  ldr r2, =_sbss
 80016e4:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80016e8:	20002158 	.word	0x20002158

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	@ (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f94f 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	200f      	movs	r0, #15
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fe0c 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f967 	bl	8001a26 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001770:	f000 f92f 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	@ (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	20000008 	.word	0x20000008
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000424 	.word	0x20000424

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000424 	.word	0x20000424

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	@ (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	@ (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	@ (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	@ 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff29 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff3e 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff31 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffa2 	bl	8001978 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a54:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_DMA_Start_IT+0x26>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e040      	b.n	8001ae6 <HAL_DMA_Start_IT+0xa8>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d12f      	bne.n	8001ad8 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f8c0 	bl	8001c12 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a96:	223f      	movs	r2, #63	@ 0x3f
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0216 	orr.w	r2, r2, #22
 8001aac:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0208 	orr.w	r2, r2, #8
 8001ac4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e005      	b.n	8001ae4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff fe5e 	bl	80017bc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d008      	beq.n	8001b20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e052      	b.n	8001bc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0216 	bic.w	r2, r2, #22
 8001b2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d103      	bne.n	8001b50 <HAL_DMA_Abort+0x62>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0208 	bic.w	r2, r2, #8
 8001b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b70:	e013      	b.n	8001b9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b72:	f7ff fe23 	bl	80017bc <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d90c      	bls.n	8001b9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e015      	b.n	8001bc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1e4      	bne.n	8001b72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bac:	223f      	movs	r2, #63	@ 0x3f
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d004      	beq.n	8001bec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e00c      	b.n	8001c06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2205      	movs	r2, #5
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b40      	cmp	r3, #64	@ 0x40
 8001c3e:	d108      	bne.n	8001c52 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c50:	e007      	b.n	8001c62 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	60da      	str	r2, [r3, #12]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e159      	b.n	8001f40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	f040 8148 	bne.w	8001f3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d005      	beq.n	8001cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d130      	bne.n	8001d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 0201 	and.w	r2, r3, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d017      	beq.n	8001d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d123      	bne.n	8001db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3208      	adds	r2, #8
 8001d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a2 	beq.w	8001f3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b57      	ldr	r3, [pc, #348]	@ (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4a56      	ldr	r2, [pc, #344]	@ (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e06:	4b54      	ldr	r3, [pc, #336]	@ (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e12:	4a52      	ldr	r2, [pc, #328]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a49      	ldr	r2, [pc, #292]	@ (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x202>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a48      	ldr	r2, [pc, #288]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x1fe>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a47      	ldr	r2, [pc, #284]	@ (8001f68 <HAL_GPIO_Init+0x2f8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x1fa>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a46      	ldr	r2, [pc, #280]	@ (8001f6c <HAL_GPIO_Init+0x2fc>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x1f6>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a45      	ldr	r2, [pc, #276]	@ (8001f70 <HAL_GPIO_Init+0x300>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x1f2>
 8001e5e:	2304      	movs	r3, #4
 8001e60:	e008      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e62:	2307      	movs	r3, #7
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e66:	2303      	movs	r3, #3
 8001e68:	e004      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e72:	2300      	movs	r3, #0
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f002 0203 	and.w	r2, r2, #3
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	4093      	lsls	r3, r2
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e84:	4935      	ldr	r1, [pc, #212]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e92:	4b38      	ldr	r3, [pc, #224]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee0:	4a24      	ldr	r2, [pc, #144]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ee6:	4b23      	ldr	r3, [pc, #140]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f10:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f34:	4a0f      	ldr	r2, [pc, #60]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	f67f aea2 	bls.w	8001c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	@ 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40013800 	.word	0x40013800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	40020c00 	.word	0x40020c00
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40013c00 	.word	0x40013c00

08001f78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e101      	b.n	800218e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d106      	bne.n	8001faa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f006 fefb 	bl	8008da0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fb8:	d102      	bne.n	8001fc0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 fae2 	bl	800558e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7c1a      	ldrb	r2, [r3, #16]
 8001fd2:	f88d 2000 	strb.w	r2, [sp]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fda:	f003 f9c1 	bl	8005360 <USB_CoreInit>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0ce      	b.n	800218e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 fada 	bl	80055b0 <USB_SetCurrentMode>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e0bf      	b.n	800218e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	e04a      	b.n	80020aa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3315      	adds	r3, #21
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3314      	adds	r3, #20
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	b298      	uxth	r0, r3
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	332e      	adds	r3, #46	@ 0x2e
 8002050:	4602      	mov	r2, r0
 8002052:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	3318      	adds	r3, #24
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	331c      	adds	r3, #28
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3320      	adds	r3, #32
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	3324      	adds	r3, #36	@ 0x24
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	3301      	adds	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	791b      	ldrb	r3, [r3, #4]
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3af      	bcc.n	8002014 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e044      	b.n	8002144 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	3301      	adds	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	791b      	ldrb	r3, [r3, #4]
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	429a      	cmp	r2, r3
 800214c:	d3b5      	bcc.n	80020ba <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7c1a      	ldrb	r2, [r3, #16]
 8002156:	f88d 2000 	strb.w	r2, [sp]
 800215a:	3304      	adds	r3, #4
 800215c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800215e:	f003 fa73 	bl	8005648 <USB_DevInit>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e00c      	b.n	800218e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fabd 	bl	8006706 <USB_DevDisconnect>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_PCD_Start+0x1c>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e022      	b.n	80021f8 <HAL_PCD_Start+0x62>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 f9c4 	bl	800556c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 fa6b 	bl	80066c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b08d      	sub	sp, #52	@ 0x34
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f004 fb29 	bl	800686e <USB_GetMode>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 848c 	bne.w	8002b3c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f004 fa8d 	bl	8006748 <USB_ReadInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 8482 	beq.w	8002b3a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f004 fa7a 	bl	8006748 <USB_ReadInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b02      	cmp	r3, #2
 800225c:	d107      	bne.n	800226e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f002 0202 	and.w	r2, r2, #2
 800226c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f004 fa68 	bl	8006748 <USB_ReadInterrupts>
 8002278:	4603      	mov	r3, r0
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b10      	cmp	r3, #16
 8002280:	d161      	bne.n	8002346 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0210 	bic.w	r2, r2, #16
 8002290:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f003 020f 	and.w	r2, r3, #15
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	3304      	adds	r3, #4
 80022b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	0c5b      	lsrs	r3, r3, #17
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d124      	bne.n	8002308 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d035      	beq.n	8002336 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	6a38      	ldr	r0, [r7, #32]
 80022de:	f004 f89f 	bl	8006420 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ee:	441a      	add	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002300:	441a      	add	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	615a      	str	r2, [r3, #20]
 8002306:	e016      	b.n	8002336 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	0c5b      	lsrs	r3, r3, #17
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	2b06      	cmp	r3, #6
 8002312:	d110      	bne.n	8002336 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800231a:	2208      	movs	r2, #8
 800231c:	4619      	mov	r1, r3
 800231e:	6a38      	ldr	r0, [r7, #32]
 8002320:	f004 f87e 	bl	8006420 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002330:	441a      	add	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699a      	ldr	r2, [r3, #24]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0210 	orr.w	r2, r2, #16
 8002344:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f004 f9fc 	bl	8006748 <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002356:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800235a:	f040 80a7 	bne.w	80024ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f004 fa01 	bl	800676e <USB_ReadDevAllOutEpInterrupt>
 800236c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800236e:	e099      	b.n	80024a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 808e 	beq.w	8002498 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f004 fa25 	bl	80067d6 <USB_ReadDevOutEPInterrupt>
 800238c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00c      	beq.n	80023b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a4:	461a      	mov	r2, r3
 80023a6:	2301      	movs	r3, #1
 80023a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fea3 	bl	80030f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00c      	beq.n	80023d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c8:	461a      	mov	r2, r3
 80023ca:	2308      	movs	r3, #8
 80023cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 ff79 	bl	80032c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ec:	461a      	mov	r2, r3
 80023ee:	2310      	movs	r3, #16
 80023f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d030      	beq.n	800245e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002404:	2b80      	cmp	r3, #128	@ 0x80
 8002406:	d109      	bne.n	800241c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800241a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800241c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	3304      	adds	r3, #4
 8002430:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	78db      	ldrb	r3, [r3, #3]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d108      	bne.n	800244c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2200      	movs	r2, #0
 800243e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	b2db      	uxtb	r3, r3
 8002444:	4619      	mov	r1, r3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f006 fda8 	bl	8008f9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002458:	461a      	mov	r2, r3
 800245a:	2302      	movs	r3, #2
 800245c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002474:	461a      	mov	r2, r3
 8002476:	2320      	movs	r3, #32
 8002478:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002490:	461a      	mov	r2, r3
 8002492:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002496:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	3301      	adds	r3, #1
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800249e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f47f af62 	bne.w	8002370 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f004 f949 	bl	8006748 <USB_ReadInterrupts>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024c0:	f040 80db 	bne.w	800267a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f004 f96a 	bl	80067a2 <USB_ReadDevAllInEpInterrupt>
 80024ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80024d4:	e0cd      	b.n	8002672 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80c2 	beq.w	8002666 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f004 f990 	bl	8006812 <USB_ReadDevInEPInterrupt>
 80024f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d057      	beq.n	80025ae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	2201      	movs	r2, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43db      	mvns	r3, r3
 8002518:	69f9      	ldr	r1, [r7, #28]
 800251a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800251e:	4013      	ands	r3, r2
 8002520:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800252e:	461a      	mov	r2, r3
 8002530:	2301      	movs	r3, #1
 8002532:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	799b      	ldrb	r3, [r3, #6]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d132      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3320      	adds	r3, #32
 800254c:	6819      	ldr	r1, [r3, #0]
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4403      	add	r3, r0
 800255c:	331c      	adds	r3, #28
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4419      	add	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4403      	add	r3, r0
 8002570:	3320      	adds	r3, #32
 8002572:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	2b00      	cmp	r3, #0
 8002578:	d113      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x3a2>
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	3324      	adds	r3, #36	@ 0x24
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d108      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800259a:	461a      	mov	r2, r3
 800259c:	2101      	movs	r1, #1
 800259e:	f004 f997 	bl	80068d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f006 fc72 	bl	8008e92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025c4:	461a      	mov	r2, r3
 80025c6:	2308      	movs	r3, #8
 80025c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025e0:	461a      	mov	r2, r3
 80025e2:	2310      	movs	r3, #16
 80025e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025fc:	461a      	mov	r2, r3
 80025fe:	2340      	movs	r3, #64	@ 0x40
 8002600:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d023      	beq.n	8002654 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800260c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800260e:	6a38      	ldr	r0, [r7, #32]
 8002610:	f003 f97e 	bl	8005910 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	3310      	adds	r3, #16
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	3304      	adds	r3, #4
 8002626:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	78db      	ldrb	r3, [r3, #3]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d108      	bne.n	8002642 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2200      	movs	r2, #0
 8002634:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4619      	mov	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f006 fcbf 	bl	8008fc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800264e:	461a      	mov	r2, r3
 8002650:	2302      	movs	r3, #2
 8002652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800265e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fcbd 	bl	8002fe0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	3301      	adds	r3, #1
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	f47f af2e 	bne.w	80024d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f004 f862 	bl	8006748 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800268a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800268e:	d122      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d108      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026b6:	2100      	movs	r1, #0
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fea3 	bl	8003404 <HAL_PCDEx_LPM_Callback>
 80026be:	e002      	b.n	80026c6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f006 fc5d 	bl	8008f80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80026d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 f834 	bl	8006748 <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026ea:	d112      	bne.n	8002712 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d102      	bne.n	8002702 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f006 fc19 	bl	8008f34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002710:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f004 f816 	bl	8006748 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002726:	f040 80b7 	bne.w	8002898 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2110      	movs	r1, #16
 8002744:	4618      	mov	r0, r3
 8002746:	f003 f8e3 	bl	8005910 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800274e:	e046      	b.n	80027de <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800275c:	461a      	mov	r2, r3
 800275e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002762:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	440a      	add	r2, r1
 800277a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800277e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002782:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002790:	461a      	mov	r2, r3
 8002792:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002796:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027a8:	0151      	lsls	r1, r2, #5
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	440a      	add	r2, r1
 80027ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027c8:	0151      	lsls	r1, r2, #5
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	440a      	add	r2, r1
 80027ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80027d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027da:	3301      	adds	r3, #1
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	791b      	ldrb	r3, [r3, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d3b2      	bcc.n	8002750 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027f8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80027fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	7bdb      	ldrb	r3, [r3, #15]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800280c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002816:	f043 030b 	orr.w	r3, r3, #11
 800281a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800282c:	f043 030b 	orr.w	r3, r3, #11
 8002830:	6453      	str	r3, [r2, #68]	@ 0x44
 8002832:	e015      	b.n	8002860 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002842:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002846:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800284a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800285a:	f043 030b 	orr.w	r3, r3, #11
 800285e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800286e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002872:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002882:	461a      	mov	r2, r3
 8002884:	f004 f824 	bl	80068d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f003 ff53 	bl	8006748 <USB_ReadInterrupts>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028ac:	d123      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 ffe9 	bl	800688a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 f8a0 	bl	8005a02 <USB_GetDevSpeed>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681c      	ldr	r4, [r3, #0]
 80028ce:	f001 f9c9 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 80028d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028d8:	461a      	mov	r2, r3
 80028da:	4620      	mov	r0, r4
 80028dc:	f002 fda4 	bl	8005428 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f006 fafe 	bl	8008ee2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80028f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 ff24 	bl	8006748 <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d10a      	bne.n	8002920 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f006 fadb 	bl	8008ec6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f002 0208 	and.w	r2, r2, #8
 800291e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 ff0f 	bl	8006748 <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002930:	2b80      	cmp	r3, #128	@ 0x80
 8002932:	d123      	bne.n	800297c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002940:	2301      	movs	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
 8002944:	e014      	b.n	8002970 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d105      	bne.n	800296a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	b2db      	uxtb	r3, r3
 8002962:	4619      	mov	r1, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fb0a 	bl	8002f7e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	3301      	adds	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	791b      	ldrb	r3, [r3, #4]
 8002974:	461a      	mov	r2, r3
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	4293      	cmp	r3, r2
 800297a:	d3e4      	bcc.n	8002946 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f003 fee1 	bl	8006748 <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800298c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002990:	d13c      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002992:	2301      	movs	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
 8002996:	e02b      	b.n	80029f0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3318      	adds	r3, #24
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d115      	bne.n	80029ea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	da12      	bge.n	80029ea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3317      	adds	r3, #23
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 faca 	bl	8002f7e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	3301      	adds	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	791b      	ldrb	r3, [r3, #4]
 80029f4:	461a      	mov	r2, r3
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d3cd      	bcc.n	8002998 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 fe99 	bl	8006748 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a20:	d156      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a22:	2301      	movs	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a26:	e045      	b.n	8002ab4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d12e      	bne.n	8002aae <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da2b      	bge.n	8002aae <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002a62:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d121      	bne.n	8002aae <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aaa:	6053      	str	r3, [r2, #4]
            break;
 8002aac:	e008      	b.n	8002ac0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	791b      	ldrb	r3, [r3, #4]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d3b3      	bcc.n	8002a28 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fe37 	bl	8006748 <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae4:	d10a      	bne.n	8002afc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f006 fa7c 	bl	8008fe4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 fe21 	bl	8006748 <USB_ReadInterrupts>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d115      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f006 fa6c 	bl	8009000 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6859      	ldr	r1, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	e000      	b.n	8002b3c <HAL_PCD_IRQHandler+0x93c>
      return;
 8002b3a:	bf00      	nop
    }
  }
}
 8002b3c:	3734      	adds	r7, #52	@ 0x34
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}

08002b42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_PCD_SetAddress+0x1a>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e012      	b.n	8002b82 <HAL_PCD_SetAddress+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 fd80 	bl	8006678 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	4608      	mov	r0, r1
 8002b94:	4611      	mov	r1, r2
 8002b96:	461a      	mov	r2, r3
 8002b98:	4603      	mov	r3, r0
 8002b9a:	70fb      	strb	r3, [r7, #3]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	803b      	strh	r3, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	da0f      	bge.n	8002bd0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	f003 020f 	and.w	r2, r3, #15
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	3310      	adds	r3, #16
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	705a      	strb	r2, [r3, #1]
 8002bce:	e00f      	b.n	8002bf0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 020f 	and.w	r2, r3, #15
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	3304      	adds	r3, #4
 8002be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002bfc:	883b      	ldrh	r3, [r7, #0]
 8002bfe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	78ba      	ldrb	r2, [r7, #2]
 8002c0a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	785b      	ldrb	r3, [r3, #1]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c1e:	78bb      	ldrb	r3, [r7, #2]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d102      	bne.n	8002c2a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_PCD_EP_Open+0xae>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e00e      	b.n	8002c56 <HAL_PCD_EP_Open+0xcc>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68f9      	ldr	r1, [r7, #12]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 ff00 	bl	8005a4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002c54:	7afb      	ldrb	r3, [r7, #11]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	da0f      	bge.n	8002c92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3310      	adds	r3, #16
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	3304      	adds	r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	705a      	strb	r2, [r3, #1]
 8002c90:	e00f      	b.n	8002cb2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 020f 	and.w	r2, r3, #15
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_PCD_EP_Close+0x6e>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e00e      	b.n	8002cea <HAL_PCD_EP_Close+0x8c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68f9      	ldr	r1, [r7, #12]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 ff3e 	bl	8005b5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4413      	add	r3, r2
 8002d18:	3304      	adds	r3, #4
 8002d1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d34:	7afb      	ldrb	r3, [r7, #11]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	799b      	ldrb	r3, [r3, #6]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	799b      	ldrb	r3, [r3, #6]
 8002d56:	461a      	mov	r2, r3
 8002d58:	6979      	ldr	r1, [r7, #20]
 8002d5a:	f002 ffdb 	bl	8005d14 <USB_EPStartXfer>

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 020f 	and.w	r2, r3, #15
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	460b      	mov	r3, r1
 8002da6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da8:	7afb      	ldrb	r3, [r7, #11]
 8002daa:	f003 020f 	and.w	r2, r3, #15
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	3310      	adds	r3, #16
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd8:	7afb      	ldrb	r3, [r7, #11]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	799b      	ldrb	r3, [r3, #6]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	799b      	ldrb	r3, [r3, #6]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	f002 ff89 	bl	8005d14 <USB_EPStartXfer>

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	7912      	ldrb	r2, [r2, #4]
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e04f      	b.n	8002eca <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	da0f      	bge.n	8002e52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	3310      	adds	r3, #16
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	705a      	strb	r2, [r3, #1]
 8002e50:	e00d      	b.n	8002e6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	3304      	adds	r3, #4
 8002e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_PCD_EP_SetStall+0x82>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e01d      	b.n	8002eca <HAL_PCD_EP_SetStall+0xbe>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68f9      	ldr	r1, [r7, #12]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fb17 	bl	80064d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7999      	ldrb	r1, [r3, #6]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f003 fd08 	bl	80068d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	7912      	ldrb	r2, [r2, #4]
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e042      	b.n	8002f76 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	da0f      	bge.n	8002f18 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 020f 	and.w	r2, r3, #15
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	3310      	adds	r3, #16
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	705a      	strb	r2, [r3, #1]
 8002f16:	e00f      	b.n	8002f38 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	f003 020f 	and.w	r2, r3, #15
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_PCD_EP_ClrStall+0x86>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e00e      	b.n	8002f76 <HAL_PCD_EP_ClrStall+0xa4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68f9      	ldr	r1, [r7, #12]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 fb20 	bl	80065ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	da0c      	bge.n	8002fac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	3310      	adds	r3, #16
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e00c      	b.n	8002fc6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 020f 	and.w	r2, r3, #15
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 f93f 	bl	8006250 <USB_EPStopXfer>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	@ 0x28
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	3310      	adds	r3, #16
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	3304      	adds	r3, #4
 8003006:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	429a      	cmp	r2, r3
 8003012:	d901      	bls.n	8003018 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e06b      	b.n	80030f0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	429a      	cmp	r2, r3
 800302c:	d902      	bls.n	8003034 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	3303      	adds	r3, #3
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800303c:	e02a      	b.n	8003094 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	429a      	cmp	r2, r3
 8003052:	d902      	bls.n	800305a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3303      	adds	r3, #3
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	68d9      	ldr	r1, [r3, #12]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4603      	mov	r3, r0
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f003 f994 	bl	80063a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	441a      	add	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	441a      	add	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d809      	bhi.n	80030be <PCD_WriteEmptyTxFifo+0xde>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d203      	bcs.n	80030be <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1bf      	bne.n	800303e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d811      	bhi.n	80030ee <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	2201      	movs	r2, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	6939      	ldr	r1, [r7, #16]
 80030e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030ea:	4013      	ands	r3, r2
 80030ec:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	333c      	adds	r3, #60	@ 0x3c
 8003110:	3304      	adds	r3, #4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	799b      	ldrb	r3, [r3, #6]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d17b      	bne.n	8003226 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d015      	beq.n	8003164 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	4a61      	ldr	r2, [pc, #388]	@ (80032c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	f240 80b9 	bls.w	80032b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80b3 	beq.w	80032b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800315a:	461a      	mov	r2, r3
 800315c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003160:	6093      	str	r3, [r2, #8]
 8003162:	e0a7      	b.n	80032b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800317a:	461a      	mov	r2, r3
 800317c:	2320      	movs	r3, #32
 800317e:	6093      	str	r3, [r2, #8]
 8003180:	e098      	b.n	80032b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	f040 8093 	bne.w	80032b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	4a4b      	ldr	r2, [pc, #300]	@ (80032c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d90f      	bls.n	80031b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ac:	461a      	mov	r2, r3
 80031ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b2:	6093      	str	r3, [r2, #8]
 80031b4:	e07e      	b.n	80032b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	3304      	adds	r3, #4
 80031ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1a      	ldr	r2, [r3, #32]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	0159      	lsls	r1, r3, #5
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	440b      	add	r3, r1
 80031d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e2:	1ad2      	subs	r2, r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d114      	bne.n	8003218 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003200:	461a      	mov	r2, r3
 8003202:	2101      	movs	r1, #1
 8003204:	f003 fb64 	bl	80068d0 <USB_EP0_OutStart>
 8003208:	e006      	b.n	8003218 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	441a      	add	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	4619      	mov	r1, r3
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f005 fe1c 	bl	8008e5c <HAL_PCD_DataOutStageCallback>
 8003224:	e046      	b.n	80032b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4a26      	ldr	r2, [pc, #152]	@ (80032c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d124      	bne.n	8003278 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003244:	461a      	mov	r2, r3
 8003246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800324a:	6093      	str	r3, [r2, #8]
 800324c:	e032      	b.n	80032b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003264:	461a      	mov	r2, r3
 8003266:	2320      	movs	r3, #32
 8003268:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f005 fdf3 	bl	8008e5c <HAL_PCD_DataOutStageCallback>
 8003276:	e01d      	b.n	80032b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d114      	bne.n	80032a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d108      	bne.n	80032a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032a0:	461a      	mov	r2, r3
 80032a2:	2100      	movs	r1, #0
 80032a4:	f003 fb14 	bl	80068d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	4619      	mov	r1, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f005 fdd4 	bl	8008e5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	4f54300a 	.word	0x4f54300a
 80032c4:	4f54310a 	.word	0x4f54310a

080032c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	333c      	adds	r3, #60	@ 0x3c
 80032e0:	3304      	adds	r3, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <PCD_EP_OutSetupPacket_int+0x88>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d90e      	bls.n	800331c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003314:	461a      	mov	r2, r3
 8003316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800331a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f005 fd8b 	bl	8008e38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <PCD_EP_OutSetupPacket_int+0x88>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d90c      	bls.n	8003344 <PCD_EP_OutSetupPacket_int+0x7c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	799b      	ldrb	r3, [r3, #6]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d108      	bne.n	8003344 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800333c:	461a      	mov	r2, r3
 800333e:	2101      	movs	r1, #1
 8003340:	f003 fac6 	bl	80068d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	4f54300a 	.word	0x4f54300a

08003354 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	70fb      	strb	r3, [r7, #3]
 8003360:	4613      	mov	r3, r2
 8003362:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d107      	bne.n	8003382 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003372:	883b      	ldrh	r3, [r7, #0]
 8003374:	0419      	lsls	r1, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	430a      	orrs	r2, r1
 800337e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003380:	e028      	b.n	80033d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	4413      	add	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e00d      	b.n	80033b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	3340      	adds	r3, #64	@ 0x40
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4413      	add	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	3301      	adds	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d3ec      	bcc.n	8003396 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033bc:	883b      	ldrh	r3, [r7, #0]
 80033be:	0418      	lsls	r0, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	4302      	orrs	r2, r0
 80033cc:	3340      	adds	r3, #64	@ 0x40
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	460b      	mov	r3, r1
 80033ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e267      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d075      	beq.n	8003526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800343a:	4b88      	ldr	r3, [pc, #544]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b04      	cmp	r3, #4
 8003444:	d00c      	beq.n	8003460 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003446:	4b85      	ldr	r3, [pc, #532]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800344e:	2b08      	cmp	r3, #8
 8003450:	d112      	bne.n	8003478 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003452:	4b82      	ldr	r3, [pc, #520]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800345e:	d10b      	bne.n	8003478 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	4b7e      	ldr	r3, [pc, #504]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d05b      	beq.n	8003524 <HAL_RCC_OscConfig+0x108>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d157      	bne.n	8003524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e242      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003480:	d106      	bne.n	8003490 <HAL_RCC_OscConfig+0x74>
 8003482:	4b76      	ldr	r3, [pc, #472]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a75      	ldr	r2, [pc, #468]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e01d      	b.n	80034cc <HAL_RCC_OscConfig+0xb0>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x98>
 800349a:	4b70      	ldr	r3, [pc, #448]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6f      	ldr	r2, [pc, #444]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80034a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b6d      	ldr	r3, [pc, #436]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6c      	ldr	r2, [pc, #432]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e00b      	b.n	80034cc <HAL_RCC_OscConfig+0xb0>
 80034b4:	4b69      	ldr	r3, [pc, #420]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a68      	ldr	r2, [pc, #416]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b66      	ldr	r3, [pc, #408]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a65      	ldr	r2, [pc, #404]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80034c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d013      	beq.n	80034fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe f972 	bl	80017bc <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe f96e 	bl	80017bc <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e207      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	4b5b      	ldr	r3, [pc, #364]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0xc0>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe f95e 	bl	80017bc <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003504:	f7fe f95a 	bl	80017bc <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	@ 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e1f3      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	4b51      	ldr	r3, [pc, #324]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0xe8>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d063      	beq.n	80035fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003532:	4b4a      	ldr	r3, [pc, #296]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353e:	4b47      	ldr	r3, [pc, #284]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003546:	2b08      	cmp	r3, #8
 8003548:	d11c      	bne.n	8003584 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354a:	4b44      	ldr	r3, [pc, #272]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d116      	bne.n	8003584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003556:	4b41      	ldr	r3, [pc, #260]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_RCC_OscConfig+0x152>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e1c7      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4937      	ldr	r1, [pc, #220]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	e03a      	b.n	80035fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d020      	beq.n	80035ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358c:	4b34      	ldr	r3, [pc, #208]	@ (8003660 <HAL_RCC_OscConfig+0x244>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fe f913 	bl	80017bc <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359a:	f7fe f90f 	bl	80017bc <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1a8      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	4b2b      	ldr	r3, [pc, #172]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b8:	4b28      	ldr	r3, [pc, #160]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4925      	ldr	r1, [pc, #148]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]
 80035cc:	e015      	b.n	80035fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_RCC_OscConfig+0x244>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe f8f2 	bl	80017bc <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035dc:	f7fe f8ee 	bl	80017bc <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e187      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	4b1b      	ldr	r3, [pc, #108]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d036      	beq.n	8003674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d016      	beq.n	800363c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_RCC_OscConfig+0x248>)
 8003610:	2201      	movs	r2, #1
 8003612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fe f8d2 	bl	80017bc <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361c:	f7fe f8ce 	bl	80017bc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e167      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	4b0b      	ldr	r3, [pc, #44]	@ (800365c <HAL_RCC_OscConfig+0x240>)
 8003630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x200>
 800363a:	e01b      	b.n	8003674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800363c:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <HAL_RCC_OscConfig+0x248>)
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7fe f8bb 	bl	80017bc <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	e00e      	b.n	8003668 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364a:	f7fe f8b7 	bl	80017bc <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d907      	bls.n	8003668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e150      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
 800365c:	40023800 	.word	0x40023800
 8003660:	42470000 	.word	0x42470000
 8003664:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003668:	4b88      	ldr	r3, [pc, #544]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 800366a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1ea      	bne.n	800364a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8097 	beq.w	80037b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b81      	ldr	r3, [pc, #516]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	4b7d      	ldr	r3, [pc, #500]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	4a7c      	ldr	r2, [pc, #496]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a2:	4b7a      	ldr	r3, [pc, #488]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b2:	4b77      	ldr	r3, [pc, #476]	@ (8003890 <HAL_RCC_OscConfig+0x474>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d118      	bne.n	80036f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036be:	4b74      	ldr	r3, [pc, #464]	@ (8003890 <HAL_RCC_OscConfig+0x474>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a73      	ldr	r2, [pc, #460]	@ (8003890 <HAL_RCC_OscConfig+0x474>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ca:	f7fe f877 	bl	80017bc <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d2:	f7fe f873 	bl	80017bc <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e10c      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003890 <HAL_RCC_OscConfig+0x474>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x2ea>
 80036f8:	4b64      	ldr	r3, [pc, #400]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fc:	4a63      	ldr	r2, [pc, #396]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6713      	str	r3, [r2, #112]	@ 0x70
 8003704:	e01c      	b.n	8003740 <HAL_RCC_OscConfig+0x324>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b05      	cmp	r3, #5
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x30c>
 800370e:	4b5f      	ldr	r3, [pc, #380]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	4a5e      	ldr	r2, [pc, #376]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003714:	f043 0304 	orr.w	r3, r3, #4
 8003718:	6713      	str	r3, [r2, #112]	@ 0x70
 800371a:	4b5c      	ldr	r3, [pc, #368]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	4a5b      	ldr	r2, [pc, #364]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6713      	str	r3, [r2, #112]	@ 0x70
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0x324>
 8003728:	4b58      	ldr	r3, [pc, #352]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372c:	4a57      	ldr	r2, [pc, #348]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6713      	str	r3, [r2, #112]	@ 0x70
 8003734:	4b55      	ldr	r3, [pc, #340]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	4a54      	ldr	r2, [pc, #336]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 800373a:	f023 0304 	bic.w	r3, r3, #4
 800373e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d015      	beq.n	8003774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe f838 	bl	80017bc <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	e00a      	b.n	8003766 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003750:	f7fe f834 	bl	80017bc <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0cb      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003766:	4b49      	ldr	r3, [pc, #292]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0ee      	beq.n	8003750 <HAL_RCC_OscConfig+0x334>
 8003772:	e014      	b.n	800379e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003774:	f7fe f822 	bl	80017bc <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe f81e 	bl	80017bc <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0b5      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003792:	4b3e      	ldr	r3, [pc, #248]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ee      	bne.n	800377c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a4:	4b39      	ldr	r3, [pc, #228]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	4a38      	ldr	r2, [pc, #224]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 80037aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a1 	beq.w	80038fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ba:	4b34      	ldr	r3, [pc, #208]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d05c      	beq.n	8003880 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d141      	bne.n	8003852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b31      	ldr	r3, [pc, #196]	@ (8003894 <HAL_RCC_OscConfig+0x478>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fd fff2 	bl	80017bc <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fd ffee 	bl	80017bc <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e087      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	4b27      	ldr	r3, [pc, #156]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	3b01      	subs	r3, #1
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	491b      	ldr	r1, [pc, #108]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003824:	4b1b      	ldr	r3, [pc, #108]	@ (8003894 <HAL_RCC_OscConfig+0x478>)
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fd ffc7 	bl	80017bc <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003832:	f7fd ffc3 	bl	80017bc <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e05c      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003844:	4b11      	ldr	r3, [pc, #68]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x416>
 8003850:	e054      	b.n	80038fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003852:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <HAL_RCC_OscConfig+0x478>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fd ffb0 	bl	80017bc <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fd ffac 	bl	80017bc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e045      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_RCC_OscConfig+0x470>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x444>
 800387e:	e03d      	b.n	80038fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d107      	bne.n	8003898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e038      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
 800388c:	40023800 	.word	0x40023800
 8003890:	40007000 	.word	0x40007000
 8003894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003898:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <HAL_RCC_OscConfig+0x4ec>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d028      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d121      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d11a      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	3b01      	subs	r3, #1
 80038e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d107      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800

0800390c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0cc      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b68      	ldr	r3, [pc, #416]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d90c      	bls.n	8003948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b65      	ldr	r3, [pc, #404]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b63      	ldr	r3, [pc, #396]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0b8      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003960:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a58      	ldr	r2, [pc, #352]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800396a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003978:	4b53      	ldr	r3, [pc, #332]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a52      	ldr	r2, [pc, #328]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b50      	ldr	r3, [pc, #320]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	494d      	ldr	r1, [pc, #308]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d044      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d119      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e07f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ca:	4b3f      	ldr	r3, [pc, #252]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e06f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e067      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b37      	ldr	r3, [pc, #220]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4934      	ldr	r1, [pc, #208]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039fc:	f7fd fede 	bl	80017bc <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fd feda 	bl	80017bc <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e04f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b25      	ldr	r3, [pc, #148]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d20c      	bcs.n	8003a54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b22      	ldr	r3, [pc, #136]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e032      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a60:	4b19      	ldr	r3, [pc, #100]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4916      	ldr	r1, [pc, #88]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	490e      	ldr	r1, [pc, #56]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a92:	f000 f821 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003a96:	4602      	mov	r2, r0
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	490a      	ldr	r1, [pc, #40]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003aa4:	5ccb      	ldrb	r3, [r1, r3]
 8003aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aaa:	4a09      	ldr	r2, [pc, #36]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003aae:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fe3e 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023c00 	.word	0x40023c00
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	0800c010 	.word	0x0800c010
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000004 	.word	0x20000004

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003adc:	b090      	sub	sp, #64	@ 0x40
 8003ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af0:	4b59      	ldr	r3, [pc, #356]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d00d      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x40>
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	f200 80a1 	bhi.w	8003c44 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x34>
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b0a:	e09b      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b0c:	4b53      	ldr	r3, [pc, #332]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b10:	e09b      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b12:	4b53      	ldr	r3, [pc, #332]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b16:	e098      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b18:	4b4f      	ldr	r3, [pc, #316]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b22:	4b4d      	ldr	r3, [pc, #308]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d028      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	2200      	movs	r2, #0
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b40:	2100      	movs	r1, #0
 8003b42:	4b47      	ldr	r3, [pc, #284]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b44:	fb03 f201 	mul.w	r2, r3, r1
 8003b48:	2300      	movs	r3, #0
 8003b4a:	fb00 f303 	mul.w	r3, r0, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a43      	ldr	r2, [pc, #268]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b52:	fba0 1202 	umull	r1, r2, r0, r2
 8003b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b58:	460a      	mov	r2, r1
 8003b5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b5e:	4413      	add	r3, r2
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b64:	2200      	movs	r2, #0
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	61fa      	str	r2, [r7, #28]
 8003b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b72:	f7fc fffb 	bl	8000b6c <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b7e:	e053      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b80:	4b35      	ldr	r3, [pc, #212]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	2200      	movs	r2, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	617a      	str	r2, [r7, #20]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b92:	f04f 0b00 	mov.w	fp, #0
 8003b96:	4652      	mov	r2, sl
 8003b98:	465b      	mov	r3, fp
 8003b9a:	f04f 0000 	mov.w	r0, #0
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	0159      	lsls	r1, r3, #5
 8003ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba8:	0150      	lsls	r0, r2, #5
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	ebb2 080a 	subs.w	r8, r2, sl
 8003bb2:	eb63 090b 	sbc.w	r9, r3, fp
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bca:	ebb2 0408 	subs.w	r4, r2, r8
 8003bce:	eb63 0509 	sbc.w	r5, r3, r9
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	00eb      	lsls	r3, r5, #3
 8003bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be0:	00e2      	lsls	r2, r4, #3
 8003be2:	4614      	mov	r4, r2
 8003be4:	461d      	mov	r5, r3
 8003be6:	eb14 030a 	adds.w	r3, r4, sl
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	eb45 030b 	adc.w	r3, r5, fp
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bfe:	4629      	mov	r1, r5
 8003c00:	028b      	lsls	r3, r1, #10
 8003c02:	4621      	mov	r1, r4
 8003c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c08:	4621      	mov	r1, r4
 8003c0a:	028a      	lsls	r2, r1, #10
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c12:	2200      	movs	r2, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	60fa      	str	r2, [r7, #12]
 8003c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c1c:	f7fc ffa6 	bl	8000b6c <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4613      	mov	r3, r2
 8003c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c28:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	3301      	adds	r3, #1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c42:	e002      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3740      	adds	r7, #64	@ 0x40
 8003c50:	46bd      	mov	sp, r7
 8003c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	00f42400 	.word	0x00f42400
 8003c60:	017d7840 	.word	0x017d7840

08003c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c68:	4b03      	ldr	r3, [pc, #12]	@ (8003c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000000 	.word	0x20000000

08003c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c80:	f7ff fff0 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0a9b      	lsrs	r3, r3, #10
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	@ (8003ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	0800c020 	.word	0x0800c020

08003ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ca8:	f7ff ffdc 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0b5b      	lsrs	r3, r3, #13
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4903      	ldr	r1, [pc, #12]	@ (8003cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	0800c020 	.word	0x0800c020

08003ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e041      	b.n	8003d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd fb4c 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f000 f8f4 	bl	8003ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_ConfigClockSource+0x1c>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e0b4      	b.n	8003ef0 <HAL_TIM_ConfigClockSource+0x186>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003da4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dbe:	d03e      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0xd4>
 8003dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc4:	f200 8087 	bhi.w	8003ed6 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dcc:	f000 8086 	beq.w	8003edc <HAL_TIM_ConfigClockSource+0x172>
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd4:	d87f      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd6:	2b70      	cmp	r3, #112	@ 0x70
 8003dd8:	d01a      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0xa6>
 8003dda:	2b70      	cmp	r3, #112	@ 0x70
 8003ddc:	d87b      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x16c>
 8003dde:	2b60      	cmp	r3, #96	@ 0x60
 8003de0:	d050      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x11a>
 8003de2:	2b60      	cmp	r3, #96	@ 0x60
 8003de4:	d877      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x16c>
 8003de6:	2b50      	cmp	r3, #80	@ 0x50
 8003de8:	d03c      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0xfa>
 8003dea:	2b50      	cmp	r3, #80	@ 0x50
 8003dec:	d873      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x16c>
 8003dee:	2b40      	cmp	r3, #64	@ 0x40
 8003df0:	d058      	beq.n	8003ea4 <HAL_TIM_ConfigClockSource+0x13a>
 8003df2:	2b40      	cmp	r3, #64	@ 0x40
 8003df4:	d86f      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x16c>
 8003df6:	2b30      	cmp	r3, #48	@ 0x30
 8003df8:	d064      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x15a>
 8003dfa:	2b30      	cmp	r3, #48	@ 0x30
 8003dfc:	d86b      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d060      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x15a>
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d867      	bhi.n	8003ed6 <HAL_TIM_ConfigClockSource+0x16c>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d05c      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x15a>
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d05a      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x15a>
 8003e0e:	e062      	b.n	8003ed6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	f000 f970 	bl	8004104 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	609a      	str	r2, [r3, #8]
      break;
 8003e3c:	e04f      	b.n	8003ede <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e4e:	f000 f959 	bl	8004104 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e60:	609a      	str	r2, [r3, #8]
      break;
 8003e62:	e03c      	b.n	8003ede <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e70:	461a      	mov	r2, r3
 8003e72:	f000 f8cd 	bl	8004010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2150      	movs	r1, #80	@ 0x50
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 f926 	bl	80040ce <TIM_ITRx_SetConfig>
      break;
 8003e82:	e02c      	b.n	8003ede <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e90:	461a      	mov	r2, r3
 8003e92:	f000 f8ec 	bl	800406e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2160      	movs	r1, #96	@ 0x60
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f916 	bl	80040ce <TIM_ITRx_SetConfig>
      break;
 8003ea2:	e01c      	b.n	8003ede <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f000 f8ad 	bl	8004010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2140      	movs	r1, #64	@ 0x40
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f906 	bl	80040ce <TIM_ITRx_SetConfig>
      break;
 8003ec2:	e00c      	b.n	8003ede <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f000 f8fd 	bl	80040ce <TIM_ITRx_SetConfig>
      break;
 8003ed4:	e003      	b.n	8003ede <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8003eda:	e000      	b.n	8003ede <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003edc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3a      	ldr	r2, [pc, #232]	@ (8003ff4 <TIM_Base_SetConfig+0xfc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00f      	beq.n	8003f30 <TIM_Base_SetConfig+0x38>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f16:	d00b      	beq.n	8003f30 <TIM_Base_SetConfig+0x38>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a37      	ldr	r2, [pc, #220]	@ (8003ff8 <TIM_Base_SetConfig+0x100>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <TIM_Base_SetConfig+0x38>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a36      	ldr	r2, [pc, #216]	@ (8003ffc <TIM_Base_SetConfig+0x104>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_Base_SetConfig+0x38>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a35      	ldr	r2, [pc, #212]	@ (8004000 <TIM_Base_SetConfig+0x108>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d108      	bne.n	8003f42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff4 <TIM_Base_SetConfig+0xfc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01b      	beq.n	8003f82 <TIM_Base_SetConfig+0x8a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f50:	d017      	beq.n	8003f82 <TIM_Base_SetConfig+0x8a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a28      	ldr	r2, [pc, #160]	@ (8003ff8 <TIM_Base_SetConfig+0x100>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <TIM_Base_SetConfig+0x8a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a27      	ldr	r2, [pc, #156]	@ (8003ffc <TIM_Base_SetConfig+0x104>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00f      	beq.n	8003f82 <TIM_Base_SetConfig+0x8a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a26      	ldr	r2, [pc, #152]	@ (8004000 <TIM_Base_SetConfig+0x108>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00b      	beq.n	8003f82 <TIM_Base_SetConfig+0x8a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a25      	ldr	r2, [pc, #148]	@ (8004004 <TIM_Base_SetConfig+0x10c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d007      	beq.n	8003f82 <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a24      	ldr	r2, [pc, #144]	@ (8004008 <TIM_Base_SetConfig+0x110>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a23      	ldr	r2, [pc, #140]	@ (800400c <TIM_Base_SetConfig+0x114>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d108      	bne.n	8003f94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a0e      	ldr	r2, [pc, #56]	@ (8003ff4 <TIM_Base_SetConfig+0xfc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d103      	bne.n	8003fc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d105      	bne.n	8003fe6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f023 0201 	bic.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	611a      	str	r2, [r3, #16]
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40000800 	.word	0x40000800
 8004000:	40000c00 	.word	0x40000c00
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800

08004010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f023 0201 	bic.w	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800403a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f023 030a 	bic.w	r3, r3, #10
 800404c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406e:	b480      	push	{r7}
 8004070:	b087      	sub	sp, #28
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f023 0210 	bic.w	r2, r3, #16
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004098:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	031b      	lsls	r3, r3, #12
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f043 0307 	orr.w	r3, r3, #7
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	609a      	str	r2, [r3, #8]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800411e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	021a      	lsls	r2, r3, #8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	431a      	orrs	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4313      	orrs	r3, r2
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e042      	b.n	80041dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd f932 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	@ 0x24
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fe75 	bl	8004e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800419c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d112      	bne.n	8004224 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_UART_Receive_DMA+0x26>
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e00b      	b.n	8004226 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	461a      	mov	r2, r3
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fbcc 	bl	80049b8 <UART_Start_Receive_DMA>
 8004220:	4603      	mov	r3, r0
 8004222:	e000      	b.n	8004226 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004224:	2302      	movs	r3, #2
  }
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b0ba      	sub	sp, #232	@ 0xe8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800426e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <HAL_UART_IRQHandler+0x66>
 8004282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fd33 	bl	8004cfa <UART_Receive_IT>
      return;
 8004294:	e25b      	b.n	800474e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80de 	beq.w	800445c <HAL_UART_IRQHandler+0x22c>
 80042a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80d1 	beq.w	800445c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <HAL_UART_IRQHandler+0xae>
 80042c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	f043 0201 	orr.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_UART_IRQHandler+0xd2>
 80042ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f043 0202 	orr.w	r2, r3, #2
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_UART_IRQHandler+0xf6>
 800430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d011      	beq.n	8004356 <HAL_UART_IRQHandler+0x126>
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d105      	bne.n	800434a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800433e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	f043 0208 	orr.w	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 81f2 	beq.w	8004744 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_UART_IRQHandler+0x14e>
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fcbe 	bl	8004cfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b40      	cmp	r3, #64	@ 0x40
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d103      	bne.n	80043aa <HAL_UART_IRQHandler+0x17a>
 80043a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d04f      	beq.n	800444a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fbc6 	bl	8004b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d141      	bne.n	8004442 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1d9      	bne.n	80043be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d013      	beq.n	800443a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	4a7e      	ldr	r2, [pc, #504]	@ (8004610 <HAL_UART_IRQHandler+0x3e0>)
 8004418:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fbd5 	bl	8001bce <HAL_DMA_Abort_IT>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004434:	4610      	mov	r0, r2
 8004436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e00e      	b.n	8004458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f9a8 	bl	8004790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	e00a      	b.n	8004458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9a4 	bl	8004790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e006      	b.n	8004458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f9a0 	bl	8004790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004456:	e175      	b.n	8004744 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	bf00      	nop
    return;
 800445a:	e173      	b.n	8004744 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	2b01      	cmp	r3, #1
 8004462:	f040 814f 	bne.w	8004704 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8148 	beq.w	8004704 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8141 	beq.w	8004704 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	f040 80b6 	bne.w	8004614 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8145 	beq.w	8004748 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044c6:	429a      	cmp	r2, r3
 80044c8:	f080 813e 	bcs.w	8004748 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044de:	f000 8088 	beq.w	80045f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004500:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800450e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800451a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1d9      	bne.n	80044e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3314      	adds	r3, #20
 8004534:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800453e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3314      	adds	r3, #20
 800454e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004552:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004556:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800455a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e1      	bne.n	800452e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800457a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800457c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3314      	adds	r3, #20
 800458a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800458e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004590:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004594:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800459c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e3      	bne.n	800456a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c2:	f023 0310 	bic.w	r3, r3, #16
 80045c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e3      	bne.n	80045b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fd fa7e 	bl	8001aee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004600:	b29b      	uxth	r3, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	b29b      	uxth	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f8cb 	bl	80047a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800460e:	e09b      	b.n	8004748 <HAL_UART_IRQHandler+0x518>
 8004610:	08004c03 	.word	0x08004c03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800461c:	b29b      	uxth	r3, r3
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 808e 	beq.w	800474c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8089 	beq.w	800474c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800464a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004650:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800465e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004660:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800466c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e3      	bne.n	800463a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	623b      	str	r3, [r7, #32]
   return(result);
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3314      	adds	r3, #20
 8004692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004696:	633a      	str	r2, [r7, #48]	@ 0x30
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800469c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e3      	bne.n	8004672 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	330c      	adds	r3, #12
 80046be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0310 	bic.w	r3, r3, #16
 80046ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80046dc:	61fa      	str	r2, [r7, #28]
 80046de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	69b9      	ldr	r1, [r7, #24]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e3      	bne.n	80046b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046fa:	4619      	mov	r1, r3
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f851 	bl	80047a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004702:	e023      	b.n	800474c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470c:	2b00      	cmp	r3, #0
 800470e:	d009      	beq.n	8004724 <HAL_UART_IRQHandler+0x4f4>
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa84 	bl	8004c2a <UART_Transmit_IT>
    return;
 8004722:	e014      	b.n	800474e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00e      	beq.n	800474e <HAL_UART_IRQHandler+0x51e>
 8004730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fac4 	bl	8004cca <UART_EndTransmit_IT>
    return;
 8004742:	e004      	b.n	800474e <HAL_UART_IRQHandler+0x51e>
    return;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_UART_IRQHandler+0x51e>
      return;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_UART_IRQHandler+0x51e>
      return;
 800474c:	bf00      	nop
  }
}
 800474e:	37e8      	adds	r7, #232	@ 0xe8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b09c      	sub	sp, #112	@ 0x70
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d172      	bne.n	80048be <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80047d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047da:	2200      	movs	r2, #0
 80047dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	330c      	adds	r3, #12
 80047fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80047fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004800:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004804:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800480c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e5      	bne.n	80047de <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3314      	adds	r3, #20
 8004818:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	667b      	str	r3, [r7, #100]	@ 0x64
 800482a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3314      	adds	r3, #20
 8004830:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004832:	647a      	str	r2, [r7, #68]	@ 0x44
 8004834:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e5      	bne.n	8004812 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3314      	adds	r3, #20
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	623b      	str	r3, [r7, #32]
   return(result);
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800485c:	663b      	str	r3, [r7, #96]	@ 0x60
 800485e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3314      	adds	r3, #20
 8004864:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004866:	633a      	str	r2, [r7, #48]	@ 0x30
 8004868:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800486c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e5      	bne.n	8004846 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800487a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	2b01      	cmp	r3, #1
 8004888:	d119      	bne.n	80048be <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	60fb      	str	r3, [r7, #12]
   return(result);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f023 0310 	bic.w	r3, r3, #16
 80048a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80048aa:	61fa      	str	r2, [r7, #28]
 80048ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	69b9      	ldr	r1, [r7, #24]
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	617b      	str	r3, [r7, #20]
   return(result);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e5      	bne.n	800488a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048c0:	2200      	movs	r2, #0
 80048c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d106      	bne.n	80048da <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048d0:	4619      	mov	r1, r3
 80048d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80048d4:	f7ff ff66 	bl	80047a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048d8:	e002      	b.n	80048e0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80048da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80048dc:	f7ff ff44 	bl	8004768 <HAL_UART_RxCpltCallback>
}
 80048e0:	bf00      	nop
 80048e2:	3770      	adds	r7, #112	@ 0x70
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	2b01      	cmp	r3, #1
 8004902:	d108      	bne.n	8004916 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	b29b      	uxth	r3, r3
 800490c:	4619      	mov	r1, r3
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff ff48 	bl	80047a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004914:	e002      	b.n	800491c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff ff30 	bl	800477c <HAL_UART_RxHalfCpltCallback>
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004940:	2b80      	cmp	r3, #128	@ 0x80
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b21      	cmp	r3, #33	@ 0x21
 8004956:	d108      	bne.n	800496a <UART_DMAError+0x46>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2200      	movs	r2, #0
 8004962:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004964:	68b8      	ldr	r0, [r7, #8]
 8004966:	f000 f8c1 	bl	8004aec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004974:	2b40      	cmp	r3, #64	@ 0x40
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b22      	cmp	r3, #34	@ 0x22
 800498a:	d108      	bne.n	800499e <UART_DMAError+0x7a>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2200      	movs	r2, #0
 8004996:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004998:	68b8      	ldr	r0, [r7, #8]
 800499a:	f000 f8cf 	bl	8004b3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	f043 0210 	orr.w	r2, r3, #16
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049aa:	68b8      	ldr	r0, [r7, #8]
 80049ac:	f7ff fef0 	bl	8004790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b098      	sub	sp, #96	@ 0x60
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2222      	movs	r2, #34	@ 0x22
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ae0 <UART_Start_Receive_DMA+0x128>)
 80049e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ec:	4a3d      	ldr	r2, [pc, #244]	@ (8004ae4 <UART_Start_Receive_DMA+0x12c>)
 80049ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ae8 <UART_Start_Receive_DMA+0x130>)
 80049f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fc:	2200      	movs	r2, #0
 80049fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	f7fd f811 	bl	8001a3e <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d019      	beq.n	8004a6e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	330c      	adds	r3, #12
 8004a58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a5a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004a60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e5      	bne.n	8004a3a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3314      	adds	r3, #20
 8004a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3314      	adds	r3, #20
 8004a8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a8e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004a90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004a94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e5      	bne.n	8004a6e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3314      	adds	r3, #20
 8004aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ab8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ac2:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6a39      	ldr	r1, [r7, #32]
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3760      	adds	r7, #96	@ 0x60
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	080047bd 	.word	0x080047bd
 8004ae4:	080048e9 	.word	0x080048e9
 8004ae8:	08004925 	.word	0x08004925

08004aec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	@ 0x24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b0a:	61fb      	str	r3, [r7, #28]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	330c      	adds	r3, #12
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	61ba      	str	r2, [r7, #24]
 8004b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6979      	ldr	r1, [r7, #20]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	613b      	str	r3, [r7, #16]
   return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e5      	bne.n	8004af4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004b30:	bf00      	nop
 8004b32:	3724      	adds	r7, #36	@ 0x24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b095      	sub	sp, #84	@ 0x54
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b64:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3314      	adds	r3, #20
 8004b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d119      	bne.n	8004be8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f023 0310 	bic.w	r3, r3, #16
 8004bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bd4:	61ba      	str	r2, [r7, #24]
 8004bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6979      	ldr	r1, [r7, #20]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	613b      	str	r3, [r7, #16]
   return(result);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bf6:	bf00      	nop
 8004bf8:	3754      	adds	r7, #84	@ 0x54
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff fdb7 	bl	8004790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b21      	cmp	r3, #33	@ 0x21
 8004c3c:	d13e      	bne.n	8004cbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c46:	d114      	bne.n	8004c72 <UART_Transmit_IT+0x48>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d110      	bne.n	8004c72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	1c9a      	adds	r2, r3, #2
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	621a      	str	r2, [r3, #32]
 8004c70:	e008      	b.n	8004c84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6211      	str	r1, [r2, #32]
 8004c7c:	781a      	ldrb	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4619      	mov	r1, r3
 8004c92:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10f      	bne.n	8004cb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ca6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ce0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff fd32 	bl	8004754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b08c      	sub	sp, #48	@ 0x30
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b22      	cmp	r3, #34	@ 0x22
 8004d0c:	f040 80ae 	bne.w	8004e6c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d18:	d117      	bne.n	8004d4a <UART_Receive_IT+0x50>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d113      	bne.n	8004d4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d48:	e026      	b.n	8004d98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d5c:	d007      	beq.n	8004d6e <UART_Receive_IT+0x74>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <UART_Receive_IT+0x82>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e008      	b.n	8004d8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	4619      	mov	r1, r3
 8004da6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d15d      	bne.n	8004e68 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0220 	bic.w	r2, r2, #32
 8004dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d135      	bne.n	8004e5e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	613b      	str	r3, [r7, #16]
   return(result);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f023 0310 	bic.w	r3, r3, #16
 8004e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	330c      	adds	r3, #12
 8004e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e18:	623a      	str	r2, [r7, #32]
 8004e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	69f9      	ldr	r1, [r7, #28]
 8004e1e:	6a3a      	ldr	r2, [r7, #32]
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d10a      	bne.n	8004e50 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fca4 	bl	80047a4 <HAL_UARTEx_RxEventCallback>
 8004e5c:	e002      	b.n	8004e64 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fc82 	bl	8004768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e002      	b.n	8004e6e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3730      	adds	r7, #48	@ 0x30
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e7c:	b0c0      	sub	sp, #256	@ 0x100
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e94:	68d9      	ldr	r1, [r3, #12]
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	ea40 0301 	orr.w	r3, r0, r1
 8004ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ed0:	f021 010c 	bic.w	r1, r1, #12
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef2:	6999      	ldr	r1, [r3, #24]
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	ea40 0301 	orr.w	r3, r0, r1
 8004efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b8f      	ldr	r3, [pc, #572]	@ (8005144 <UART_SetConfig+0x2cc>)
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d005      	beq.n	8004f18 <UART_SetConfig+0xa0>
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b8d      	ldr	r3, [pc, #564]	@ (8005148 <UART_SetConfig+0x2d0>)
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d104      	bne.n	8004f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f18:	f7fe fec4 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f20:	e003      	b.n	8004f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f22:	f7fe feab 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8004f26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f34:	f040 810c 	bne.w	8005150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	1891      	adds	r1, r2, r2
 8004f50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f52:	415b      	adcs	r3, r3
 8004f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	eb12 0801 	adds.w	r8, r2, r1
 8004f60:	4629      	mov	r1, r5
 8004f62:	eb43 0901 	adc.w	r9, r3, r1
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f7a:	4690      	mov	r8, r2
 8004f7c:	4699      	mov	r9, r3
 8004f7e:	4623      	mov	r3, r4
 8004f80:	eb18 0303 	adds.w	r3, r8, r3
 8004f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f88:	462b      	mov	r3, r5
 8004f8a:	eb49 0303 	adc.w	r3, r9, r3
 8004f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	18db      	adds	r3, r3, r3
 8004faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fac:	4613      	mov	r3, r2
 8004fae:	eb42 0303 	adc.w	r3, r2, r3
 8004fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fbc:	f7fb fdd6 	bl	8000b6c <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4b61      	ldr	r3, [pc, #388]	@ (800514c <UART_SetConfig+0x2d4>)
 8004fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	011c      	lsls	r4, r3, #4
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	1891      	adds	r1, r2, r2
 8004fe6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fe8:	415b      	adcs	r3, r3
 8004fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800500c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005010:	4692      	mov	sl, r2
 8005012:	469b      	mov	fp, r3
 8005014:	4643      	mov	r3, r8
 8005016:	eb1a 0303 	adds.w	r3, sl, r3
 800501a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800501e:	464b      	mov	r3, r9
 8005020:	eb4b 0303 	adc.w	r3, fp, r3
 8005024:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005034:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800503c:	460b      	mov	r3, r1
 800503e:	18db      	adds	r3, r3, r3
 8005040:	643b      	str	r3, [r7, #64]	@ 0x40
 8005042:	4613      	mov	r3, r2
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	647b      	str	r3, [r7, #68]	@ 0x44
 800504a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800504e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005052:	f7fb fd8b 	bl	8000b6c <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4611      	mov	r1, r2
 800505c:	4b3b      	ldr	r3, [pc, #236]	@ (800514c <UART_SetConfig+0x2d4>)
 800505e:	fba3 2301 	umull	r2, r3, r3, r1
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2264      	movs	r2, #100	@ 0x64
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	1acb      	subs	r3, r1, r3
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005072:	4b36      	ldr	r3, [pc, #216]	@ (800514c <UART_SetConfig+0x2d4>)
 8005074:	fba3 2302 	umull	r2, r3, r3, r2
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005080:	441c      	add	r4, r3
 8005082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005086:	2200      	movs	r2, #0
 8005088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800508c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005094:	4642      	mov	r2, r8
 8005096:	464b      	mov	r3, r9
 8005098:	1891      	adds	r1, r2, r2
 800509a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800509c:	415b      	adcs	r3, r3
 800509e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050a4:	4641      	mov	r1, r8
 80050a6:	1851      	adds	r1, r2, r1
 80050a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80050aa:	4649      	mov	r1, r9
 80050ac:	414b      	adcs	r3, r1
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050bc:	4659      	mov	r1, fp
 80050be:	00cb      	lsls	r3, r1, #3
 80050c0:	4651      	mov	r1, sl
 80050c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050c6:	4651      	mov	r1, sl
 80050c8:	00ca      	lsls	r2, r1, #3
 80050ca:	4610      	mov	r0, r2
 80050cc:	4619      	mov	r1, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	4642      	mov	r2, r8
 80050d2:	189b      	adds	r3, r3, r2
 80050d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050d8:	464b      	mov	r3, r9
 80050da:	460a      	mov	r2, r1
 80050dc:	eb42 0303 	adc.w	r3, r2, r3
 80050e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050f8:	460b      	mov	r3, r1
 80050fa:	18db      	adds	r3, r3, r3
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050fe:	4613      	mov	r3, r2
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800510a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800510e:	f7fb fd2d 	bl	8000b6c <__aeabi_uldivmod>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <UART_SetConfig+0x2d4>)
 8005118:	fba3 1302 	umull	r1, r3, r3, r2
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	2164      	movs	r1, #100	@ 0x64
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	3332      	adds	r3, #50	@ 0x32
 800512a:	4a08      	ldr	r2, [pc, #32]	@ (800514c <UART_SetConfig+0x2d4>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	f003 0207 	and.w	r2, r3, #7
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4422      	add	r2, r4
 800513e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005140:	e106      	b.n	8005350 <UART_SetConfig+0x4d8>
 8005142:	bf00      	nop
 8005144:	40011000 	.word	0x40011000
 8005148:	40011400 	.word	0x40011400
 800514c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005154:	2200      	movs	r2, #0
 8005156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800515a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800515e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005162:	4642      	mov	r2, r8
 8005164:	464b      	mov	r3, r9
 8005166:	1891      	adds	r1, r2, r2
 8005168:	6239      	str	r1, [r7, #32]
 800516a:	415b      	adcs	r3, r3
 800516c:	627b      	str	r3, [r7, #36]	@ 0x24
 800516e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005172:	4641      	mov	r1, r8
 8005174:	1854      	adds	r4, r2, r1
 8005176:	4649      	mov	r1, r9
 8005178:	eb43 0501 	adc.w	r5, r3, r1
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	00eb      	lsls	r3, r5, #3
 8005186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800518a:	00e2      	lsls	r2, r4, #3
 800518c:	4614      	mov	r4, r2
 800518e:	461d      	mov	r5, r3
 8005190:	4643      	mov	r3, r8
 8005192:	18e3      	adds	r3, r4, r3
 8005194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005198:	464b      	mov	r3, r9
 800519a:	eb45 0303 	adc.w	r3, r5, r3
 800519e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051be:	4629      	mov	r1, r5
 80051c0:	008b      	lsls	r3, r1, #2
 80051c2:	4621      	mov	r1, r4
 80051c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c8:	4621      	mov	r1, r4
 80051ca:	008a      	lsls	r2, r1, #2
 80051cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051d0:	f7fb fccc 	bl	8000b6c <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4b60      	ldr	r3, [pc, #384]	@ (800535c <UART_SetConfig+0x4e4>)
 80051da:	fba3 2302 	umull	r2, r3, r3, r2
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	011c      	lsls	r4, r3, #4
 80051e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051f4:	4642      	mov	r2, r8
 80051f6:	464b      	mov	r3, r9
 80051f8:	1891      	adds	r1, r2, r2
 80051fa:	61b9      	str	r1, [r7, #24]
 80051fc:	415b      	adcs	r3, r3
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005204:	4641      	mov	r1, r8
 8005206:	1851      	adds	r1, r2, r1
 8005208:	6139      	str	r1, [r7, #16]
 800520a:	4649      	mov	r1, r9
 800520c:	414b      	adcs	r3, r1
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800521c:	4659      	mov	r1, fp
 800521e:	00cb      	lsls	r3, r1, #3
 8005220:	4651      	mov	r1, sl
 8005222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005226:	4651      	mov	r1, sl
 8005228:	00ca      	lsls	r2, r1, #3
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	4603      	mov	r3, r0
 8005230:	4642      	mov	r2, r8
 8005232:	189b      	adds	r3, r3, r2
 8005234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005238:	464b      	mov	r3, r9
 800523a:	460a      	mov	r2, r1
 800523c:	eb42 0303 	adc.w	r3, r2, r3
 8005240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800524e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800525c:	4649      	mov	r1, r9
 800525e:	008b      	lsls	r3, r1, #2
 8005260:	4641      	mov	r1, r8
 8005262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005266:	4641      	mov	r1, r8
 8005268:	008a      	lsls	r2, r1, #2
 800526a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800526e:	f7fb fc7d 	bl	8000b6c <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4611      	mov	r1, r2
 8005278:	4b38      	ldr	r3, [pc, #224]	@ (800535c <UART_SetConfig+0x4e4>)
 800527a:	fba3 2301 	umull	r2, r3, r3, r1
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	2264      	movs	r2, #100	@ 0x64
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	1acb      	subs	r3, r1, r3
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	3332      	adds	r3, #50	@ 0x32
 800528c:	4a33      	ldr	r2, [pc, #204]	@ (800535c <UART_SetConfig+0x4e4>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005298:	441c      	add	r4, r3
 800529a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800529e:	2200      	movs	r2, #0
 80052a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80052a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80052a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	1891      	adds	r1, r2, r2
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	415b      	adcs	r3, r3
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b8:	4641      	mov	r1, r8
 80052ba:	1851      	adds	r1, r2, r1
 80052bc:	6039      	str	r1, [r7, #0]
 80052be:	4649      	mov	r1, r9
 80052c0:	414b      	adcs	r3, r1
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052d0:	4659      	mov	r1, fp
 80052d2:	00cb      	lsls	r3, r1, #3
 80052d4:	4651      	mov	r1, sl
 80052d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052da:	4651      	mov	r1, sl
 80052dc:	00ca      	lsls	r2, r1, #3
 80052de:	4610      	mov	r0, r2
 80052e0:	4619      	mov	r1, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	4642      	mov	r2, r8
 80052e6:	189b      	adds	r3, r3, r2
 80052e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ea:	464b      	mov	r3, r9
 80052ec:	460a      	mov	r2, r1
 80052ee:	eb42 0303 	adc.w	r3, r2, r3
 80052f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80052fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800530c:	4649      	mov	r1, r9
 800530e:	008b      	lsls	r3, r1, #2
 8005310:	4641      	mov	r1, r8
 8005312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005316:	4641      	mov	r1, r8
 8005318:	008a      	lsls	r2, r1, #2
 800531a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800531e:	f7fb fc25 	bl	8000b6c <__aeabi_uldivmod>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4b0d      	ldr	r3, [pc, #52]	@ (800535c <UART_SetConfig+0x4e4>)
 8005328:	fba3 1302 	umull	r1, r3, r3, r2
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	2164      	movs	r1, #100	@ 0x64
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	3332      	adds	r3, #50	@ 0x32
 800533a:	4a08      	ldr	r2, [pc, #32]	@ (800535c <UART_SetConfig+0x4e4>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	f003 020f 	and.w	r2, r3, #15
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4422      	add	r2, r4
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005356:	46bd      	mov	sp, r7
 8005358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800535c:	51eb851f 	.word	0x51eb851f

08005360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005360:	b084      	sub	sp, #16
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	f107 001c 	add.w	r0, r7, #28
 800536e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005372:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005376:	2b01      	cmp	r3, #1
 8005378:	d123      	bne.n	80053c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800538e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f001 fae8 	bl	800698c <USB_CoreReset>
 80053bc:	4603      	mov	r3, r0
 80053be:	73fb      	strb	r3, [r7, #15]
 80053c0:	e01b      	b.n	80053fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 fadc 	bl	800698c <USB_CoreReset>
 80053d4:	4603      	mov	r3, r0
 80053d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80053ec:	e005      	b.n	80053fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053fa:	7fbb      	ldrb	r3, [r7, #30]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d10b      	bne.n	8005418 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f043 0206 	orr.w	r2, r3, #6
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005424:	b004      	add	sp, #16
 8005426:	4770      	bx	lr

08005428 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d165      	bne.n	8005508 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4a41      	ldr	r2, [pc, #260]	@ (8005544 <USB_SetTurnaroundTime+0x11c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d906      	bls.n	8005452 <USB_SetTurnaroundTime+0x2a>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4a40      	ldr	r2, [pc, #256]	@ (8005548 <USB_SetTurnaroundTime+0x120>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d202      	bcs.n	8005452 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800544c:	230f      	movs	r3, #15
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e062      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4a3c      	ldr	r2, [pc, #240]	@ (8005548 <USB_SetTurnaroundTime+0x120>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d306      	bcc.n	8005468 <USB_SetTurnaroundTime+0x40>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4a3b      	ldr	r2, [pc, #236]	@ (800554c <USB_SetTurnaroundTime+0x124>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d202      	bcs.n	8005468 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005462:	230e      	movs	r3, #14
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e057      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4a38      	ldr	r2, [pc, #224]	@ (800554c <USB_SetTurnaroundTime+0x124>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d306      	bcc.n	800547e <USB_SetTurnaroundTime+0x56>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4a37      	ldr	r2, [pc, #220]	@ (8005550 <USB_SetTurnaroundTime+0x128>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d202      	bcs.n	800547e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005478:	230d      	movs	r3, #13
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e04c      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4a33      	ldr	r2, [pc, #204]	@ (8005550 <USB_SetTurnaroundTime+0x128>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d306      	bcc.n	8005494 <USB_SetTurnaroundTime+0x6c>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4a32      	ldr	r2, [pc, #200]	@ (8005554 <USB_SetTurnaroundTime+0x12c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d802      	bhi.n	8005494 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800548e:	230c      	movs	r3, #12
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	e041      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4a2f      	ldr	r2, [pc, #188]	@ (8005554 <USB_SetTurnaroundTime+0x12c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d906      	bls.n	80054aa <USB_SetTurnaroundTime+0x82>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4a2e      	ldr	r2, [pc, #184]	@ (8005558 <USB_SetTurnaroundTime+0x130>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d802      	bhi.n	80054aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054a4:	230b      	movs	r3, #11
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e036      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005558 <USB_SetTurnaroundTime+0x130>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d906      	bls.n	80054c0 <USB_SetTurnaroundTime+0x98>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4a29      	ldr	r2, [pc, #164]	@ (800555c <USB_SetTurnaroundTime+0x134>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d802      	bhi.n	80054c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054ba:	230a      	movs	r3, #10
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e02b      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a26      	ldr	r2, [pc, #152]	@ (800555c <USB_SetTurnaroundTime+0x134>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d906      	bls.n	80054d6 <USB_SetTurnaroundTime+0xae>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4a25      	ldr	r2, [pc, #148]	@ (8005560 <USB_SetTurnaroundTime+0x138>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d202      	bcs.n	80054d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054d0:	2309      	movs	r3, #9
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e020      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a21      	ldr	r2, [pc, #132]	@ (8005560 <USB_SetTurnaroundTime+0x138>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d306      	bcc.n	80054ec <USB_SetTurnaroundTime+0xc4>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a20      	ldr	r2, [pc, #128]	@ (8005564 <USB_SetTurnaroundTime+0x13c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d802      	bhi.n	80054ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054e6:	2308      	movs	r3, #8
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e015      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005564 <USB_SetTurnaroundTime+0x13c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d906      	bls.n	8005502 <USB_SetTurnaroundTime+0xda>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005568 <USB_SetTurnaroundTime+0x140>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d202      	bcs.n	8005502 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054fc:	2307      	movs	r3, #7
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e00a      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005502:	2306      	movs	r3, #6
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	e007      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800550e:	2309      	movs	r3, #9
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e001      	b.n	8005518 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005514:	2309      	movs	r3, #9
 8005516:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	029b      	lsls	r3, r3, #10
 800552c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	00d8acbf 	.word	0x00d8acbf
 8005548:	00e4e1c0 	.word	0x00e4e1c0
 800554c:	00f42400 	.word	0x00f42400
 8005550:	01067380 	.word	0x01067380
 8005554:	011a499f 	.word	0x011a499f
 8005558:	01312cff 	.word	0x01312cff
 800555c:	014ca43f 	.word	0x014ca43f
 8005560:	016e3600 	.word	0x016e3600
 8005564:	01a6ab1f 	.word	0x01a6ab1f
 8005568:	01e84800 	.word	0x01e84800

0800556c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f043 0201 	orr.w	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d115      	bne.n	80055fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055de:	200a      	movs	r0, #10
 80055e0:	f7fc f8f8 	bl	80017d4 <HAL_Delay>
      ms += 10U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	330a      	adds	r3, #10
 80055e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 f93f 	bl	800686e <USB_GetMode>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d01e      	beq.n	8005634 <USB_SetCurrentMode+0x84>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80055fa:	d9f0      	bls.n	80055de <USB_SetCurrentMode+0x2e>
 80055fc:	e01a      	b.n	8005634 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d115      	bne.n	8005630 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005610:	200a      	movs	r0, #10
 8005612:	f7fc f8df 	bl	80017d4 <HAL_Delay>
      ms += 10U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	330a      	adds	r3, #10
 800561a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 f926 	bl	800686e <USB_GetMode>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <USB_SetCurrentMode+0x84>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2bc7      	cmp	r3, #199	@ 0xc7
 800562c:	d9f0      	bls.n	8005610 <USB_SetCurrentMode+0x60>
 800562e:	e001      	b.n	8005634 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e005      	b.n	8005640 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2bc8      	cmp	r3, #200	@ 0xc8
 8005638:	d101      	bne.n	800563e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005648:	b084      	sub	sp, #16
 800564a:	b580      	push	{r7, lr}
 800564c:	b086      	sub	sp, #24
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	e009      	b.n	800567c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3340      	adds	r3, #64	@ 0x40
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	2200      	movs	r2, #0
 8005674:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	3301      	adds	r3, #1
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b0e      	cmp	r3, #14
 8005680:	d9f2      	bls.n	8005668 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005682:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11c      	bne.n	80056c4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005698:	f043 0302 	orr.w	r3, r3, #2
 800569c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80056c2:	e00b      	b.n	80056dc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d10d      	bne.n	800570c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056f8:	2100      	movs	r1, #0
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f968 	bl	80059d0 <USB_SetDevSpeed>
 8005700:	e008      	b.n	8005714 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005702:	2101      	movs	r1, #1
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f963 	bl	80059d0 <USB_SetDevSpeed>
 800570a:	e003      	b.n	8005714 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800570c:	2103      	movs	r1, #3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f95e 	bl	80059d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005714:	2110      	movs	r1, #16
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f8fa 	bl	8005910 <USB_FlushTxFifo>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f924 	bl	8005974 <USB_FlushRxFifo>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800573c:	461a      	mov	r2, r3
 800573e:	2300      	movs	r3, #0
 8005740:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005748:	461a      	mov	r2, r3
 800574a:	2300      	movs	r3, #0
 800574c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005754:	461a      	mov	r2, r3
 8005756:	2300      	movs	r3, #0
 8005758:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e043      	b.n	80057e8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005772:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005776:	d118      	bne.n	80057aa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578a:	461a      	mov	r2, r3
 800578c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	e013      	b.n	80057bc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a0:	461a      	mov	r2, r3
 80057a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	e008      	b.n	80057bc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b6:	461a      	mov	r2, r3
 80057b8:	2300      	movs	r3, #0
 80057ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c8:	461a      	mov	r2, r3
 80057ca:	2300      	movs	r3, #0
 80057cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057da:	461a      	mov	r2, r3
 80057dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	3301      	adds	r3, #1
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057ec:	461a      	mov	r2, r3
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d3b5      	bcc.n	8005760 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057f4:	2300      	movs	r3, #0
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	e043      	b.n	8005882 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800580c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005810:	d118      	bne.n	8005844 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005824:	461a      	mov	r2, r3
 8005826:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	e013      	b.n	8005856 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583a:	461a      	mov	r2, r3
 800583c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	e008      	b.n	8005856 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005850:	461a      	mov	r2, r3
 8005852:	2300      	movs	r3, #0
 8005854:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005862:	461a      	mov	r2, r3
 8005864:	2300      	movs	r3, #0
 8005866:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005874:	461a      	mov	r2, r3
 8005876:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800587a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	3301      	adds	r3, #1
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005886:	461a      	mov	r2, r3
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4293      	cmp	r3, r2
 800588c:	d3b5      	bcc.n	80057fa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800589c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80058ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d105      	bne.n	80058c4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f043 0210 	orr.w	r2, r3, #16
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699a      	ldr	r2, [r3, #24]
 80058c8:	4b10      	ldr	r3, [pc, #64]	@ (800590c <USB_DevInit+0x2c4>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f043 0208 	orr.w	r2, r3, #8
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d107      	bne.n	80058fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058f4:	f043 0304 	orr.w	r3, r3, #4
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005908:	b004      	add	sp, #16
 800590a:	4770      	bx	lr
 800590c:	803c3800 	.word	0x803c3800

08005910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800592a:	d901      	bls.n	8005930 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e01b      	b.n	8005968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	daf2      	bge.n	800591e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	019b      	lsls	r3, r3, #6
 8005940:	f043 0220 	orr.w	r2, r3, #32
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005954:	d901      	bls.n	800595a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e006      	b.n	8005968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b20      	cmp	r3, #32
 8005964:	d0f0      	beq.n	8005948 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800598c:	d901      	bls.n	8005992 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e018      	b.n	80059c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	daf2      	bge.n	8005980 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2210      	movs	r2, #16
 80059a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059b0:	d901      	bls.n	80059b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e006      	b.n	80059c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d0f0      	beq.n	80059a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	68f9      	ldr	r1, [r7, #12]
 80059ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059f0:	4313      	orrs	r3, r2
 80059f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b087      	sub	sp, #28
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0306 	and.w	r3, r3, #6
 8005a1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a22:	2300      	movs	r3, #0
 8005a24:	75fb      	strb	r3, [r7, #23]
 8005a26:	e00a      	b.n	8005a3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d002      	beq.n	8005a34 <USB_GetDevSpeed+0x32>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b06      	cmp	r3, #6
 8005a32:	d102      	bne.n	8005a3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a34:	2302      	movs	r3, #2
 8005a36:	75fb      	strb	r3, [r7, #23]
 8005a38:	e001      	b.n	8005a3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a3a:	230f      	movs	r3, #15
 8005a3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	785b      	ldrb	r3, [r3, #1]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d13a      	bne.n	8005ade <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	2101      	movs	r1, #1
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	68f9      	ldr	r1, [r7, #12]
 8005a82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a86:	4313      	orrs	r3, r2
 8005a88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d155      	bne.n	8005b4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	791b      	ldrb	r3, [r3, #4]
 8005aba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005abc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	059b      	lsls	r3, r3, #22
 8005ac2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	e036      	b.n	8005b4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae4:	69da      	ldr	r2, [r3, #28]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	2101      	movs	r1, #1
 8005af0:	fa01 f303 	lsl.w	r3, r1, r3
 8005af4:	041b      	lsls	r3, r3, #16
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d11a      	bne.n	8005b4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	791b      	ldrb	r3, [r3, #4]
 8005b30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b32:	430b      	orrs	r3, r1
 8005b34:	4313      	orrs	r3, r2
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d161      	bne.n	8005c3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b8e:	d11f      	bne.n	8005bd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005baa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	2101      	movs	r1, #1
 8005be2:	fa01 f303 	lsl.w	r3, r1, r3
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	2101      	movs	r1, #1
 8005c06:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	68f9      	ldr	r1, [r7, #12]
 8005c10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c14:	4013      	ands	r3, r2
 8005c16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	0159      	lsls	r1, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	440b      	add	r3, r1
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c32:	4619      	mov	r1, r3
 8005c34:	4b35      	ldr	r3, [pc, #212]	@ (8005d0c <USB_DeactivateEndpoint+0x1b0>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	600b      	str	r3, [r1, #0]
 8005c3a:	e060      	b.n	8005cfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c52:	d11f      	bne.n	8005c94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	43db      	mvns	r3, r3
 8005cae:	68f9      	ldr	r1, [r7, #12]
 8005cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	2101      	movs	r1, #1
 8005cca:	fa01 f303 	lsl.w	r3, r1, r3
 8005cce:	041b      	lsls	r3, r3, #16
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	0159      	lsls	r1, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	440b      	add	r3, r1
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <USB_DeactivateEndpoint+0x1b4>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	ec337800 	.word	0xec337800
 8005d10:	eff37800 	.word	0xeff37800

08005d14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08a      	sub	sp, #40	@ 0x28
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	f040 817f 	bne.w	8006034 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d132      	bne.n	8005da4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d58:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d5c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d9c:	0cdb      	lsrs	r3, r3, #19
 8005d9e:	04db      	lsls	r3, r3, #19
 8005da0:	6113      	str	r3, [r2, #16]
 8005da2:	e097      	b.n	8005ed4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dbe:	0cdb      	lsrs	r3, r3, #19
 8005dc0:	04db      	lsls	r3, r3, #19
 8005dc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dde:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005de2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005de6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d11a      	bne.n	8005e24 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d903      	bls.n	8005e02 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e20:	6113      	str	r3, [r2, #16]
 8005e22:	e044      	b.n	8005eae <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	1e5a      	subs	r2, r3, #1
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	8afb      	ldrh	r3, [r7, #22]
 8005e4a:	04d9      	lsls	r1, r3, #19
 8005e4c:	4ba4      	ldr	r3, [pc, #656]	@ (80060e0 <USB_EPStartXfer+0x3cc>)
 8005e4e:	400b      	ands	r3, r1
 8005e50:	69b9      	ldr	r1, [r7, #24]
 8005e52:	0148      	lsls	r0, r1, #5
 8005e54:	69f9      	ldr	r1, [r7, #28]
 8005e56:	4401      	add	r1, r0
 8005e58:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	791b      	ldrb	r3, [r3, #4]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d122      	bne.n	8005eae <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	0151      	lsls	r1, r2, #5
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	440a      	add	r2, r1
 8005e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e82:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005e86:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	8afb      	ldrh	r3, [r7, #22]
 8005e98:	075b      	lsls	r3, r3, #29
 8005e9a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005e9e:	69b9      	ldr	r1, [r7, #24]
 8005ea0:	0148      	lsls	r0, r1, #5
 8005ea2:	69f9      	ldr	r1, [r7, #28]
 8005ea4:	4401      	add	r1, r0
 8005ea6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec4:	69b9      	ldr	r1, [r7, #24]
 8005ec6:	0148      	lsls	r0, r1, #5
 8005ec8:	69f9      	ldr	r1, [r7, #28]
 8005eca:	4401      	add	r1, r0
 8005ecc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d14b      	bne.n	8005f72 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d009      	beq.n	8005ef6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eee:	461a      	mov	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	791b      	ldrb	r3, [r3, #4]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d128      	bne.n	8005f50 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d110      	bne.n	8005f30 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	e00f      	b.n	8005f50 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f4e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f6a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e166      	b.n	8006240 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f8c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f90:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	791b      	ldrb	r3, [r3, #4]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d015      	beq.n	8005fc6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 814e 	beq.w	8006240 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fba:	69f9      	ldr	r1, [r7, #28]
 8005fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	634b      	str	r3, [r1, #52]	@ 0x34
 8005fc4:	e13c      	b.n	8006240 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d110      	bne.n	8005ff8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ff0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	e00f      	b.n	8006018 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006016:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	68d9      	ldr	r1, [r3, #12]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	781a      	ldrb	r2, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	b298      	uxth	r0, r3
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	4603      	mov	r3, r0
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f9b9 	bl	80063a4 <USB_WritePacket>
 8006032:	e105      	b.n	8006240 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	440a      	add	r2, r1
 800604a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800604e:	0cdb      	lsrs	r3, r3, #19
 8006050:	04db      	lsls	r3, r3, #19
 8006052:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800606e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006072:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006076:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d132      	bne.n	80060e4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ac:	69b9      	ldr	r1, [r7, #24]
 80060ae:	0148      	lsls	r0, r1, #5
 80060b0:	69f9      	ldr	r1, [r7, #28]
 80060b2:	4401      	add	r1, r0
 80060b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060b8:	4313      	orrs	r3, r2
 80060ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060da:	6113      	str	r3, [r2, #16]
 80060dc:	e062      	b.n	80061a4 <USB_EPStartXfer+0x490>
 80060de:	bf00      	nop
 80060e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d123      	bne.n	8006134 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006102:	69b9      	ldr	r1, [r7, #24]
 8006104:	0148      	lsls	r0, r1, #5
 8006106:	69f9      	ldr	r1, [r7, #28]
 8006108:	4401      	add	r1, r0
 800610a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800610e:	4313      	orrs	r3, r2
 8006110:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800612c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006130:	6113      	str	r3, [r2, #16]
 8006132:	e037      	b.n	80061a4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4413      	add	r3, r2
 800613e:	1e5a      	subs	r2, r3, #1
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	8afa      	ldrh	r2, [r7, #22]
 8006150:	fb03 f202 	mul.w	r2, r3, r2
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	8afb      	ldrh	r3, [r7, #22]
 8006168:	04d9      	lsls	r1, r3, #19
 800616a:	4b38      	ldr	r3, [pc, #224]	@ (800624c <USB_EPStartXfer+0x538>)
 800616c:	400b      	ands	r3, r1
 800616e:	69b9      	ldr	r1, [r7, #24]
 8006170:	0148      	lsls	r0, r1, #5
 8006172:	69f9      	ldr	r1, [r7, #28]
 8006174:	4401      	add	r1, r0
 8006176:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800617a:	4313      	orrs	r3, r2
 800617c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006194:	69b9      	ldr	r1, [r7, #24]
 8006196:	0148      	lsls	r0, r1, #5
 8006198:	69f9      	ldr	r1, [r7, #28]
 800619a:	4401      	add	r1, r0
 800619c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061a0:	4313      	orrs	r3, r2
 80061a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d10d      	bne.n	80061c6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	68d9      	ldr	r1, [r3, #12]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c2:	460a      	mov	r2, r1
 80061c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	791b      	ldrb	r3, [r3, #4]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d128      	bne.n	8006220 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d110      	bne.n	8006200 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	e00f      	b.n	8006220 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800621a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800621e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800623a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800623e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	1ff80000 	.word	0x1ff80000

08006250 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d14a      	bne.n	8006304 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006286:	f040 8086 	bne.w	8006396 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	7812      	ldrb	r2, [r2, #0]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3301      	adds	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80062de:	4293      	cmp	r3, r2
 80062e0:	d902      	bls.n	80062e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	75fb      	strb	r3, [r7, #23]
          break;
 80062e6:	e056      	b.n	8006396 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006300:	d0e7      	beq.n	80062d2 <USB_EPStopXfer+0x82>
 8006302:	e048      	b.n	8006396 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006318:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800631c:	d13b      	bne.n	8006396 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	7812      	ldrb	r2, [r2, #0]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	440a      	add	r2, r1
 8006338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800633c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006340:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	7812      	ldrb	r2, [r2, #0]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006360:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006364:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3301      	adds	r3, #1
 800636a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006372:	4293      	cmp	r3, r2
 8006374:	d902      	bls.n	800637c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
          break;
 800637a:	e00c      	b.n	8006396 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006394:	d0e7      	beq.n	8006366 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006396:	7dfb      	ldrb	r3, [r7, #23]
}
 8006398:	4618      	mov	r0, r3
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b089      	sub	sp, #36	@ 0x24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4611      	mov	r1, r2
 80063b0:	461a      	mov	r2, r3
 80063b2:	460b      	mov	r3, r1
 80063b4:	71fb      	strb	r3, [r7, #7]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d123      	bne.n	8006412 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063ca:	88bb      	ldrh	r3, [r7, #4]
 80063cc:	3303      	adds	r3, #3
 80063ce:	089b      	lsrs	r3, r3, #2
 80063d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063d2:	2300      	movs	r3, #0
 80063d4:	61bb      	str	r3, [r7, #24]
 80063d6:	e018      	b.n	800640a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	031a      	lsls	r2, r3, #12
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063e4:	461a      	mov	r2, r3
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3301      	adds	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	3301      	adds	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	3301      	adds	r3, #1
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	429a      	cmp	r2, r3
 8006410:	d3e2      	bcc.n	80063d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3724      	adds	r7, #36	@ 0x24
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006420:	b480      	push	{r7}
 8006422:	b08b      	sub	sp, #44	@ 0x2c
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	089b      	lsrs	r3, r3, #2
 800643a:	b29b      	uxth	r3, r3
 800643c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006446:	2300      	movs	r3, #0
 8006448:	623b      	str	r3, [r7, #32]
 800644a:	e014      	b.n	8006476 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	601a      	str	r2, [r3, #0]
    pDest++;
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	3301      	adds	r3, #1
 800645c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	3301      	adds	r3, #1
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	3301      	adds	r3, #1
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	3301      	adds	r3, #1
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	3301      	adds	r3, #1
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	6a3a      	ldr	r2, [r7, #32]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	429a      	cmp	r2, r3
 800647c:	d3e6      	bcc.n	800644c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800647e:	8bfb      	ldrh	r3, [r7, #30]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01e      	beq.n	80064c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800648e:	461a      	mov	r2, r3
 8006490:	f107 0310 	add.w	r3, r7, #16
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	fa22 f303 	lsr.w	r3, r2, r3
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	701a      	strb	r2, [r3, #0]
      i++;
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	3301      	adds	r3, #1
 80064ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	3301      	adds	r3, #1
 80064b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80064b6:	8bfb      	ldrh	r3, [r7, #30]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064bc:	8bfb      	ldrh	r3, [r7, #30]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1ea      	bne.n	8006498 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	372c      	adds	r7, #44	@ 0x2c
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	785b      	ldrb	r3, [r3, #1]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d12c      	bne.n	8006546 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	db12      	blt.n	8006524 <USB_EPSetStall+0x54>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00f      	beq.n	8006524 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	440a      	add	r2, r1
 800651a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800651e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006522:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800653e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	e02b      	b.n	800659e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	db12      	blt.n	800657e <USB_EPSetStall+0xae>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00f      	beq.n	800657e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006578:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800657c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006598:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800659c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d128      	bne.n	800661a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	791b      	ldrb	r3, [r3, #4]
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d003      	beq.n	80065f8 <USB_EPClearStall+0x4c>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	791b      	ldrb	r3, [r3, #4]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d138      	bne.n	800666a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	440a      	add	r2, r1
 800660e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	e027      	b.n	800666a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006634:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006638:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	791b      	ldrb	r3, [r3, #4]
 800663e:	2b03      	cmp	r3, #3
 8006640:	d003      	beq.n	800664a <USB_EPClearStall+0x9e>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	791b      	ldrb	r3, [r3, #4]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d10f      	bne.n	800666a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	440a      	add	r2, r1
 8006660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006668:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006696:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800669a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80066ac:	68f9      	ldr	r1, [r7, #12]
 80066ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066b2:	4313      	orrs	r3, r2
 80066b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066f2:	f023 0302 	bic.w	r3, r3, #2
 80066f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006720:	f023 0303 	bic.w	r3, r3, #3
 8006724:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006734:	f043 0302 	orr.w	r3, r3, #2
 8006738:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4013      	ands	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006760:	68fb      	ldr	r3, [r7, #12]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	4013      	ands	r3, r2
 8006790:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	0c1b      	lsrs	r3, r3, #16
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	4013      	ands	r3, r2
 80067c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	b29b      	uxth	r3, r3
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b085      	sub	sp, #20
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067e6:	78fb      	ldrb	r3, [r7, #3]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	4013      	ands	r3, r2
 8006802:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006804:	68bb      	ldr	r3, [r7, #8]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006812:	b480      	push	{r7}
 8006814:	b087      	sub	sp, #28
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006834:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	fa22 f303 	lsr.w	r3, r2, r3
 8006842:	01db      	lsls	r3, r3, #7
 8006844:	b2db      	uxtb	r3, r3
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4013      	ands	r3, r2
 800685e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006860:	68bb      	ldr	r3, [r7, #8]
}
 8006862:	4618      	mov	r0, r3
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f003 0301 	and.w	r3, r3, #1
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800688a:	b480      	push	{r7}
 800688c:	b085      	sub	sp, #20
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80068a8:	f023 0307 	bic.w	r3, r3, #7
 80068ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	460b      	mov	r3, r1
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	333c      	adds	r3, #60	@ 0x3c
 80068e6:	3304      	adds	r3, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	4a26      	ldr	r2, [pc, #152]	@ (8006988 <USB_EP0_OutStart+0xb8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d90a      	bls.n	800690a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006904:	d101      	bne.n	800690a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	e037      	b.n	800697a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006910:	461a      	mov	r2, r3
 8006912:	2300      	movs	r3, #0
 8006914:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006924:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006938:	f043 0318 	orr.w	r3, r3, #24
 800693c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800694c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006950:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006952:	7afb      	ldrb	r3, [r7, #11]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d10f      	bne.n	8006978 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695e:	461a      	mov	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006972:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006976:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	4f54300a 	.word	0x4f54300a

0800698c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3301      	adds	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069a4:	d901      	bls.n	80069aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e01b      	b.n	80069e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	daf2      	bge.n	8006998 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f043 0201 	orr.w	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3301      	adds	r3, #1
 80069c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069ce:	d901      	bls.n	80069d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e006      	b.n	80069e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d0f0      	beq.n	80069c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069fc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006a00:	f002 fc96 	bl	8009330 <USBD_static_malloc>
 8006a04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d109      	bne.n	8006a20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	32b0      	adds	r2, #176	@ 0xb0
 8006a16:	2100      	movs	r1, #0
 8006a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e0d4      	b.n	8006bca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a20:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006a24:	2100      	movs	r1, #0
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f003 fbdb 	bl	800a1e2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	32b0      	adds	r2, #176	@ 0xb0
 8006a36:	68f9      	ldr	r1, [r7, #12]
 8006a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	32b0      	adds	r2, #176	@ 0xb0
 8006a46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	7c1b      	ldrb	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d138      	bne.n	8006aca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a58:	4b5e      	ldr	r3, [pc, #376]	@ (8006bd4 <USBD_CDC_Init+0x1e4>)
 8006a5a:	7819      	ldrb	r1, [r3, #0]
 8006a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a60:	2202      	movs	r2, #2
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f002 fb41 	bl	80090ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a68:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd4 <USBD_CDC_Init+0x1e4>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 020f 	and.w	r2, r3, #15
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	3324      	adds	r3, #36	@ 0x24
 8006a7e:	2201      	movs	r2, #1
 8006a80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a82:	4b55      	ldr	r3, [pc, #340]	@ (8006bd8 <USBD_CDC_Init+0x1e8>)
 8006a84:	7819      	ldrb	r1, [r3, #0]
 8006a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f002 fb2c 	bl	80090ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a92:	4b51      	ldr	r3, [pc, #324]	@ (8006bd8 <USBD_CDC_Init+0x1e8>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	f003 020f 	and.w	r2, r3, #15
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006aaa:	2201      	movs	r2, #1
 8006aac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006aae:	4b4b      	ldr	r3, [pc, #300]	@ (8006bdc <USBD_CDC_Init+0x1ec>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	f003 020f 	and.w	r2, r3, #15
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	3326      	adds	r3, #38	@ 0x26
 8006ac4:	2210      	movs	r2, #16
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e035      	b.n	8006b36 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006aca:	4b42      	ldr	r3, [pc, #264]	@ (8006bd4 <USBD_CDC_Init+0x1e4>)
 8006acc:	7819      	ldrb	r1, [r3, #0]
 8006ace:	2340      	movs	r3, #64	@ 0x40
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f002 fb09 	bl	80090ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8006bd4 <USBD_CDC_Init+0x1e4>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	f003 020f 	and.w	r2, r3, #15
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	3324      	adds	r3, #36	@ 0x24
 8006aee:	2201      	movs	r2, #1
 8006af0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006af2:	4b39      	ldr	r3, [pc, #228]	@ (8006bd8 <USBD_CDC_Init+0x1e8>)
 8006af4:	7819      	ldrb	r1, [r3, #0]
 8006af6:	2340      	movs	r3, #64	@ 0x40
 8006af8:	2202      	movs	r2, #2
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f002 faf5 	bl	80090ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b00:	4b35      	ldr	r3, [pc, #212]	@ (8006bd8 <USBD_CDC_Init+0x1e8>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 020f 	and.w	r2, r3, #15
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b18:	2201      	movs	r2, #1
 8006b1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8006bdc <USBD_CDC_Init+0x1ec>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	f003 020f 	and.w	r2, r3, #15
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	440b      	add	r3, r1
 8006b30:	3326      	adds	r3, #38	@ 0x26
 8006b32:	2210      	movs	r2, #16
 8006b34:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b36:	4b29      	ldr	r3, [pc, #164]	@ (8006bdc <USBD_CDC_Init+0x1ec>)
 8006b38:	7819      	ldrb	r1, [r3, #0]
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f002 fad3 	bl	80090ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b44:	4b25      	ldr	r3, [pc, #148]	@ (8006bdc <USBD_CDC_Init+0x1ec>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f003 020f 	and.w	r2, r3, #15
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	3324      	adds	r3, #36	@ 0x24
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	33b0      	adds	r3, #176	@ 0xb0
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006b94:	2302      	movs	r3, #2
 8006b96:	e018      	b.n	8006bca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	7c1b      	ldrb	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd8 <USBD_CDC_Init+0x1e8>)
 8006ba2:	7819      	ldrb	r1, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006baa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f002 fb8a 	bl	80092c8 <USBD_LL_PrepareReceive>
 8006bb4:	e008      	b.n	8006bc8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bb6:	4b08      	ldr	r3, [pc, #32]	@ (8006bd8 <USBD_CDC_Init+0x1e8>)
 8006bb8:	7819      	ldrb	r1, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006bc0:	2340      	movs	r3, #64	@ 0x40
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f002 fb80 	bl	80092c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000093 	.word	0x20000093
 8006bd8:	20000094 	.word	0x20000094
 8006bdc:	20000095 	.word	0x20000095

08006be0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006bec:	4b3a      	ldr	r3, [pc, #232]	@ (8006cd8 <USBD_CDC_DeInit+0xf8>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f002 fa9f 	bl	8009136 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006bf8:	4b37      	ldr	r3, [pc, #220]	@ (8006cd8 <USBD_CDC_DeInit+0xf8>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	f003 020f 	and.w	r2, r3, #15
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	3324      	adds	r3, #36	@ 0x24
 8006c0e:	2200      	movs	r2, #0
 8006c10:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c12:	4b32      	ldr	r3, [pc, #200]	@ (8006cdc <USBD_CDC_DeInit+0xfc>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f002 fa8c 	bl	8009136 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8006cdc <USBD_CDC_DeInit+0xfc>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	f003 020f 	and.w	r2, r3, #15
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c36:	2200      	movs	r2, #0
 8006c38:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c3a:	4b29      	ldr	r3, [pc, #164]	@ (8006ce0 <USBD_CDC_DeInit+0x100>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f002 fa78 	bl	8009136 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c46:	4b26      	ldr	r3, [pc, #152]	@ (8006ce0 <USBD_CDC_DeInit+0x100>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	f003 020f 	and.w	r2, r3, #15
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	3324      	adds	r3, #36	@ 0x24
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006c60:	4b1f      	ldr	r3, [pc, #124]	@ (8006ce0 <USBD_CDC_DeInit+0x100>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	f003 020f 	and.w	r2, r3, #15
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	3326      	adds	r3, #38	@ 0x26
 8006c76:	2200      	movs	r2, #0
 8006c78:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	32b0      	adds	r2, #176	@ 0xb0
 8006c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01f      	beq.n	8006ccc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	33b0      	adds	r3, #176	@ 0xb0
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	32b0      	adds	r2, #176	@ 0xb0
 8006caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f002 fb4c 	bl	800934c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	32b0      	adds	r2, #176	@ 0xb0
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000093 	.word	0x20000093
 8006cdc:	20000094 	.word	0x20000094
 8006ce0:	20000095 	.word	0x20000095

08006ce4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	32b0      	adds	r2, #176	@ 0xb0
 8006cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e0bf      	b.n	8006e94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d050      	beq.n	8006dc2 <USBD_CDC_Setup+0xde>
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	f040 80af 	bne.w	8006e84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	88db      	ldrh	r3, [r3, #6]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d03a      	beq.n	8006da4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	b25b      	sxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	da1b      	bge.n	8006d70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	33b0      	adds	r3, #176	@ 0xb0
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	88d2      	ldrh	r2, [r2, #6]
 8006d54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	88db      	ldrh	r3, [r3, #6]
 8006d5a:	2b07      	cmp	r3, #7
 8006d5c:	bf28      	it	cs
 8006d5e:	2307      	movcs	r3, #7
 8006d60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	89fa      	ldrh	r2, [r7, #14]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fd93 	bl	8008894 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006d6e:	e090      	b.n	8006e92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	785a      	ldrb	r2, [r3, #1]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	88db      	ldrh	r3, [r3, #6]
 8006d7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d80:	d803      	bhi.n	8006d8a <USBD_CDC_Setup+0xa6>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	e000      	b.n	8006d8c <USBD_CDC_Setup+0xa8>
 8006d8a:	2240      	movs	r2, #64	@ 0x40
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d92:	6939      	ldr	r1, [r7, #16]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 fda5 	bl	80088ec <USBD_CtlPrepareRx>
      break;
 8006da2:	e076      	b.n	8006e92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	33b0      	adds	r3, #176	@ 0xb0
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	7850      	ldrb	r0, [r2, #1]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	4798      	blx	r3
      break;
 8006dc0:	e067      	b.n	8006e92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	2b0b      	cmp	r3, #11
 8006dc8:	d851      	bhi.n	8006e6e <USBD_CDC_Setup+0x18a>
 8006dca:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd0 <USBD_CDC_Setup+0xec>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006e01 	.word	0x08006e01
 8006dd4:	08006e7d 	.word	0x08006e7d
 8006dd8:	08006e6f 	.word	0x08006e6f
 8006ddc:	08006e6f 	.word	0x08006e6f
 8006de0:	08006e6f 	.word	0x08006e6f
 8006de4:	08006e6f 	.word	0x08006e6f
 8006de8:	08006e6f 	.word	0x08006e6f
 8006dec:	08006e6f 	.word	0x08006e6f
 8006df0:	08006e6f 	.word	0x08006e6f
 8006df4:	08006e6f 	.word	0x08006e6f
 8006df8:	08006e2b 	.word	0x08006e2b
 8006dfc:	08006e55 	.word	0x08006e55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d107      	bne.n	8006e1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e0c:	f107 030a 	add.w	r3, r7, #10
 8006e10:	2202      	movs	r2, #2
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 fd3d 	bl	8008894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e1a:	e032      	b.n	8006e82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 fcbb 	bl	800879a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	75fb      	strb	r3, [r7, #23]
          break;
 8006e28:	e02b      	b.n	8006e82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d107      	bne.n	8006e46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e36:	f107 030d 	add.w	r3, r7, #13
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 fd28 	bl	8008894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e44:	e01d      	b.n	8006e82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 fca6 	bl	800879a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	75fb      	strb	r3, [r7, #23]
          break;
 8006e52:	e016      	b.n	8006e82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d00f      	beq.n	8006e80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 fc99 	bl	800879a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e6c:	e008      	b.n	8006e80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fc92 	bl	800879a <USBD_CtlError>
          ret = USBD_FAIL;
 8006e76:	2303      	movs	r3, #3
 8006e78:	75fb      	strb	r3, [r7, #23]
          break;
 8006e7a:	e002      	b.n	8006e82 <USBD_CDC_Setup+0x19e>
          break;
 8006e7c:	bf00      	nop
 8006e7e:	e008      	b.n	8006e92 <USBD_CDC_Setup+0x1ae>
          break;
 8006e80:	bf00      	nop
      }
      break;
 8006e82:	e006      	b.n	8006e92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fc87 	bl	800879a <USBD_CtlError>
      ret = USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e90:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006eae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32b0      	adds	r2, #176	@ 0xb0
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e065      	b.n	8006f92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	32b0      	adds	r2, #176	@ 0xb0
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ed6:	78fb      	ldrb	r3, [r7, #3]
 8006ed8:	f003 020f 	and.w	r2, r3, #15
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3318      	adds	r3, #24
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d02f      	beq.n	8006f50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	f003 020f 	and.w	r2, r3, #15
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	3318      	adds	r3, #24
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	f003 010f 	and.w	r1, r3, #15
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	440b      	add	r3, r1
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4403      	add	r3, r0
 8006f18:	331c      	adds	r3, #28
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f20:	fb01 f303 	mul.w	r3, r1, r3
 8006f24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d112      	bne.n	8006f50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	f003 020f 	and.w	r2, r3, #15
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3318      	adds	r3, #24
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f42:	78f9      	ldrb	r1, [r7, #3]
 8006f44:	2300      	movs	r3, #0
 8006f46:	2200      	movs	r2, #0
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f002 f99c 	bl	8009286 <USBD_LL_Transmit>
 8006f4e:	e01f      	b.n	8006f90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	33b0      	adds	r3, #176	@ 0xb0
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d010      	beq.n	8006f90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	33b0      	adds	r3, #176	@ 0xb0
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006f8c:	78fa      	ldrb	r2, [r7, #3]
 8006f8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	32b0      	adds	r2, #176	@ 0xb0
 8006fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	32b0      	adds	r2, #176	@ 0xb0
 8006fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e01a      	b.n	8007002 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f002 f99a 	bl	800930a <USBD_LL_GetRxDataSize>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	33b0      	adds	r3, #176	@ 0xb0
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	32b0      	adds	r2, #176	@ 0xb0
 800701c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007020:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007028:	2303      	movs	r3, #3
 800702a:	e024      	b.n	8007076 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	33b0      	adds	r3, #176	@ 0xb0
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d019      	beq.n	8007074 <USBD_CDC_EP0_RxReady+0x6a>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007046:	2bff      	cmp	r3, #255	@ 0xff
 8007048:	d014      	beq.n	8007074 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	33b0      	adds	r3, #176	@ 0xb0
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007062:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800706a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	22ff      	movs	r2, #255	@ 0xff
 8007070:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007088:	2182      	movs	r1, #130	@ 0x82
 800708a:	4818      	ldr	r0, [pc, #96]	@ (80070ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800708c:	f000 fd4f 	bl	8007b2e <USBD_GetEpDesc>
 8007090:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007092:	2101      	movs	r1, #1
 8007094:	4815      	ldr	r0, [pc, #84]	@ (80070ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007096:	f000 fd4a 	bl	8007b2e <USBD_GetEpDesc>
 800709a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800709c:	2181      	movs	r1, #129	@ 0x81
 800709e:	4813      	ldr	r0, [pc, #76]	@ (80070ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070a0:	f000 fd45 	bl	8007b2e <USBD_GetEpDesc>
 80070a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2210      	movs	r2, #16
 80070b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d006      	beq.n	80070c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c0:	711a      	strb	r2, [r3, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d006      	beq.n	80070da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070d4:	711a      	strb	r2, [r3, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2243      	movs	r2, #67	@ 0x43
 80070de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070e0:	4b02      	ldr	r3, [pc, #8]	@ (80070ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000050 	.word	0x20000050

080070f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070f8:	2182      	movs	r1, #130	@ 0x82
 80070fa:	4818      	ldr	r0, [pc, #96]	@ (800715c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80070fc:	f000 fd17 	bl	8007b2e <USBD_GetEpDesc>
 8007100:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007102:	2101      	movs	r1, #1
 8007104:	4815      	ldr	r0, [pc, #84]	@ (800715c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007106:	f000 fd12 	bl	8007b2e <USBD_GetEpDesc>
 800710a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800710c:	2181      	movs	r1, #129	@ 0x81
 800710e:	4813      	ldr	r0, [pc, #76]	@ (800715c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007110:	f000 fd0d 	bl	8007b2e <USBD_GetEpDesc>
 8007114:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2210      	movs	r2, #16
 8007120:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d006      	beq.n	8007136 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2200      	movs	r2, #0
 800712c:	711a      	strb	r2, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f042 0202 	orr.w	r2, r2, #2
 8007134:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d006      	beq.n	800714a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	711a      	strb	r2, [r3, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f042 0202 	orr.w	r2, r2, #2
 8007148:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2243      	movs	r2, #67	@ 0x43
 800714e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007150:	4b02      	ldr	r3, [pc, #8]	@ (800715c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000050 	.word	0x20000050

08007160 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007168:	2182      	movs	r1, #130	@ 0x82
 800716a:	4818      	ldr	r0, [pc, #96]	@ (80071cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800716c:	f000 fcdf 	bl	8007b2e <USBD_GetEpDesc>
 8007170:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007172:	2101      	movs	r1, #1
 8007174:	4815      	ldr	r0, [pc, #84]	@ (80071cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007176:	f000 fcda 	bl	8007b2e <USBD_GetEpDesc>
 800717a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800717c:	2181      	movs	r1, #129	@ 0x81
 800717e:	4813      	ldr	r0, [pc, #76]	@ (80071cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007180:	f000 fcd5 	bl	8007b2e <USBD_GetEpDesc>
 8007184:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2210      	movs	r2, #16
 8007190:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d006      	beq.n	80071a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2200      	movs	r2, #0
 800719c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071a0:	711a      	strb	r2, [r3, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d006      	beq.n	80071ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071b4:	711a      	strb	r2, [r3, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2243      	movs	r2, #67	@ 0x43
 80071be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071c0:	4b02      	ldr	r3, [pc, #8]	@ (80071cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000050 	.word	0x20000050

080071d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	220a      	movs	r2, #10
 80071dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80071de:	4b03      	ldr	r3, [pc, #12]	@ (80071ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	2000000c 	.word	0x2000000c

080071f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007200:	2303      	movs	r3, #3
 8007202:	e009      	b.n	8007218 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	33b0      	adds	r3, #176	@ 0xb0
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	32b0      	adds	r2, #176	@ 0xb0
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007246:	2303      	movs	r3, #3
 8007248:	e008      	b.n	800725c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	32b0      	adds	r2, #176	@ 0xb0
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007288:	2303      	movs	r3, #3
 800728a:	e004      	b.n	8007296 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	32b0      	adds	r2, #176	@ 0xb0
 80072b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80072bc:	2301      	movs	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e025      	b.n	8007316 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11f      	bne.n	8007314 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80072dc:	4b10      	ldr	r3, [pc, #64]	@ (8007320 <USBD_CDC_TransmitPacket+0x7c>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 020f 	and.w	r2, r3, #15
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4403      	add	r3, r0
 80072f6:	3318      	adds	r3, #24
 80072f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80072fa:	4b09      	ldr	r3, [pc, #36]	@ (8007320 <USBD_CDC_TransmitPacket+0x7c>)
 80072fc:	7819      	ldrb	r1, [r3, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 ffbb 	bl	8009286 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000093 	.word	0x20000093

08007324 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	32b0      	adds	r2, #176	@ 0xb0
 8007336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	32b0      	adds	r2, #176	@ 0xb0
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800734e:	2303      	movs	r3, #3
 8007350:	e018      	b.n	8007384 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7c1b      	ldrb	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10a      	bne.n	8007370 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800735a:	4b0c      	ldr	r3, [pc, #48]	@ (800738c <USBD_CDC_ReceivePacket+0x68>)
 800735c:	7819      	ldrb	r1, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 ffad 	bl	80092c8 <USBD_LL_PrepareReceive>
 800736e:	e008      	b.n	8007382 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007370:	4b06      	ldr	r3, [pc, #24]	@ (800738c <USBD_CDC_ReceivePacket+0x68>)
 8007372:	7819      	ldrb	r1, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800737a:	2340      	movs	r3, #64	@ 0x40
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 ffa3 	bl	80092c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20000094 	.word	0x20000094

08007390 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e01f      	b.n	80073e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	79fa      	ldrb	r2, [r7, #7]
 80073da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f001 fe1d 	bl	800901c <USBD_LL_Init>
 80073e2:	4603      	mov	r3, r0
 80073e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007404:	2303      	movs	r3, #3
 8007406:	e025      	b.n	8007454 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	32ae      	adds	r2, #174	@ 0xae
 800741a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00f      	beq.n	8007444 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	32ae      	adds	r2, #174	@ 0xae
 800742e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	f107 020e 	add.w	r2, r7, #14
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
 800743c:	4602      	mov	r2, r0
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 fe25 	bl	80090b4 <USBD_LL_Start>
 800746a:	4603      	mov	r3, r0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d009      	beq.n	80074b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	78fa      	ldrb	r2, [r7, #3]
 80074ae:	4611      	mov	r1, r2
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	4798      	blx	r3
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	78fa      	ldrb	r2, [r7, #3]
 80074dc:	4611      	mov	r1, r2
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80074e8:	2303      	movs	r3, #3
 80074ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b084      	sub	sp, #16
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	4618      	mov	r0, r3
 800750a:	f001 f90c 	bl	8008726 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800751c:	461a      	mov	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800752a:	f003 031f 	and.w	r3, r3, #31
 800752e:	2b02      	cmp	r3, #2
 8007530:	d01a      	beq.n	8007568 <USBD_LL_SetupStage+0x72>
 8007532:	2b02      	cmp	r3, #2
 8007534:	d822      	bhi.n	800757c <USBD_LL_SetupStage+0x86>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <USBD_LL_SetupStage+0x4a>
 800753a:	2b01      	cmp	r3, #1
 800753c:	d00a      	beq.n	8007554 <USBD_LL_SetupStage+0x5e>
 800753e:	e01d      	b.n	800757c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fb63 	bl	8007c14 <USBD_StdDevReq>
 800754e:	4603      	mov	r3, r0
 8007550:	73fb      	strb	r3, [r7, #15]
      break;
 8007552:	e020      	b.n	8007596 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fbcb 	bl	8007cf8 <USBD_StdItfReq>
 8007562:	4603      	mov	r3, r0
 8007564:	73fb      	strb	r3, [r7, #15]
      break;
 8007566:	e016      	b.n	8007596 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fc2d 	bl	8007dd0 <USBD_StdEPReq>
 8007576:	4603      	mov	r3, r0
 8007578:	73fb      	strb	r3, [r7, #15]
      break;
 800757a:	e00c      	b.n	8007596 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007582:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007586:	b2db      	uxtb	r3, r3
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 fdf2 	bl	8009174 <USBD_LL_StallEP>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]
      break;
 8007594:	bf00      	nop
  }

  return ret;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	460b      	mov	r3, r1
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d16e      	bne.n	8007696 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80075be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	f040 8098 	bne.w	80076fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d913      	bls.n	8007600 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	1ad2      	subs	r2, r2, r3
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	4293      	cmp	r3, r2
 80075f0:	bf28      	it	cs
 80075f2:	4613      	movcs	r3, r2
 80075f4:	461a      	mov	r2, r3
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f001 f994 	bl	8008926 <USBD_CtlContinueRx>
 80075fe:	e07d      	b.n	80076fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	2b02      	cmp	r3, #2
 800760c:	d014      	beq.n	8007638 <USBD_LL_DataOutStage+0x98>
 800760e:	2b02      	cmp	r3, #2
 8007610:	d81d      	bhi.n	800764e <USBD_LL_DataOutStage+0xae>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <USBD_LL_DataOutStage+0x7c>
 8007616:	2b01      	cmp	r3, #1
 8007618:	d003      	beq.n	8007622 <USBD_LL_DataOutStage+0x82>
 800761a:	e018      	b.n	800764e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	75bb      	strb	r3, [r7, #22]
            break;
 8007620:	e018      	b.n	8007654 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007628:	b2db      	uxtb	r3, r3
 800762a:	4619      	mov	r1, r3
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 fa64 	bl	8007afa <USBD_CoreFindIF>
 8007632:	4603      	mov	r3, r0
 8007634:	75bb      	strb	r3, [r7, #22]
            break;
 8007636:	e00d      	b.n	8007654 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800763e:	b2db      	uxtb	r3, r3
 8007640:	4619      	mov	r1, r3
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 fa66 	bl	8007b14 <USBD_CoreFindEP>
 8007648:	4603      	mov	r3, r0
 800764a:	75bb      	strb	r3, [r7, #22]
            break;
 800764c:	e002      	b.n	8007654 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	75bb      	strb	r3, [r7, #22]
            break;
 8007652:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007654:	7dbb      	ldrb	r3, [r7, #22]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d119      	bne.n	800768e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b03      	cmp	r3, #3
 8007664:	d113      	bne.n	800768e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007666:	7dba      	ldrb	r2, [r7, #22]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	32ae      	adds	r2, #174	@ 0xae
 800766c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007676:	7dba      	ldrb	r2, [r7, #22]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800767e:	7dba      	ldrb	r2, [r7, #22]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	32ae      	adds	r2, #174	@ 0xae
 8007684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f001 f95a 	bl	8008948 <USBD_CtlSendStatus>
 8007694:	e032      	b.n	80076fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800769c:	b2db      	uxtb	r3, r3
 800769e:	4619      	mov	r1, r3
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fa37 	bl	8007b14 <USBD_CoreFindEP>
 80076a6:	4603      	mov	r3, r0
 80076a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076aa:	7dbb      	ldrb	r3, [r7, #22]
 80076ac:	2bff      	cmp	r3, #255	@ 0xff
 80076ae:	d025      	beq.n	80076fc <USBD_LL_DataOutStage+0x15c>
 80076b0:	7dbb      	ldrb	r3, [r7, #22]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d122      	bne.n	80076fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d117      	bne.n	80076f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80076c2:	7dba      	ldrb	r2, [r7, #22]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	32ae      	adds	r2, #174	@ 0xae
 80076c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00f      	beq.n	80076f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80076d2:	7dba      	ldrb	r2, [r7, #22]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80076da:	7dba      	ldrb	r2, [r7, #22]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	32ae      	adds	r2, #174	@ 0xae
 80076e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	7afa      	ldrb	r2, [r7, #11]
 80076e8:	4611      	mov	r1, r2
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	4798      	blx	r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	e000      	b.n	80076fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b086      	sub	sp, #24
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	460b      	mov	r3, r1
 8007710:	607a      	str	r2, [r7, #4]
 8007712:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d16f      	bne.n	80077fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3314      	adds	r3, #20
 800771e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007726:	2b02      	cmp	r3, #2
 8007728:	d15a      	bne.n	80077e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	689a      	ldr	r2, [r3, #8]
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	429a      	cmp	r2, r3
 8007734:	d914      	bls.n	8007760 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	461a      	mov	r2, r3
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f001 f8bc 	bl	80088ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007752:	2300      	movs	r3, #0
 8007754:	2200      	movs	r2, #0
 8007756:	2100      	movs	r1, #0
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f001 fdb5 	bl	80092c8 <USBD_LL_PrepareReceive>
 800775e:	e03f      	b.n	80077e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	429a      	cmp	r2, r3
 800776a:	d11c      	bne.n	80077a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007774:	429a      	cmp	r2, r3
 8007776:	d316      	bcc.n	80077a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007782:	429a      	cmp	r2, r3
 8007784:	d20f      	bcs.n	80077a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007786:	2200      	movs	r2, #0
 8007788:	2100      	movs	r1, #0
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f001 f89d 	bl	80088ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007798:	2300      	movs	r3, #0
 800779a:	2200      	movs	r2, #0
 800779c:	2100      	movs	r1, #0
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f001 fd92 	bl	80092c8 <USBD_LL_PrepareReceive>
 80077a4:	e01c      	b.n	80077e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d10f      	bne.n	80077d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077d2:	2180      	movs	r1, #128	@ 0x80
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f001 fccd 	bl	8009174 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f001 f8c7 	bl	800896e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d03a      	beq.n	8007860 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff fe42 	bl	8007474 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80077f8:	e032      	b.n	8007860 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007800:	b2db      	uxtb	r3, r3
 8007802:	4619      	mov	r1, r3
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f985 	bl	8007b14 <USBD_CoreFindEP>
 800780a:	4603      	mov	r3, r0
 800780c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	2bff      	cmp	r3, #255	@ 0xff
 8007812:	d025      	beq.n	8007860 <USBD_LL_DataInStage+0x15a>
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d122      	bne.n	8007860 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b03      	cmp	r3, #3
 8007824:	d11c      	bne.n	8007860 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007826:	7dfa      	ldrb	r2, [r7, #23]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	32ae      	adds	r2, #174	@ 0xae
 800782c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d014      	beq.n	8007860 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007836:	7dfa      	ldrb	r2, [r7, #23]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800783e:	7dfa      	ldrb	r2, [r7, #23]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	32ae      	adds	r2, #174	@ 0xae
 8007844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	7afa      	ldrb	r2, [r7, #11]
 800784c:	4611      	mov	r1, r2
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	4798      	blx	r3
 8007852:	4603      	mov	r3, r0
 8007854:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007856:	7dbb      	ldrb	r3, [r7, #22]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800785c:	7dbb      	ldrb	r3, [r7, #22]
 800785e:	e000      	b.n	8007862 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d014      	beq.n	80078d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00e      	beq.n	80078d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6852      	ldr	r2, [r2, #4]
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	4611      	mov	r1, r2
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	4798      	blx	r3
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80078cc:	2303      	movs	r3, #3
 80078ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078d0:	2340      	movs	r3, #64	@ 0x40
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 fc07 	bl	80090ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2240      	movs	r2, #64	@ 0x40
 80078e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078ec:	2340      	movs	r3, #64	@ 0x40
 80078ee:	2200      	movs	r2, #0
 80078f0:	2180      	movs	r1, #128	@ 0x80
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 fbf9 	bl	80090ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2240      	movs	r2, #64	@ 0x40
 8007902:	621a      	str	r2, [r3, #32]

  return ret;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	78fa      	ldrb	r2, [r7, #3]
 800791e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b04      	cmp	r3, #4
 8007940:	d006      	beq.n	8007950 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007948:	b2da      	uxtb	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2204      	movs	r2, #4
 8007954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b04      	cmp	r3, #4
 8007978:	d106      	bne.n	8007988 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007980:	b2da      	uxtb	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d110      	bne.n	80079cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00b      	beq.n	80079cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d005      	beq.n	80079cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	32ae      	adds	r2, #174	@ 0xae
 80079ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e01c      	b.n	8007a32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d115      	bne.n	8007a30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	32ae      	adds	r2, #174	@ 0xae
 8007a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	32ae      	adds	r2, #174	@ 0xae
 8007a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	78fa      	ldrb	r2, [r7, #3]
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	32ae      	adds	r2, #174	@ 0xae
 8007a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e01c      	b.n	8007a96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d115      	bne.n	8007a94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	32ae      	adds	r2, #174	@ 0xae
 8007a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00b      	beq.n	8007a94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32ae      	adds	r2, #174	@ 0xae
 8007a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	4611      	mov	r1, r2
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00e      	beq.n	8007af0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	6852      	ldr	r2, [r2, #4]
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007aec:	2303      	movs	r3, #3
 8007aee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b086      	sub	sp, #24
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	885b      	ldrh	r3, [r3, #2]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d91f      	bls.n	8007b94 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b5a:	e013      	b.n	8007b84 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b5c:	f107 030a 	add.w	r3, r7, #10
 8007b60:	4619      	mov	r1, r3
 8007b62:	6978      	ldr	r0, [r7, #20]
 8007b64:	f000 f81b 	bl	8007b9e <USBD_GetNextDesc>
 8007b68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	2b05      	cmp	r3, #5
 8007b70:	d108      	bne.n	8007b84 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	789b      	ldrb	r3, [r3, #2]
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d008      	beq.n	8007b92 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	885b      	ldrh	r3, [r3, #2]
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	897b      	ldrh	r3, [r7, #10]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d8e5      	bhi.n	8007b5c <USBD_GetEpDesc+0x2e>
 8007b90:	e000      	b.n	8007b94 <USBD_GetEpDesc+0x66>
          break;
 8007b92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b94:	693b      	ldr	r3, [r7, #16]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	7812      	ldrb	r2, [r2, #0]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b087      	sub	sp, #28
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	3301      	adds	r3, #1
 8007bec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007bf4:	8a3b      	ldrh	r3, [r7, #16]
 8007bf6:	021b      	lsls	r3, r3, #8
 8007bf8:	b21a      	sxth	r2, r3
 8007bfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	b21b      	sxth	r3, r3
 8007c02:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c04:	89fb      	ldrh	r3, [r7, #14]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	371c      	adds	r7, #28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
	...

08007c14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c2a:	2b40      	cmp	r3, #64	@ 0x40
 8007c2c:	d005      	beq.n	8007c3a <USBD_StdDevReq+0x26>
 8007c2e:	2b40      	cmp	r3, #64	@ 0x40
 8007c30:	d857      	bhi.n	8007ce2 <USBD_StdDevReq+0xce>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00f      	beq.n	8007c56 <USBD_StdDevReq+0x42>
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d153      	bne.n	8007ce2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	32ae      	adds	r2, #174	@ 0xae
 8007c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4798      	blx	r3
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
      break;
 8007c54:	e04a      	b.n	8007cec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	785b      	ldrb	r3, [r3, #1]
 8007c5a:	2b09      	cmp	r3, #9
 8007c5c:	d83b      	bhi.n	8007cd6 <USBD_StdDevReq+0xc2>
 8007c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c64 <USBD_StdDevReq+0x50>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007cb9 	.word	0x08007cb9
 8007c68:	08007ccd 	.word	0x08007ccd
 8007c6c:	08007cd7 	.word	0x08007cd7
 8007c70:	08007cc3 	.word	0x08007cc3
 8007c74:	08007cd7 	.word	0x08007cd7
 8007c78:	08007c97 	.word	0x08007c97
 8007c7c:	08007c8d 	.word	0x08007c8d
 8007c80:	08007cd7 	.word	0x08007cd7
 8007c84:	08007caf 	.word	0x08007caf
 8007c88:	08007ca1 	.word	0x08007ca1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa3c 	bl	800810c <USBD_GetDescriptor>
          break;
 8007c94:	e024      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fba1 	bl	80083e0 <USBD_SetAddress>
          break;
 8007c9e:	e01f      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fbe0 	bl	8008468 <USBD_SetConfig>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73fb      	strb	r3, [r7, #15]
          break;
 8007cac:	e018      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fc83 	bl	80085bc <USBD_GetConfig>
          break;
 8007cb6:	e013      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fcb4 	bl	8008628 <USBD_GetStatus>
          break;
 8007cc0:	e00e      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fce3 	bl	8008690 <USBD_SetFeature>
          break;
 8007cca:	e009      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fd07 	bl	80086e2 <USBD_ClrFeature>
          break;
 8007cd4:	e004      	b.n	8007ce0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fd5e 	bl	800879a <USBD_CtlError>
          break;
 8007cde:	bf00      	nop
      }
      break;
 8007ce0:	e004      	b.n	8007cec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fd58 	bl	800879a <USBD_CtlError>
      break;
 8007cea:	bf00      	nop
  }

  return ret;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop

08007cf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d0e:	2b40      	cmp	r3, #64	@ 0x40
 8007d10:	d005      	beq.n	8007d1e <USBD_StdItfReq+0x26>
 8007d12:	2b40      	cmp	r3, #64	@ 0x40
 8007d14:	d852      	bhi.n	8007dbc <USBD_StdItfReq+0xc4>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <USBD_StdItfReq+0x26>
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d14e      	bne.n	8007dbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d840      	bhi.n	8007dae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	889b      	ldrh	r3, [r3, #4]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d836      	bhi.n	8007da4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	889b      	ldrh	r3, [r3, #4]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff fedb 	bl	8007afa <USBD_CoreFindIF>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2bff      	cmp	r3, #255	@ 0xff
 8007d4c:	d01d      	beq.n	8007d8a <USBD_StdItfReq+0x92>
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11a      	bne.n	8007d8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d54:	7bba      	ldrb	r2, [r7, #14]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32ae      	adds	r2, #174	@ 0xae
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00f      	beq.n	8007d84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d64:	7bba      	ldrb	r2, [r7, #14]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d6c:	7bba      	ldrb	r2, [r7, #14]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	32ae      	adds	r2, #174	@ 0xae
 8007d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d82:	e004      	b.n	8007d8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d84:	2303      	movs	r3, #3
 8007d86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d88:	e001      	b.n	8007d8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	88db      	ldrh	r3, [r3, #6]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d110      	bne.n	8007db8 <USBD_StdItfReq+0xc0>
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10d      	bne.n	8007db8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fdd3 	bl	8008948 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007da2:	e009      	b.n	8007db8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fcf7 	bl	800879a <USBD_CtlError>
          break;
 8007dac:	e004      	b.n	8007db8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fcf2 	bl	800879a <USBD_CtlError>
          break;
 8007db6:	e000      	b.n	8007dba <USBD_StdItfReq+0xc2>
          break;
 8007db8:	bf00      	nop
      }
      break;
 8007dba:	e004      	b.n	8007dc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fceb 	bl	800879a <USBD_CtlError>
      break;
 8007dc4:	bf00      	nop
  }

  return ret;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	889b      	ldrh	r3, [r3, #4]
 8007de2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dec:	2b40      	cmp	r3, #64	@ 0x40
 8007dee:	d007      	beq.n	8007e00 <USBD_StdEPReq+0x30>
 8007df0:	2b40      	cmp	r3, #64	@ 0x40
 8007df2:	f200 817f 	bhi.w	80080f4 <USBD_StdEPReq+0x324>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d02a      	beq.n	8007e50 <USBD_StdEPReq+0x80>
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	f040 817a 	bne.w	80080f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff fe85 	bl	8007b14 <USBD_CoreFindEP>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e0e:	7b7b      	ldrb	r3, [r7, #13]
 8007e10:	2bff      	cmp	r3, #255	@ 0xff
 8007e12:	f000 8174 	beq.w	80080fe <USBD_StdEPReq+0x32e>
 8007e16:	7b7b      	ldrb	r3, [r7, #13]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f040 8170 	bne.w	80080fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e1e:	7b7a      	ldrb	r2, [r7, #13]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e26:	7b7a      	ldrb	r2, [r7, #13]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	32ae      	adds	r2, #174	@ 0xae
 8007e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 8163 	beq.w	80080fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e38:	7b7a      	ldrb	r2, [r7, #13]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	32ae      	adds	r2, #174	@ 0xae
 8007e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e4e:	e156      	b.n	80080fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d008      	beq.n	8007e6a <USBD_StdEPReq+0x9a>
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	f300 8145 	bgt.w	80080e8 <USBD_StdEPReq+0x318>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 809b 	beq.w	8007f9a <USBD_StdEPReq+0x1ca>
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d03c      	beq.n	8007ee2 <USBD_StdEPReq+0x112>
 8007e68:	e13e      	b.n	80080e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d002      	beq.n	8007e7c <USBD_StdEPReq+0xac>
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d016      	beq.n	8007ea8 <USBD_StdEPReq+0xd8>
 8007e7a:	e02c      	b.n	8007ed6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00d      	beq.n	8007e9e <USBD_StdEPReq+0xce>
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b80      	cmp	r3, #128	@ 0x80
 8007e86:	d00a      	beq.n	8007e9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 f971 	bl	8009174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e92:	2180      	movs	r1, #128	@ 0x80
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 f96d 	bl	8009174 <USBD_LL_StallEP>
 8007e9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e9c:	e020      	b.n	8007ee0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fc7a 	bl	800879a <USBD_CtlError>
              break;
 8007ea6:	e01b      	b.n	8007ee0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	885b      	ldrh	r3, [r3, #2]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10e      	bne.n	8007ece <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00b      	beq.n	8007ece <USBD_StdEPReq+0xfe>
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	2b80      	cmp	r3, #128	@ 0x80
 8007eba:	d008      	beq.n	8007ece <USBD_StdEPReq+0xfe>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	88db      	ldrh	r3, [r3, #6]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 f953 	bl	8009174 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fd3a 	bl	8008948 <USBD_CtlSendStatus>

              break;
 8007ed4:	e004      	b.n	8007ee0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc5e 	bl	800879a <USBD_CtlError>
              break;
 8007ede:	bf00      	nop
          }
          break;
 8007ee0:	e107      	b.n	80080f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d002      	beq.n	8007ef4 <USBD_StdEPReq+0x124>
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d016      	beq.n	8007f20 <USBD_StdEPReq+0x150>
 8007ef2:	e04b      	b.n	8007f8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00d      	beq.n	8007f16 <USBD_StdEPReq+0x146>
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b80      	cmp	r3, #128	@ 0x80
 8007efe:	d00a      	beq.n	8007f16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f001 f935 	bl	8009174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f0a:	2180      	movs	r1, #128	@ 0x80
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 f931 	bl	8009174 <USBD_LL_StallEP>
 8007f12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f14:	e040      	b.n	8007f98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fc3e 	bl	800879a <USBD_CtlError>
              break;
 8007f1e:	e03b      	b.n	8007f98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	885b      	ldrh	r3, [r3, #2]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d136      	bne.n	8007f96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d004      	beq.n	8007f3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 f93b 	bl	80091b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fd03 	bl	8008948 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff fde4 	bl	8007b14 <USBD_CoreFindEP>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f50:	7b7b      	ldrb	r3, [r7, #13]
 8007f52:	2bff      	cmp	r3, #255	@ 0xff
 8007f54:	d01f      	beq.n	8007f96 <USBD_StdEPReq+0x1c6>
 8007f56:	7b7b      	ldrb	r3, [r7, #13]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d11c      	bne.n	8007f96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f5c:	7b7a      	ldrb	r2, [r7, #13]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f64:	7b7a      	ldrb	r2, [r7, #13]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	32ae      	adds	r2, #174	@ 0xae
 8007f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d010      	beq.n	8007f96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f74:	7b7a      	ldrb	r2, [r7, #13]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	32ae      	adds	r2, #174	@ 0xae
 8007f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f8a:	e004      	b.n	8007f96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fc03 	bl	800879a <USBD_CtlError>
              break;
 8007f94:	e000      	b.n	8007f98 <USBD_StdEPReq+0x1c8>
              break;
 8007f96:	bf00      	nop
          }
          break;
 8007f98:	e0ab      	b.n	80080f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d002      	beq.n	8007fac <USBD_StdEPReq+0x1dc>
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d032      	beq.n	8008010 <USBD_StdEPReq+0x240>
 8007faa:	e097      	b.n	80080dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <USBD_StdEPReq+0x1f2>
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b80      	cmp	r3, #128	@ 0x80
 8007fb6:	d004      	beq.n	8007fc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fbed 	bl	800879a <USBD_CtlError>
                break;
 8007fc0:	e091      	b.n	80080e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	da0b      	bge.n	8007fe2 <USBD_StdEPReq+0x212>
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	3310      	adds	r3, #16
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	3304      	adds	r3, #4
 8007fe0:	e00b      	b.n	8007ffa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2202      	movs	r2, #2
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fc43 	bl	8008894 <USBD_CtlSendData>
              break;
 800800e:	e06a      	b.n	80080e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008014:	2b00      	cmp	r3, #0
 8008016:	da11      	bge.n	800803c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	f003 020f 	and.w	r2, r3, #15
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	440b      	add	r3, r1
 800802a:	3324      	adds	r3, #36	@ 0x24
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d117      	bne.n	8008062 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fbb0 	bl	800879a <USBD_CtlError>
                  break;
 800803a:	e054      	b.n	80080e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	f003 020f 	and.w	r2, r3, #15
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fb9d 	bl	800879a <USBD_CtlError>
                  break;
 8008060:	e041      	b.n	80080e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008066:	2b00      	cmp	r3, #0
 8008068:	da0b      	bge.n	8008082 <USBD_StdEPReq+0x2b2>
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	3310      	adds	r3, #16
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	4413      	add	r3, r2
 800807e:	3304      	adds	r3, #4
 8008080:	e00b      	b.n	800809a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008088:	4613      	mov	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	4413      	add	r3, r2
 8008098:	3304      	adds	r3, #4
 800809a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <USBD_StdEPReq+0x2d8>
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b80      	cmp	r3, #128	@ 0x80
 80080a6:	d103      	bne.n	80080b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e00e      	b.n	80080ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 f89b 	bl	80091f0 <USBD_LL_IsStallEP>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2201      	movs	r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	e002      	b.n	80080ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2202      	movs	r2, #2
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fbdd 	bl	8008894 <USBD_CtlSendData>
              break;
 80080da:	e004      	b.n	80080e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fb5b 	bl	800879a <USBD_CtlError>
              break;
 80080e4:	bf00      	nop
          }
          break;
 80080e6:	e004      	b.n	80080f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fb55 	bl	800879a <USBD_CtlError>
          break;
 80080f0:	bf00      	nop
      }
      break;
 80080f2:	e005      	b.n	8008100 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fb4f 	bl	800879a <USBD_CtlError>
      break;
 80080fc:	e000      	b.n	8008100 <USBD_StdEPReq+0x330>
      break;
 80080fe:	bf00      	nop
  }

  return ret;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	885b      	ldrh	r3, [r3, #2]
 8008126:	0a1b      	lsrs	r3, r3, #8
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b01      	subs	r3, #1
 800812c:	2b06      	cmp	r3, #6
 800812e:	f200 8128 	bhi.w	8008382 <USBD_GetDescriptor+0x276>
 8008132:	a201      	add	r2, pc, #4	@ (adr r2, 8008138 <USBD_GetDescriptor+0x2c>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	08008155 	.word	0x08008155
 800813c:	0800816d 	.word	0x0800816d
 8008140:	080081ad 	.word	0x080081ad
 8008144:	08008383 	.word	0x08008383
 8008148:	08008383 	.word	0x08008383
 800814c:	08008323 	.word	0x08008323
 8008150:	0800834f 	.word	0x0800834f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	f107 0108 	add.w	r1, r7, #8
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	60f8      	str	r0, [r7, #12]
      break;
 800816a:	e112      	b.n	8008392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	7c1b      	ldrb	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10d      	bne.n	8008190 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800817a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817c:	f107 0208 	add.w	r2, r7, #8
 8008180:	4610      	mov	r0, r2
 8008182:	4798      	blx	r3
 8008184:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3301      	adds	r3, #1
 800818a:	2202      	movs	r2, #2
 800818c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800818e:	e100      	b.n	8008392 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008198:	f107 0208 	add.w	r2, r7, #8
 800819c:	4610      	mov	r0, r2
 800819e:	4798      	blx	r3
 80081a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	2202      	movs	r2, #2
 80081a8:	701a      	strb	r2, [r3, #0]
      break;
 80081aa:	e0f2      	b.n	8008392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	885b      	ldrh	r3, [r3, #2]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b05      	cmp	r3, #5
 80081b4:	f200 80ac 	bhi.w	8008310 <USBD_GetDescriptor+0x204>
 80081b8:	a201      	add	r2, pc, #4	@ (adr r2, 80081c0 <USBD_GetDescriptor+0xb4>)
 80081ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081be:	bf00      	nop
 80081c0:	080081d9 	.word	0x080081d9
 80081c4:	0800820d 	.word	0x0800820d
 80081c8:	08008241 	.word	0x08008241
 80081cc:	08008275 	.word	0x08008275
 80081d0:	080082a9 	.word	0x080082a9
 80081d4:	080082dd 	.word	0x080082dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7c12      	ldrb	r2, [r2, #16]
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fa:	e091      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 facb 	bl	800879a <USBD_CtlError>
            err++;
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	3301      	adds	r3, #1
 8008208:	72fb      	strb	r3, [r7, #11]
          break;
 800820a:	e089      	b.n	8008320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7c12      	ldrb	r2, [r2, #16]
 8008224:	f107 0108 	add.w	r1, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822e:	e077      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fab1 	bl	800879a <USBD_CtlError>
            err++;
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	3301      	adds	r3, #1
 800823c:	72fb      	strb	r3, [r7, #11]
          break;
 800823e:	e06f      	b.n	8008320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7c12      	ldrb	r2, [r2, #16]
 8008258:	f107 0108 	add.w	r1, r7, #8
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008262:	e05d      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa97 	bl	800879a <USBD_CtlError>
            err++;
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	3301      	adds	r3, #1
 8008270:	72fb      	strb	r3, [r7, #11]
          break;
 8008272:	e055      	b.n	8008320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	7c12      	ldrb	r2, [r2, #16]
 800828c:	f107 0108 	add.w	r1, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008296:	e043      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa7d 	bl	800879a <USBD_CtlError>
            err++;
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	3301      	adds	r3, #1
 80082a4:	72fb      	strb	r3, [r7, #11]
          break;
 80082a6:	e03b      	b.n	8008320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	7c12      	ldrb	r2, [r2, #16]
 80082c0:	f107 0108 	add.w	r1, r7, #8
 80082c4:	4610      	mov	r0, r2
 80082c6:	4798      	blx	r3
 80082c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ca:	e029      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa63 	bl	800879a <USBD_CtlError>
            err++;
 80082d4:	7afb      	ldrb	r3, [r7, #11]
 80082d6:	3301      	adds	r3, #1
 80082d8:	72fb      	strb	r3, [r7, #11]
          break;
 80082da:	e021      	b.n	8008320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	7c12      	ldrb	r2, [r2, #16]
 80082f4:	f107 0108 	add.w	r1, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fe:	e00f      	b.n	8008320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa49 	bl	800879a <USBD_CtlError>
            err++;
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	3301      	adds	r3, #1
 800830c:	72fb      	strb	r3, [r7, #11]
          break;
 800830e:	e007      	b.n	8008320 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa41 	bl	800879a <USBD_CtlError>
          err++;
 8008318:	7afb      	ldrb	r3, [r7, #11]
 800831a:	3301      	adds	r3, #1
 800831c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800831e:	bf00      	nop
      }
      break;
 8008320:	e037      	b.n	8008392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	7c1b      	ldrb	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d109      	bne.n	800833e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008332:	f107 0208 	add.w	r2, r7, #8
 8008336:	4610      	mov	r0, r2
 8008338:	4798      	blx	r3
 800833a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800833c:	e029      	b.n	8008392 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fa2a 	bl	800879a <USBD_CtlError>
        err++;
 8008346:	7afb      	ldrb	r3, [r7, #11]
 8008348:	3301      	adds	r3, #1
 800834a:	72fb      	strb	r3, [r7, #11]
      break;
 800834c:	e021      	b.n	8008392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	7c1b      	ldrb	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10d      	bne.n	8008372 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800835c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800835e:	f107 0208 	add.w	r2, r7, #8
 8008362:	4610      	mov	r0, r2
 8008364:	4798      	blx	r3
 8008366:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	2207      	movs	r2, #7
 800836e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008370:	e00f      	b.n	8008392 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa10 	bl	800879a <USBD_CtlError>
        err++;
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	3301      	adds	r3, #1
 800837e:	72fb      	strb	r3, [r7, #11]
      break;
 8008380:	e007      	b.n	8008392 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fa08 	bl	800879a <USBD_CtlError>
      err++;
 800838a:	7afb      	ldrb	r3, [r7, #11]
 800838c:	3301      	adds	r3, #1
 800838e:	72fb      	strb	r3, [r7, #11]
      break;
 8008390:	bf00      	nop
  }

  if (err != 0U)
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d11e      	bne.n	80083d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	88db      	ldrh	r3, [r3, #6]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d016      	beq.n	80083ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80083a0:	893b      	ldrh	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00e      	beq.n	80083c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	88da      	ldrh	r2, [r3, #6]
 80083aa:	893b      	ldrh	r3, [r7, #8]
 80083ac:	4293      	cmp	r3, r2
 80083ae:	bf28      	it	cs
 80083b0:	4613      	movcs	r3, r2
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083b6:	893b      	ldrh	r3, [r7, #8]
 80083b8:	461a      	mov	r2, r3
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fa69 	bl	8008894 <USBD_CtlSendData>
 80083c2:	e009      	b.n	80083d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f9e7 	bl	800879a <USBD_CtlError>
 80083cc:	e004      	b.n	80083d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 faba 	bl	8008948 <USBD_CtlSendStatus>
 80083d4:	e000      	b.n	80083d8 <USBD_GetDescriptor+0x2cc>
    return;
 80083d6:	bf00      	nop
  }
}
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop

080083e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	889b      	ldrh	r3, [r3, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d131      	bne.n	8008456 <USBD_SetAddress+0x76>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	88db      	ldrh	r3, [r3, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d12d      	bne.n	8008456 <USBD_SetAddress+0x76>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	885b      	ldrh	r3, [r3, #2]
 80083fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8008400:	d829      	bhi.n	8008456 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	885b      	ldrh	r3, [r3, #2]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800840c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b03      	cmp	r3, #3
 8008418:	d104      	bne.n	8008424 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f9bc 	bl	800879a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008422:	e01d      	b.n	8008460 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	7bfa      	ldrb	r2, [r7, #15]
 8008428:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 ff09 	bl	8009248 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa86 	bl	8008948 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844a:	e009      	b.n	8008460 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008454:	e004      	b.n	8008460 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f99e 	bl	800879a <USBD_CtlError>
  }
}
 800845e:	bf00      	nop
 8008460:	bf00      	nop
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	885b      	ldrh	r3, [r3, #2]
 800847a:	b2da      	uxtb	r2, r3
 800847c:	4b4e      	ldr	r3, [pc, #312]	@ (80085b8 <USBD_SetConfig+0x150>)
 800847e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008480:	4b4d      	ldr	r3, [pc, #308]	@ (80085b8 <USBD_SetConfig+0x150>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d905      	bls.n	8008494 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f985 	bl	800879a <USBD_CtlError>
    return USBD_FAIL;
 8008490:	2303      	movs	r3, #3
 8008492:	e08c      	b.n	80085ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d002      	beq.n	80084a6 <USBD_SetConfig+0x3e>
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d029      	beq.n	80084f8 <USBD_SetConfig+0x90>
 80084a4:	e075      	b.n	8008592 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084a6:	4b44      	ldr	r3, [pc, #272]	@ (80085b8 <USBD_SetConfig+0x150>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d020      	beq.n	80084f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80084ae:	4b42      	ldr	r3, [pc, #264]	@ (80085b8 <USBD_SetConfig+0x150>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084b8:	4b3f      	ldr	r3, [pc, #252]	@ (80085b8 <USBD_SetConfig+0x150>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fe ffe3 	bl	800748a <USBD_SetClassConfig>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d008      	beq.n	80084e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f962 	bl	800879a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2202      	movs	r2, #2
 80084da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084de:	e065      	b.n	80085ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fa31 	bl	8008948 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2203      	movs	r2, #3
 80084ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084ee:	e05d      	b.n	80085ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fa29 	bl	8008948 <USBD_CtlSendStatus>
      break;
 80084f6:	e059      	b.n	80085ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084f8:	4b2f      	ldr	r3, [pc, #188]	@ (80085b8 <USBD_SetConfig+0x150>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d112      	bne.n	8008526 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008508:	4b2b      	ldr	r3, [pc, #172]	@ (80085b8 <USBD_SetConfig+0x150>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008512:	4b29      	ldr	r3, [pc, #164]	@ (80085b8 <USBD_SetConfig+0x150>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7fe ffd2 	bl	80074c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa12 	bl	8008948 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008524:	e042      	b.n	80085ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008526:	4b24      	ldr	r3, [pc, #144]	@ (80085b8 <USBD_SetConfig+0x150>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d02a      	beq.n	800858a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	b2db      	uxtb	r3, r3
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7fe ffc0 	bl	80074c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008542:	4b1d      	ldr	r3, [pc, #116]	@ (80085b8 <USBD_SetConfig+0x150>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800854c:	4b1a      	ldr	r3, [pc, #104]	@ (80085b8 <USBD_SetConfig+0x150>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fe ff99 	bl	800748a <USBD_SetClassConfig>
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00f      	beq.n	8008582 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f918 	bl	800879a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7fe ffa5 	bl	80074c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008580:	e014      	b.n	80085ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f9e0 	bl	8008948 <USBD_CtlSendStatus>
      break;
 8008588:	e010      	b.n	80085ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f9dc 	bl	8008948 <USBD_CtlSendStatus>
      break;
 8008590:	e00c      	b.n	80085ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f900 	bl	800879a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800859a:	4b07      	ldr	r3, [pc, #28]	@ (80085b8 <USBD_SetConfig+0x150>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7fe ff8e 	bl	80074c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085a6:	2303      	movs	r3, #3
 80085a8:	73fb      	strb	r3, [r7, #15]
      break;
 80085aa:	bf00      	nop
  }

  return ret;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20000428 	.word	0x20000428

080085bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	88db      	ldrh	r3, [r3, #6]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d004      	beq.n	80085d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f8e2 	bl	800879a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085d6:	e023      	b.n	8008620 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	dc02      	bgt.n	80085ea <USBD_GetConfig+0x2e>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dc03      	bgt.n	80085f0 <USBD_GetConfig+0x34>
 80085e8:	e015      	b.n	8008616 <USBD_GetConfig+0x5a>
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d00b      	beq.n	8008606 <USBD_GetConfig+0x4a>
 80085ee:	e012      	b.n	8008616 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3308      	adds	r3, #8
 80085fa:	2201      	movs	r2, #1
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f948 	bl	8008894 <USBD_CtlSendData>
        break;
 8008604:	e00c      	b.n	8008620 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3304      	adds	r3, #4
 800860a:	2201      	movs	r2, #1
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f940 	bl	8008894 <USBD_CtlSendData>
        break;
 8008614:	e004      	b.n	8008620 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f8be 	bl	800879a <USBD_CtlError>
        break;
 800861e:	bf00      	nop
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008638:	b2db      	uxtb	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	2b02      	cmp	r3, #2
 800863e:	d81e      	bhi.n	800867e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	88db      	ldrh	r3, [r3, #6]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d004      	beq.n	8008652 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f8a5 	bl	800879a <USBD_CtlError>
        break;
 8008650:	e01a      	b.n	8008688 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f043 0202 	orr.w	r2, r3, #2
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	330c      	adds	r3, #12
 8008672:	2202      	movs	r2, #2
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f90c 	bl	8008894 <USBD_CtlSendData>
      break;
 800867c:	e004      	b.n	8008688 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f88a 	bl	800879a <USBD_CtlError>
      break;
 8008686:	bf00      	nop
  }
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	885b      	ldrh	r3, [r3, #2]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d107      	bne.n	80086b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f94c 	bl	8008948 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80086b0:	e013      	b.n	80086da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	885b      	ldrh	r3, [r3, #2]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d10b      	bne.n	80086d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	889b      	ldrh	r3, [r3, #4]
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f93c 	bl	8008948 <USBD_CtlSendStatus>
}
 80086d0:	e003      	b.n	80086da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f860 	bl	800879a <USBD_CtlError>
}
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d80b      	bhi.n	8008712 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	885b      	ldrh	r3, [r3, #2]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d10c      	bne.n	800871c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f91c 	bl	8008948 <USBD_CtlSendStatus>
      }
      break;
 8008710:	e004      	b.n	800871c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f840 	bl	800879a <USBD_CtlError>
      break;
 800871a:	e000      	b.n	800871e <USBD_ClrFeature+0x3c>
      break;
 800871c:	bf00      	nop
  }
}
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	781a      	ldrb	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3301      	adds	r3, #1
 8008740:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	781a      	ldrb	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff fa40 	bl	8007bd6 <SWAPBYTE>
 8008756:	4603      	mov	r3, r0
 8008758:	461a      	mov	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3301      	adds	r3, #1
 8008762:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff fa33 	bl	8007bd6 <SWAPBYTE>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7ff fa26 	bl	8007bd6 <SWAPBYTE>
 800878a:	4603      	mov	r3, r0
 800878c:	461a      	mov	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	80da      	strh	r2, [r3, #6]
}
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087a4:	2180      	movs	r1, #128	@ 0x80
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fce4 	bl	8009174 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087ac:	2100      	movs	r1, #0
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fce0 	bl	8009174 <USBD_LL_StallEP>
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d042      	beq.n	8008858 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80087d6:	6938      	ldr	r0, [r7, #16]
 80087d8:	f000 f842 	bl	8008860 <USBD_GetLen>
 80087dc:	4603      	mov	r3, r0
 80087de:	3301      	adds	r3, #1
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087e6:	d808      	bhi.n	80087fa <USBD_GetString+0x3e>
 80087e8:	6938      	ldr	r0, [r7, #16]
 80087ea:	f000 f839 	bl	8008860 <USBD_GetLen>
 80087ee:	4603      	mov	r3, r0
 80087f0:	3301      	adds	r3, #1
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	e001      	b.n	80087fe <USBD_GetString+0x42>
 80087fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	4413      	add	r3, r2
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	7812      	ldrb	r2, [r2, #0]
 800880c:	701a      	strb	r2, [r3, #0]
  idx++;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	3301      	adds	r3, #1
 8008812:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	4413      	add	r3, r2
 800881a:	2203      	movs	r2, #3
 800881c:	701a      	strb	r2, [r3, #0]
  idx++;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	3301      	adds	r3, #1
 8008822:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008824:	e013      	b.n	800884e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	4413      	add	r3, r2
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	7812      	ldrb	r2, [r2, #0]
 8008830:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	3301      	adds	r3, #1
 8008836:	613b      	str	r3, [r7, #16]
    idx++;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	3301      	adds	r3, #1
 800883c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	4413      	add	r3, r2
 8008844:	2200      	movs	r2, #0
 8008846:	701a      	strb	r2, [r3, #0]
    idx++;
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	3301      	adds	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e7      	bne.n	8008826 <USBD_GetString+0x6a>
 8008856:	e000      	b.n	800885a <USBD_GetString+0x9e>
    return;
 8008858:	bf00      	nop
  }
}
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008870:	e005      	b.n	800887e <USBD_GetLen+0x1e>
  {
    len++;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	3301      	adds	r3, #1
 8008876:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	3301      	adds	r3, #1
 800887c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1f5      	bne.n	8008872 <USBD_GetLen+0x12>
  }

  return len;
 8008886:	7bfb      	ldrb	r3, [r7, #15]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 fce3 	bl	8009286 <USBD_LL_Transmit>

  return USBD_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	2100      	movs	r1, #0
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fcd2 	bl	8009286 <USBD_LL_Transmit>

  return USBD_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2203      	movs	r2, #3
 80088fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	2100      	movs	r1, #0
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 fcd6 	bl	80092c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	2100      	movs	r1, #0
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 fcc5 	bl	80092c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2204      	movs	r2, #4
 8008954:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008958:	2300      	movs	r3, #0
 800895a:	2200      	movs	r2, #0
 800895c:	2100      	movs	r1, #0
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fc91 	bl	8009286 <USBD_LL_Transmit>

  return USBD_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2205      	movs	r2, #5
 800897a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800897e:	2300      	movs	r3, #0
 8008980:	2200      	movs	r2, #0
 8008982:	2100      	movs	r1, #0
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fc9f 	bl	80092c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008998:	2200      	movs	r2, #0
 800899a:	4912      	ldr	r1, [pc, #72]	@ (80089e4 <MX_USB_DEVICE_Init+0x50>)
 800899c:	4812      	ldr	r0, [pc, #72]	@ (80089e8 <MX_USB_DEVICE_Init+0x54>)
 800899e:	f7fe fcf7 	bl	8007390 <USBD_Init>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089a8:	f7f8 fcc4 	bl	8001334 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089ac:	490f      	ldr	r1, [pc, #60]	@ (80089ec <MX_USB_DEVICE_Init+0x58>)
 80089ae:	480e      	ldr	r0, [pc, #56]	@ (80089e8 <MX_USB_DEVICE_Init+0x54>)
 80089b0:	f7fe fd1e 	bl	80073f0 <USBD_RegisterClass>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089ba:	f7f8 fcbb 	bl	8001334 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089be:	490c      	ldr	r1, [pc, #48]	@ (80089f0 <MX_USB_DEVICE_Init+0x5c>)
 80089c0:	4809      	ldr	r0, [pc, #36]	@ (80089e8 <MX_USB_DEVICE_Init+0x54>)
 80089c2:	f7fe fc15 	bl	80071f0 <USBD_CDC_RegisterInterface>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089cc:	f7f8 fcb2 	bl	8001334 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089d0:	4805      	ldr	r0, [pc, #20]	@ (80089e8 <MX_USB_DEVICE_Init+0x54>)
 80089d2:	f7fe fd43 	bl	800745c <USBD_Start>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089dc:	f7f8 fcaa 	bl	8001334 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089e0:	bf00      	nop
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200000ac 	.word	0x200000ac
 80089e8:	2000042c 	.word	0x2000042c
 80089ec:	20000018 	.word	0x20000018
 80089f0:	20000098 	.word	0x20000098

080089f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089f8:	2200      	movs	r2, #0
 80089fa:	4905      	ldr	r1, [pc, #20]	@ (8008a10 <CDC_Init_FS+0x1c>)
 80089fc:	4805      	ldr	r0, [pc, #20]	@ (8008a14 <CDC_Init_FS+0x20>)
 80089fe:	f7fe fc11 	bl	8007224 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a02:	4905      	ldr	r1, [pc, #20]	@ (8008a18 <CDC_Init_FS+0x24>)
 8008a04:	4803      	ldr	r0, [pc, #12]	@ (8008a14 <CDC_Init_FS+0x20>)
 8008a06:	f7fe fc2f 	bl	8007268 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	20000f08 	.word	0x20000f08
 8008a14:	2000042c 	.word	0x2000042c
 8008a18:	20000708 	.word	0x20000708

08008a1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	6039      	str	r1, [r7, #0]
 8008a36:	71fb      	strb	r3, [r7, #7]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	2b23      	cmp	r3, #35	@ 0x23
 8008a40:	d84a      	bhi.n	8008ad8 <CDC_Control_FS+0xac>
 8008a42:	a201      	add	r2, pc, #4	@ (adr r2, 8008a48 <CDC_Control_FS+0x1c>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008ad9 	.word	0x08008ad9
 8008a4c:	08008ad9 	.word	0x08008ad9
 8008a50:	08008ad9 	.word	0x08008ad9
 8008a54:	08008ad9 	.word	0x08008ad9
 8008a58:	08008ad9 	.word	0x08008ad9
 8008a5c:	08008ad9 	.word	0x08008ad9
 8008a60:	08008ad9 	.word	0x08008ad9
 8008a64:	08008ad9 	.word	0x08008ad9
 8008a68:	08008ad9 	.word	0x08008ad9
 8008a6c:	08008ad9 	.word	0x08008ad9
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008ad9 	.word	0x08008ad9
 8008a78:	08008ad9 	.word	0x08008ad9
 8008a7c:	08008ad9 	.word	0x08008ad9
 8008a80:	08008ad9 	.word	0x08008ad9
 8008a84:	08008ad9 	.word	0x08008ad9
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	08008ad9 	.word	0x08008ad9
 8008a90:	08008ad9 	.word	0x08008ad9
 8008a94:	08008ad9 	.word	0x08008ad9
 8008a98:	08008ad9 	.word	0x08008ad9
 8008a9c:	08008ad9 	.word	0x08008ad9
 8008aa0:	08008ad9 	.word	0x08008ad9
 8008aa4:	08008ad9 	.word	0x08008ad9
 8008aa8:	08008ad9 	.word	0x08008ad9
 8008aac:	08008ad9 	.word	0x08008ad9
 8008ab0:	08008ad9 	.word	0x08008ad9
 8008ab4:	08008ad9 	.word	0x08008ad9
 8008ab8:	08008ad9 	.word	0x08008ad9
 8008abc:	08008ad9 	.word	0x08008ad9
 8008ac0:	08008ad9 	.word	0x08008ad9
 8008ac4:	08008ad9 	.word	0x08008ad9
 8008ac8:	08008ad9 	.word	0x08008ad9
 8008acc:	08008ad9 	.word	0x08008ad9
 8008ad0:	08008ad9 	.word	0x08008ad9
 8008ad4:	08008ad9 	.word	0x08008ad9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ad8:	bf00      	nop
  }

  return (USBD_OK);
 8008ada:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	4805      	ldr	r0, [pc, #20]	@ (8008b0c <CDC_Receive_FS+0x24>)
 8008af6:	f7fe fbb7 	bl	8007268 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008afa:	4804      	ldr	r0, [pc, #16]	@ (8008b0c <CDC_Receive_FS+0x24>)
 8008afc:	f7fe fc12 	bl	8007324 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	2000042c 	.word	0x2000042c

08008b10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b20:	4b0d      	ldr	r3, [pc, #52]	@ (8008b58 <CDC_Transmit_FS+0x48>)
 8008b22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e00b      	b.n	8008b4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b36:	887b      	ldrh	r3, [r7, #2]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4806      	ldr	r0, [pc, #24]	@ (8008b58 <CDC_Transmit_FS+0x48>)
 8008b3e:	f7fe fb71 	bl	8007224 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b42:	4805      	ldr	r0, [pc, #20]	@ (8008b58 <CDC_Transmit_FS+0x48>)
 8008b44:	f7fe fbae 	bl	80072a4 <USBD_CDC_TransmitPacket>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	2000042c 	.word	0x2000042c

08008b5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	371c      	adds	r7, #28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
	...

08008b80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	6039      	str	r1, [r7, #0]
 8008b8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2212      	movs	r2, #18
 8008b90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b92:	4b03      	ldr	r3, [pc, #12]	@ (8008ba0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	200000c8 	.word	0x200000c8

08008ba4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4603      	mov	r3, r0
 8008bac:	6039      	str	r1, [r7, #0]
 8008bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2204      	movs	r2, #4
 8008bb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bb6:	4b03      	ldr	r3, [pc, #12]	@ (8008bc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	200000dc 	.word	0x200000dc

08008bc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d105      	bne.n	8008be6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	4907      	ldr	r1, [pc, #28]	@ (8008bfc <USBD_FS_ProductStrDescriptor+0x34>)
 8008bde:	4808      	ldr	r0, [pc, #32]	@ (8008c00 <USBD_FS_ProductStrDescriptor+0x38>)
 8008be0:	f7ff fdec 	bl	80087bc <USBD_GetString>
 8008be4:	e004      	b.n	8008bf0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	4904      	ldr	r1, [pc, #16]	@ (8008bfc <USBD_FS_ProductStrDescriptor+0x34>)
 8008bea:	4805      	ldr	r0, [pc, #20]	@ (8008c00 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bec:	f7ff fde6 	bl	80087bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bf0:	4b02      	ldr	r3, [pc, #8]	@ (8008bfc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20001708 	.word	0x20001708
 8008c00:	0800bfc8 	.word	0x0800bfc8

08008c04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	6039      	str	r1, [r7, #0]
 8008c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	4904      	ldr	r1, [pc, #16]	@ (8008c24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c14:	4804      	ldr	r0, [pc, #16]	@ (8008c28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c16:	f7ff fdd1 	bl	80087bc <USBD_GetString>
  return USBD_StrDesc;
 8008c1a:	4b02      	ldr	r3, [pc, #8]	@ (8008c24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	20001708 	.word	0x20001708
 8008c28:	0800bfe0 	.word	0x0800bfe0

08008c2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	221a      	movs	r2, #26
 8008c3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c3e:	f000 f843 	bl	8008cc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c42:	4b02      	ldr	r3, [pc, #8]	@ (8008c4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	200000e0 	.word	0x200000e0

08008c50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	6039      	str	r1, [r7, #0]
 8008c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d105      	bne.n	8008c6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	4907      	ldr	r1, [pc, #28]	@ (8008c84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c66:	4808      	ldr	r0, [pc, #32]	@ (8008c88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c68:	f7ff fda8 	bl	80087bc <USBD_GetString>
 8008c6c:	e004      	b.n	8008c78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	4904      	ldr	r1, [pc, #16]	@ (8008c84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c72:	4805      	ldr	r0, [pc, #20]	@ (8008c88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c74:	f7ff fda2 	bl	80087bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c78:	4b02      	ldr	r3, [pc, #8]	@ (8008c84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20001708 	.word	0x20001708
 8008c88:	0800bff4 	.word	0x0800bff4

08008c8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d105      	bne.n	8008caa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	4907      	ldr	r1, [pc, #28]	@ (8008cc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ca2:	4808      	ldr	r0, [pc, #32]	@ (8008cc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ca4:	f7ff fd8a 	bl	80087bc <USBD_GetString>
 8008ca8:	e004      	b.n	8008cb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4904      	ldr	r1, [pc, #16]	@ (8008cc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cae:	4805      	ldr	r0, [pc, #20]	@ (8008cc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cb0:	f7ff fd84 	bl	80087bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb4:	4b02      	ldr	r3, [pc, #8]	@ (8008cc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20001708 	.word	0x20001708
 8008cc4:	0800c000 	.word	0x0800c000

08008cc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cce:	4b0f      	ldr	r3, [pc, #60]	@ (8008d0c <Get_SerialNum+0x44>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d10 <Get_SerialNum+0x48>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cda:	4b0e      	ldr	r3, [pc, #56]	@ (8008d14 <Get_SerialNum+0x4c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d009      	beq.n	8008d02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cee:	2208      	movs	r2, #8
 8008cf0:	4909      	ldr	r1, [pc, #36]	@ (8008d18 <Get_SerialNum+0x50>)
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 f814 	bl	8008d20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008cf8:	2204      	movs	r2, #4
 8008cfa:	4908      	ldr	r1, [pc, #32]	@ (8008d1c <Get_SerialNum+0x54>)
 8008cfc:	68b8      	ldr	r0, [r7, #8]
 8008cfe:	f000 f80f 	bl	8008d20 <IntToUnicode>
  }
}
 8008d02:	bf00      	nop
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	1fff7a10 	.word	0x1fff7a10
 8008d10:	1fff7a14 	.word	0x1fff7a14
 8008d14:	1fff7a18 	.word	0x1fff7a18
 8008d18:	200000e2 	.word	0x200000e2
 8008d1c:	200000f2 	.word	0x200000f2

08008d20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]
 8008d36:	e027      	b.n	8008d88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	0f1b      	lsrs	r3, r3, #28
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	d80b      	bhi.n	8008d58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	0f1b      	lsrs	r3, r3, #28
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	440b      	add	r3, r1
 8008d50:	3230      	adds	r2, #48	@ 0x30
 8008d52:	b2d2      	uxtb	r2, r2
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	e00a      	b.n	8008d6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	0f1b      	lsrs	r3, r3, #28
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4619      	mov	r1, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	440b      	add	r3, r1
 8008d68:	3237      	adds	r2, #55	@ 0x37
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	011b      	lsls	r3, r3, #4
 8008d72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	3301      	adds	r3, #1
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	3301      	adds	r3, #1
 8008d86:	75fb      	strb	r3, [r7, #23]
 8008d88:	7dfa      	ldrb	r2, [r7, #23]
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d3d3      	bcc.n	8008d38 <IntToUnicode+0x18>
  }
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	371c      	adds	r7, #28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08a      	sub	sp, #40	@ 0x28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	609a      	str	r2, [r3, #8]
 8008db4:	60da      	str	r2, [r3, #12]
 8008db6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dc0:	d132      	bne.n	8008e28 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	613b      	str	r3, [r7, #16]
 8008dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8008e30 <HAL_PCD_MspInit+0x90>)
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dca:	4a19      	ldr	r2, [pc, #100]	@ (8008e30 <HAL_PCD_MspInit+0x90>)
 8008dcc:	f043 0301 	orr.w	r3, r3, #1
 8008dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dd2:	4b17      	ldr	r3, [pc, #92]	@ (8008e30 <HAL_PCD_MspInit+0x90>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	613b      	str	r3, [r7, #16]
 8008ddc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008dde:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de4:	2302      	movs	r3, #2
 8008de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dec:	2303      	movs	r3, #3
 8008dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008df0:	230a      	movs	r3, #10
 8008df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008df4:	f107 0314 	add.w	r3, r7, #20
 8008df8:	4619      	mov	r1, r3
 8008dfa:	480e      	ldr	r0, [pc, #56]	@ (8008e34 <HAL_PCD_MspInit+0x94>)
 8008dfc:	f7f8 ff38 	bl	8001c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e00:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <HAL_PCD_MspInit+0x90>)
 8008e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e04:	4a0a      	ldr	r2, [pc, #40]	@ (8008e30 <HAL_PCD_MspInit+0x90>)
 8008e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e0a:	6353      	str	r3, [r2, #52]	@ 0x34
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	4b07      	ldr	r3, [pc, #28]	@ (8008e30 <HAL_PCD_MspInit+0x90>)
 8008e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e14:	4a06      	ldr	r2, [pc, #24]	@ (8008e30 <HAL_PCD_MspInit+0x90>)
 8008e16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e1c:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <HAL_PCD_MspInit+0x90>)
 8008e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e28:	bf00      	nop
 8008e2a:	3728      	adds	r7, #40	@ 0x28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40023800 	.word	0x40023800
 8008e34:	40020000 	.word	0x40020000

08008e38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4610      	mov	r0, r2
 8008e50:	f7fe fb51 	bl	80074f6 <USBD_LL_SetupStage>
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	4613      	mov	r3, r2
 8008e74:	00db      	lsls	r3, r3, #3
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	78fb      	ldrb	r3, [r7, #3]
 8008e84:	4619      	mov	r1, r3
 8008e86:	f7fe fb8b 	bl	80075a0 <USBD_LL_DataOutStage>
}
 8008e8a:	bf00      	nop
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008ea4:	78fa      	ldrb	r2, [r7, #3]
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	4413      	add	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	440b      	add	r3, r1
 8008eb2:	3320      	adds	r3, #32
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f7fe fc24 	bl	8007706 <USBD_LL_DataInStage>
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fd5e 	bl	8007996 <USBD_LL_SOF>
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008eea:	2301      	movs	r3, #1
 8008eec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	79db      	ldrb	r3, [r3, #7]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d102      	bne.n	8008efc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]
 8008efa:	e008      	b.n	8008f0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	79db      	ldrb	r3, [r3, #7]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d102      	bne.n	8008f0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f04:	2301      	movs	r3, #1
 8008f06:	73fb      	strb	r3, [r7, #15]
 8008f08:	e001      	b.n	8008f0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f0a:	f7f8 fa13 	bl	8001334 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f14:	7bfa      	ldrb	r2, [r7, #15]
 8008f16:	4611      	mov	r1, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe fcf8 	bl	800790e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe fca0 	bl	800786a <USBD_LL_Reset>
}
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fcf3 	bl	800792e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6812      	ldr	r2, [r2, #0]
 8008f56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f5a:	f043 0301 	orr.w	r3, r3, #1
 8008f5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7adb      	ldrb	r3, [r3, #11]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f68:	4b04      	ldr	r3, [pc, #16]	@ (8008f7c <HAL_PCD_SuspendCallback+0x48>)
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	4a03      	ldr	r2, [pc, #12]	@ (8008f7c <HAL_PCD_SuspendCallback+0x48>)
 8008f6e:	f043 0306 	orr.w	r3, r3, #6
 8008f72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	e000ed00 	.word	0xe000ed00

08008f80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe fce9 	bl	8007966 <USBD_LL_Resume>
}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe fd41 	bl	8007a3a <USBD_LL_IsoOUTIncomplete>
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fcfd 	bl	80079d6 <USBD_LL_IsoINIncomplete>
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe fd53 	bl	8007a9e <USBD_LL_DevConnected>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fd50 	bl	8007ab4 <USBD_LL_DevDisconnected>
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d13c      	bne.n	80090a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800902c:	4a20      	ldr	r2, [pc, #128]	@ (80090b0 <USBD_LL_Init+0x94>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a1e      	ldr	r2, [pc, #120]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009038:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800903c:	4b1c      	ldr	r3, [pc, #112]	@ (80090b0 <USBD_LL_Init+0x94>)
 800903e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009042:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009044:	4b1a      	ldr	r3, [pc, #104]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009046:	2204      	movs	r2, #4
 8009048:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800904a:	4b19      	ldr	r3, [pc, #100]	@ (80090b0 <USBD_LL_Init+0x94>)
 800904c:	2202      	movs	r2, #2
 800904e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009050:	4b17      	ldr	r3, [pc, #92]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009052:	2200      	movs	r2, #0
 8009054:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009056:	4b16      	ldr	r3, [pc, #88]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009058:	2202      	movs	r2, #2
 800905a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800905c:	4b14      	ldr	r3, [pc, #80]	@ (80090b0 <USBD_LL_Init+0x94>)
 800905e:	2200      	movs	r2, #0
 8009060:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009062:	4b13      	ldr	r3, [pc, #76]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009064:	2200      	movs	r2, #0
 8009066:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009068:	4b11      	ldr	r3, [pc, #68]	@ (80090b0 <USBD_LL_Init+0x94>)
 800906a:	2200      	movs	r2, #0
 800906c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800906e:	4b10      	ldr	r3, [pc, #64]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009070:	2200      	movs	r2, #0
 8009072:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009074:	4b0e      	ldr	r3, [pc, #56]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009076:	2200      	movs	r2, #0
 8009078:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800907a:	480d      	ldr	r0, [pc, #52]	@ (80090b0 <USBD_LL_Init+0x94>)
 800907c:	f7f8 ff7c 	bl	8001f78 <HAL_PCD_Init>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009086:	f7f8 f955 	bl	8001334 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800908a:	2180      	movs	r1, #128	@ 0x80
 800908c:	4808      	ldr	r0, [pc, #32]	@ (80090b0 <USBD_LL_Init+0x94>)
 800908e:	f7fa f9a8 	bl	80033e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009092:	2240      	movs	r2, #64	@ 0x40
 8009094:	2100      	movs	r1, #0
 8009096:	4806      	ldr	r0, [pc, #24]	@ (80090b0 <USBD_LL_Init+0x94>)
 8009098:	f7fa f95c 	bl	8003354 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800909c:	2280      	movs	r2, #128	@ 0x80
 800909e:	2101      	movs	r1, #1
 80090a0:	4803      	ldr	r0, [pc, #12]	@ (80090b0 <USBD_LL_Init+0x94>)
 80090a2:	f7fa f957 	bl	8003354 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20001908 	.word	0x20001908

080090b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7f9 f863 	bl	8002196 <HAL_PCD_Start>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f942 	bl	8009360 <USBD_Get_USB_Status>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	461a      	mov	r2, r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	70fb      	strb	r3, [r7, #3]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70bb      	strb	r3, [r7, #2]
 8009100:	4613      	mov	r3, r2
 8009102:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009112:	78bb      	ldrb	r3, [r7, #2]
 8009114:	883a      	ldrh	r2, [r7, #0]
 8009116:	78f9      	ldrb	r1, [r7, #3]
 8009118:	f7f9 fd37 	bl	8002b8a <HAL_PCD_EP_Open>
 800911c:	4603      	mov	r3, r0
 800911e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	4618      	mov	r0, r3
 8009124:	f000 f91c 	bl	8009360 <USBD_Get_USB_Status>
 8009128:	4603      	mov	r3, r0
 800912a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800912c:	7bbb      	ldrb	r3, [r7, #14]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009150:	78fa      	ldrb	r2, [r7, #3]
 8009152:	4611      	mov	r1, r2
 8009154:	4618      	mov	r0, r3
 8009156:	f7f9 fd82 	bl	8002c5e <HAL_PCD_EP_Close>
 800915a:	4603      	mov	r3, r0
 800915c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	4618      	mov	r0, r3
 8009162:	f000 f8fd 	bl	8009360 <USBD_Get_USB_Status>
 8009166:	4603      	mov	r3, r0
 8009168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800916a:	7bbb      	ldrb	r3, [r7, #14]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800918e:	78fa      	ldrb	r2, [r7, #3]
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f7f9 fe3a 	bl	8002e0c <HAL_PCD_EP_SetStall>
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 f8de 	bl	8009360 <USBD_Get_USB_Status>
 80091a4:	4603      	mov	r3, r0
 80091a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091cc:	78fa      	ldrb	r2, [r7, #3]
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7f9 fe7e 	bl	8002ed2 <HAL_PCD_EP_ClrStall>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f8bf 	bl	8009360 <USBD_Get_USB_Status>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009202:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009208:	2b00      	cmp	r3, #0
 800920a:	da0b      	bge.n	8009224 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009212:	68f9      	ldr	r1, [r7, #12]
 8009214:	4613      	mov	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	4413      	add	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	440b      	add	r3, r1
 800921e:	3316      	adds	r3, #22
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	e00b      	b.n	800923c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800922a:	68f9      	ldr	r1, [r7, #12]
 800922c:	4613      	mov	r3, r2
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	4413      	add	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	440b      	add	r3, r1
 8009236:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800923a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	4611      	mov	r1, r2
 8009266:	4618      	mov	r0, r3
 8009268:	f7f9 fc6b 	bl	8002b42 <HAL_PCD_SetAddress>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 f874 	bl	8009360 <USBD_Get_USB_Status>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800927c:	7bbb      	ldrb	r3, [r7, #14]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	60f8      	str	r0, [r7, #12]
 800928e:	607a      	str	r2, [r7, #4]
 8009290:	603b      	str	r3, [r7, #0]
 8009292:	460b      	mov	r3, r1
 8009294:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80092a4:	7af9      	ldrb	r1, [r7, #11]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	f7f9 fd75 	bl	8002d98 <HAL_PCD_EP_Transmit>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 f853 	bl	8009360 <USBD_Get_USB_Status>
 80092ba:	4603      	mov	r3, r0
 80092bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092be:	7dbb      	ldrb	r3, [r7, #22]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	607a      	str	r2, [r7, #4]
 80092d2:	603b      	str	r3, [r7, #0]
 80092d4:	460b      	mov	r3, r1
 80092d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80092e6:	7af9      	ldrb	r1, [r7, #11]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	f7f9 fd01 	bl	8002cf2 <HAL_PCD_EP_Receive>
 80092f0:	4603      	mov	r3, r0
 80092f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f832 	bl	8009360 <USBD_Get_USB_Status>
 80092fc:	4603      	mov	r3, r0
 80092fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009300:	7dbb      	ldrb	r3, [r7, #22]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800931c:	78fa      	ldrb	r2, [r7, #3]
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f7f9 fd21 	bl	8002d68 <HAL_PCD_EP_GetRxCount>
 8009326:	4603      	mov	r3, r0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009338:	4b03      	ldr	r3, [pc, #12]	@ (8009348 <USBD_static_malloc+0x18>)
}
 800933a:	4618      	mov	r0, r3
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	20001dec 	.word	0x20001dec

0800934c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	2b03      	cmp	r3, #3
 8009372:	d817      	bhi.n	80093a4 <USBD_Get_USB_Status+0x44>
 8009374:	a201      	add	r2, pc, #4	@ (adr r2, 800937c <USBD_Get_USB_Status+0x1c>)
 8009376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937a:	bf00      	nop
 800937c:	0800938d 	.word	0x0800938d
 8009380:	08009393 	.word	0x08009393
 8009384:	08009399 	.word	0x08009399
 8009388:	0800939f 	.word	0x0800939f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]
    break;
 8009390:	e00b      	b.n	80093aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009392:	2303      	movs	r3, #3
 8009394:	73fb      	strb	r3, [r7, #15]
    break;
 8009396:	e008      	b.n	80093aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009398:	2301      	movs	r3, #1
 800939a:	73fb      	strb	r3, [r7, #15]
    break;
 800939c:	e005      	b.n	80093aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800939e:	2303      	movs	r3, #3
 80093a0:	73fb      	strb	r3, [r7, #15]
    break;
 80093a2:	e002      	b.n	80093aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093a4:	2303      	movs	r3, #3
 80093a6:	73fb      	strb	r3, [r7, #15]
    break;
 80093a8:	bf00      	nop
  }
  return usb_status;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <sulp>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	4604      	mov	r4, r0
 80093bc:	460d      	mov	r5, r1
 80093be:	ec45 4b10 	vmov	d0, r4, r5
 80093c2:	4616      	mov	r6, r2
 80093c4:	f001 ff6c 	bl	800b2a0 <__ulp>
 80093c8:	ec51 0b10 	vmov	r0, r1, d0
 80093cc:	b17e      	cbz	r6, 80093ee <sulp+0x36>
 80093ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80093d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dd09      	ble.n	80093ee <sulp+0x36>
 80093da:	051b      	lsls	r3, r3, #20
 80093dc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80093e0:	2400      	movs	r4, #0
 80093e2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80093e6:	4622      	mov	r2, r4
 80093e8:	462b      	mov	r3, r5
 80093ea:	f7f7 f905 	bl	80005f8 <__aeabi_dmul>
 80093ee:	ec41 0b10 	vmov	d0, r0, r1
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	0000      	movs	r0, r0
	...

080093f8 <_strtod_l>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	b09f      	sub	sp, #124	@ 0x7c
 80093fe:	460c      	mov	r4, r1
 8009400:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009402:	2200      	movs	r2, #0
 8009404:	921a      	str	r2, [sp, #104]	@ 0x68
 8009406:	9005      	str	r0, [sp, #20]
 8009408:	f04f 0a00 	mov.w	sl, #0
 800940c:	f04f 0b00 	mov.w	fp, #0
 8009410:	460a      	mov	r2, r1
 8009412:	9219      	str	r2, [sp, #100]	@ 0x64
 8009414:	7811      	ldrb	r1, [r2, #0]
 8009416:	292b      	cmp	r1, #43	@ 0x2b
 8009418:	d04a      	beq.n	80094b0 <_strtod_l+0xb8>
 800941a:	d838      	bhi.n	800948e <_strtod_l+0x96>
 800941c:	290d      	cmp	r1, #13
 800941e:	d832      	bhi.n	8009486 <_strtod_l+0x8e>
 8009420:	2908      	cmp	r1, #8
 8009422:	d832      	bhi.n	800948a <_strtod_l+0x92>
 8009424:	2900      	cmp	r1, #0
 8009426:	d03b      	beq.n	80094a0 <_strtod_l+0xa8>
 8009428:	2200      	movs	r2, #0
 800942a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800942c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800942e:	782a      	ldrb	r2, [r5, #0]
 8009430:	2a30      	cmp	r2, #48	@ 0x30
 8009432:	f040 80b3 	bne.w	800959c <_strtod_l+0x1a4>
 8009436:	786a      	ldrb	r2, [r5, #1]
 8009438:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800943c:	2a58      	cmp	r2, #88	@ 0x58
 800943e:	d16e      	bne.n	800951e <_strtod_l+0x126>
 8009440:	9302      	str	r3, [sp, #8]
 8009442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	ab1a      	add	r3, sp, #104	@ 0x68
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	4a8e      	ldr	r2, [pc, #568]	@ (8009684 <_strtod_l+0x28c>)
 800944c:	9805      	ldr	r0, [sp, #20]
 800944e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009450:	a919      	add	r1, sp, #100	@ 0x64
 8009452:	f001 f81f 	bl	800a494 <__gethex>
 8009456:	f010 060f 	ands.w	r6, r0, #15
 800945a:	4604      	mov	r4, r0
 800945c:	d005      	beq.n	800946a <_strtod_l+0x72>
 800945e:	2e06      	cmp	r6, #6
 8009460:	d128      	bne.n	80094b4 <_strtod_l+0xbc>
 8009462:	3501      	adds	r5, #1
 8009464:	2300      	movs	r3, #0
 8009466:	9519      	str	r5, [sp, #100]	@ 0x64
 8009468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800946a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800946c:	2b00      	cmp	r3, #0
 800946e:	f040 858e 	bne.w	8009f8e <_strtod_l+0xb96>
 8009472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009474:	b1cb      	cbz	r3, 80094aa <_strtod_l+0xb2>
 8009476:	4652      	mov	r2, sl
 8009478:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800947c:	ec43 2b10 	vmov	d0, r2, r3
 8009480:	b01f      	add	sp, #124	@ 0x7c
 8009482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009486:	2920      	cmp	r1, #32
 8009488:	d1ce      	bne.n	8009428 <_strtod_l+0x30>
 800948a:	3201      	adds	r2, #1
 800948c:	e7c1      	b.n	8009412 <_strtod_l+0x1a>
 800948e:	292d      	cmp	r1, #45	@ 0x2d
 8009490:	d1ca      	bne.n	8009428 <_strtod_l+0x30>
 8009492:	2101      	movs	r1, #1
 8009494:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009496:	1c51      	adds	r1, r2, #1
 8009498:	9119      	str	r1, [sp, #100]	@ 0x64
 800949a:	7852      	ldrb	r2, [r2, #1]
 800949c:	2a00      	cmp	r2, #0
 800949e:	d1c5      	bne.n	800942c <_strtod_l+0x34>
 80094a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80094a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f040 8570 	bne.w	8009f8a <_strtod_l+0xb92>
 80094aa:	4652      	mov	r2, sl
 80094ac:	465b      	mov	r3, fp
 80094ae:	e7e5      	b.n	800947c <_strtod_l+0x84>
 80094b0:	2100      	movs	r1, #0
 80094b2:	e7ef      	b.n	8009494 <_strtod_l+0x9c>
 80094b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80094b6:	b13a      	cbz	r2, 80094c8 <_strtod_l+0xd0>
 80094b8:	2135      	movs	r1, #53	@ 0x35
 80094ba:	a81c      	add	r0, sp, #112	@ 0x70
 80094bc:	f001 ffea 	bl	800b494 <__copybits>
 80094c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094c2:	9805      	ldr	r0, [sp, #20]
 80094c4:	f001 fbb8 	bl	800ac38 <_Bfree>
 80094c8:	3e01      	subs	r6, #1
 80094ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80094cc:	2e04      	cmp	r6, #4
 80094ce:	d806      	bhi.n	80094de <_strtod_l+0xe6>
 80094d0:	e8df f006 	tbb	[pc, r6]
 80094d4:	201d0314 	.word	0x201d0314
 80094d8:	14          	.byte	0x14
 80094d9:	00          	.byte	0x00
 80094da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80094de:	05e1      	lsls	r1, r4, #23
 80094e0:	bf48      	it	mi
 80094e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80094e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094ea:	0d1b      	lsrs	r3, r3, #20
 80094ec:	051b      	lsls	r3, r3, #20
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1bb      	bne.n	800946a <_strtod_l+0x72>
 80094f2:	f000 fed7 	bl	800a2a4 <__errno>
 80094f6:	2322      	movs	r3, #34	@ 0x22
 80094f8:	6003      	str	r3, [r0, #0]
 80094fa:	e7b6      	b.n	800946a <_strtod_l+0x72>
 80094fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009500:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009504:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009508:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800950c:	e7e7      	b.n	80094de <_strtod_l+0xe6>
 800950e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800968c <_strtod_l+0x294>
 8009512:	e7e4      	b.n	80094de <_strtod_l+0xe6>
 8009514:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009518:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800951c:	e7df      	b.n	80094de <_strtod_l+0xe6>
 800951e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	9219      	str	r2, [sp, #100]	@ 0x64
 8009524:	785b      	ldrb	r3, [r3, #1]
 8009526:	2b30      	cmp	r3, #48	@ 0x30
 8009528:	d0f9      	beq.n	800951e <_strtod_l+0x126>
 800952a:	2b00      	cmp	r3, #0
 800952c:	d09d      	beq.n	800946a <_strtod_l+0x72>
 800952e:	2301      	movs	r3, #1
 8009530:	9309      	str	r3, [sp, #36]	@ 0x24
 8009532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009534:	930c      	str	r3, [sp, #48]	@ 0x30
 8009536:	2300      	movs	r3, #0
 8009538:	9308      	str	r3, [sp, #32]
 800953a:	930a      	str	r3, [sp, #40]	@ 0x28
 800953c:	461f      	mov	r7, r3
 800953e:	220a      	movs	r2, #10
 8009540:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009542:	7805      	ldrb	r5, [r0, #0]
 8009544:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009548:	b2d9      	uxtb	r1, r3
 800954a:	2909      	cmp	r1, #9
 800954c:	d928      	bls.n	80095a0 <_strtod_l+0x1a8>
 800954e:	494e      	ldr	r1, [pc, #312]	@ (8009688 <_strtod_l+0x290>)
 8009550:	2201      	movs	r2, #1
 8009552:	f000 fe4e 	bl	800a1f2 <strncmp>
 8009556:	2800      	cmp	r0, #0
 8009558:	d032      	beq.n	80095c0 <_strtod_l+0x1c8>
 800955a:	2000      	movs	r0, #0
 800955c:	462a      	mov	r2, r5
 800955e:	4681      	mov	r9, r0
 8009560:	463d      	mov	r5, r7
 8009562:	4603      	mov	r3, r0
 8009564:	2a65      	cmp	r2, #101	@ 0x65
 8009566:	d001      	beq.n	800956c <_strtod_l+0x174>
 8009568:	2a45      	cmp	r2, #69	@ 0x45
 800956a:	d114      	bne.n	8009596 <_strtod_l+0x19e>
 800956c:	b91d      	cbnz	r5, 8009576 <_strtod_l+0x17e>
 800956e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009570:	4302      	orrs	r2, r0
 8009572:	d095      	beq.n	80094a0 <_strtod_l+0xa8>
 8009574:	2500      	movs	r5, #0
 8009576:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009578:	1c62      	adds	r2, r4, #1
 800957a:	9219      	str	r2, [sp, #100]	@ 0x64
 800957c:	7862      	ldrb	r2, [r4, #1]
 800957e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009580:	d077      	beq.n	8009672 <_strtod_l+0x27a>
 8009582:	2a2d      	cmp	r2, #45	@ 0x2d
 8009584:	d07b      	beq.n	800967e <_strtod_l+0x286>
 8009586:	f04f 0c00 	mov.w	ip, #0
 800958a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800958e:	2909      	cmp	r1, #9
 8009590:	f240 8082 	bls.w	8009698 <_strtod_l+0x2a0>
 8009594:	9419      	str	r4, [sp, #100]	@ 0x64
 8009596:	f04f 0800 	mov.w	r8, #0
 800959a:	e0a2      	b.n	80096e2 <_strtod_l+0x2ea>
 800959c:	2300      	movs	r3, #0
 800959e:	e7c7      	b.n	8009530 <_strtod_l+0x138>
 80095a0:	2f08      	cmp	r7, #8
 80095a2:	bfd5      	itete	le
 80095a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80095a6:	9908      	ldrgt	r1, [sp, #32]
 80095a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80095ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 80095b0:	f100 0001 	add.w	r0, r0, #1
 80095b4:	bfd4      	ite	le
 80095b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80095b8:	9308      	strgt	r3, [sp, #32]
 80095ba:	3701      	adds	r7, #1
 80095bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80095be:	e7bf      	b.n	8009540 <_strtod_l+0x148>
 80095c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80095c6:	785a      	ldrb	r2, [r3, #1]
 80095c8:	b37f      	cbz	r7, 800962a <_strtod_l+0x232>
 80095ca:	4681      	mov	r9, r0
 80095cc:	463d      	mov	r5, r7
 80095ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80095d2:	2b09      	cmp	r3, #9
 80095d4:	d912      	bls.n	80095fc <_strtod_l+0x204>
 80095d6:	2301      	movs	r3, #1
 80095d8:	e7c4      	b.n	8009564 <_strtod_l+0x16c>
 80095da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	9219      	str	r2, [sp, #100]	@ 0x64
 80095e0:	785a      	ldrb	r2, [r3, #1]
 80095e2:	3001      	adds	r0, #1
 80095e4:	2a30      	cmp	r2, #48	@ 0x30
 80095e6:	d0f8      	beq.n	80095da <_strtod_l+0x1e2>
 80095e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80095ec:	2b08      	cmp	r3, #8
 80095ee:	f200 84d3 	bhi.w	8009f98 <_strtod_l+0xba0>
 80095f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80095f6:	4681      	mov	r9, r0
 80095f8:	2000      	movs	r0, #0
 80095fa:	4605      	mov	r5, r0
 80095fc:	3a30      	subs	r2, #48	@ 0x30
 80095fe:	f100 0301 	add.w	r3, r0, #1
 8009602:	d02a      	beq.n	800965a <_strtod_l+0x262>
 8009604:	4499      	add	r9, r3
 8009606:	eb00 0c05 	add.w	ip, r0, r5
 800960a:	462b      	mov	r3, r5
 800960c:	210a      	movs	r1, #10
 800960e:	4563      	cmp	r3, ip
 8009610:	d10d      	bne.n	800962e <_strtod_l+0x236>
 8009612:	1c69      	adds	r1, r5, #1
 8009614:	4401      	add	r1, r0
 8009616:	4428      	add	r0, r5
 8009618:	2808      	cmp	r0, #8
 800961a:	dc16      	bgt.n	800964a <_strtod_l+0x252>
 800961c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800961e:	230a      	movs	r3, #10
 8009620:	fb03 2300 	mla	r3, r3, r0, r2
 8009624:	930a      	str	r3, [sp, #40]	@ 0x28
 8009626:	2300      	movs	r3, #0
 8009628:	e018      	b.n	800965c <_strtod_l+0x264>
 800962a:	4638      	mov	r0, r7
 800962c:	e7da      	b.n	80095e4 <_strtod_l+0x1ec>
 800962e:	2b08      	cmp	r3, #8
 8009630:	f103 0301 	add.w	r3, r3, #1
 8009634:	dc03      	bgt.n	800963e <_strtod_l+0x246>
 8009636:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009638:	434e      	muls	r6, r1
 800963a:	960a      	str	r6, [sp, #40]	@ 0x28
 800963c:	e7e7      	b.n	800960e <_strtod_l+0x216>
 800963e:	2b10      	cmp	r3, #16
 8009640:	bfde      	ittt	le
 8009642:	9e08      	ldrle	r6, [sp, #32]
 8009644:	434e      	mulle	r6, r1
 8009646:	9608      	strle	r6, [sp, #32]
 8009648:	e7e1      	b.n	800960e <_strtod_l+0x216>
 800964a:	280f      	cmp	r0, #15
 800964c:	dceb      	bgt.n	8009626 <_strtod_l+0x22e>
 800964e:	9808      	ldr	r0, [sp, #32]
 8009650:	230a      	movs	r3, #10
 8009652:	fb03 2300 	mla	r3, r3, r0, r2
 8009656:	9308      	str	r3, [sp, #32]
 8009658:	e7e5      	b.n	8009626 <_strtod_l+0x22e>
 800965a:	4629      	mov	r1, r5
 800965c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800965e:	1c50      	adds	r0, r2, #1
 8009660:	9019      	str	r0, [sp, #100]	@ 0x64
 8009662:	7852      	ldrb	r2, [r2, #1]
 8009664:	4618      	mov	r0, r3
 8009666:	460d      	mov	r5, r1
 8009668:	e7b1      	b.n	80095ce <_strtod_l+0x1d6>
 800966a:	f04f 0900 	mov.w	r9, #0
 800966e:	2301      	movs	r3, #1
 8009670:	e77d      	b.n	800956e <_strtod_l+0x176>
 8009672:	f04f 0c00 	mov.w	ip, #0
 8009676:	1ca2      	adds	r2, r4, #2
 8009678:	9219      	str	r2, [sp, #100]	@ 0x64
 800967a:	78a2      	ldrb	r2, [r4, #2]
 800967c:	e785      	b.n	800958a <_strtod_l+0x192>
 800967e:	f04f 0c01 	mov.w	ip, #1
 8009682:	e7f8      	b.n	8009676 <_strtod_l+0x27e>
 8009684:	0800c04c 	.word	0x0800c04c
 8009688:	0800c028 	.word	0x0800c028
 800968c:	7ff00000 	.word	0x7ff00000
 8009690:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009692:	1c51      	adds	r1, r2, #1
 8009694:	9119      	str	r1, [sp, #100]	@ 0x64
 8009696:	7852      	ldrb	r2, [r2, #1]
 8009698:	2a30      	cmp	r2, #48	@ 0x30
 800969a:	d0f9      	beq.n	8009690 <_strtod_l+0x298>
 800969c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80096a0:	2908      	cmp	r1, #8
 80096a2:	f63f af78 	bhi.w	8009596 <_strtod_l+0x19e>
 80096a6:	3a30      	subs	r2, #48	@ 0x30
 80096a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80096aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80096ae:	f04f 080a 	mov.w	r8, #10
 80096b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096b4:	1c56      	adds	r6, r2, #1
 80096b6:	9619      	str	r6, [sp, #100]	@ 0x64
 80096b8:	7852      	ldrb	r2, [r2, #1]
 80096ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80096be:	f1be 0f09 	cmp.w	lr, #9
 80096c2:	d939      	bls.n	8009738 <_strtod_l+0x340>
 80096c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80096c6:	1a76      	subs	r6, r6, r1
 80096c8:	2e08      	cmp	r6, #8
 80096ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80096ce:	dc03      	bgt.n	80096d8 <_strtod_l+0x2e0>
 80096d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80096d2:	4588      	cmp	r8, r1
 80096d4:	bfa8      	it	ge
 80096d6:	4688      	movge	r8, r1
 80096d8:	f1bc 0f00 	cmp.w	ip, #0
 80096dc:	d001      	beq.n	80096e2 <_strtod_l+0x2ea>
 80096de:	f1c8 0800 	rsb	r8, r8, #0
 80096e2:	2d00      	cmp	r5, #0
 80096e4:	d14e      	bne.n	8009784 <_strtod_l+0x38c>
 80096e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096e8:	4308      	orrs	r0, r1
 80096ea:	f47f aebe 	bne.w	800946a <_strtod_l+0x72>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f47f aed6 	bne.w	80094a0 <_strtod_l+0xa8>
 80096f4:	2a69      	cmp	r2, #105	@ 0x69
 80096f6:	d028      	beq.n	800974a <_strtod_l+0x352>
 80096f8:	dc25      	bgt.n	8009746 <_strtod_l+0x34e>
 80096fa:	2a49      	cmp	r2, #73	@ 0x49
 80096fc:	d025      	beq.n	800974a <_strtod_l+0x352>
 80096fe:	2a4e      	cmp	r2, #78	@ 0x4e
 8009700:	f47f aece 	bne.w	80094a0 <_strtod_l+0xa8>
 8009704:	499b      	ldr	r1, [pc, #620]	@ (8009974 <_strtod_l+0x57c>)
 8009706:	a819      	add	r0, sp, #100	@ 0x64
 8009708:	f001 f8e6 	bl	800a8d8 <__match>
 800970c:	2800      	cmp	r0, #0
 800970e:	f43f aec7 	beq.w	80094a0 <_strtod_l+0xa8>
 8009712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b28      	cmp	r3, #40	@ 0x28
 8009718:	d12e      	bne.n	8009778 <_strtod_l+0x380>
 800971a:	4997      	ldr	r1, [pc, #604]	@ (8009978 <_strtod_l+0x580>)
 800971c:	aa1c      	add	r2, sp, #112	@ 0x70
 800971e:	a819      	add	r0, sp, #100	@ 0x64
 8009720:	f001 f8ee 	bl	800a900 <__hexnan>
 8009724:	2805      	cmp	r0, #5
 8009726:	d127      	bne.n	8009778 <_strtod_l+0x380>
 8009728:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800972a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800972e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009732:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009736:	e698      	b.n	800946a <_strtod_l+0x72>
 8009738:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800973a:	fb08 2101 	mla	r1, r8, r1, r2
 800973e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009742:	920e      	str	r2, [sp, #56]	@ 0x38
 8009744:	e7b5      	b.n	80096b2 <_strtod_l+0x2ba>
 8009746:	2a6e      	cmp	r2, #110	@ 0x6e
 8009748:	e7da      	b.n	8009700 <_strtod_l+0x308>
 800974a:	498c      	ldr	r1, [pc, #560]	@ (800997c <_strtod_l+0x584>)
 800974c:	a819      	add	r0, sp, #100	@ 0x64
 800974e:	f001 f8c3 	bl	800a8d8 <__match>
 8009752:	2800      	cmp	r0, #0
 8009754:	f43f aea4 	beq.w	80094a0 <_strtod_l+0xa8>
 8009758:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800975a:	4989      	ldr	r1, [pc, #548]	@ (8009980 <_strtod_l+0x588>)
 800975c:	3b01      	subs	r3, #1
 800975e:	a819      	add	r0, sp, #100	@ 0x64
 8009760:	9319      	str	r3, [sp, #100]	@ 0x64
 8009762:	f001 f8b9 	bl	800a8d8 <__match>
 8009766:	b910      	cbnz	r0, 800976e <_strtod_l+0x376>
 8009768:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800976a:	3301      	adds	r3, #1
 800976c:	9319      	str	r3, [sp, #100]	@ 0x64
 800976e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009990 <_strtod_l+0x598>
 8009772:	f04f 0a00 	mov.w	sl, #0
 8009776:	e678      	b.n	800946a <_strtod_l+0x72>
 8009778:	4882      	ldr	r0, [pc, #520]	@ (8009984 <_strtod_l+0x58c>)
 800977a:	f000 fdd1 	bl	800a320 <nan>
 800977e:	ec5b ab10 	vmov	sl, fp, d0
 8009782:	e672      	b.n	800946a <_strtod_l+0x72>
 8009784:	eba8 0309 	sub.w	r3, r8, r9
 8009788:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800978a:	9309      	str	r3, [sp, #36]	@ 0x24
 800978c:	2f00      	cmp	r7, #0
 800978e:	bf08      	it	eq
 8009790:	462f      	moveq	r7, r5
 8009792:	2d10      	cmp	r5, #16
 8009794:	462c      	mov	r4, r5
 8009796:	bfa8      	it	ge
 8009798:	2410      	movge	r4, #16
 800979a:	f7f6 feb3 	bl	8000504 <__aeabi_ui2d>
 800979e:	2d09      	cmp	r5, #9
 80097a0:	4682      	mov	sl, r0
 80097a2:	468b      	mov	fp, r1
 80097a4:	dc13      	bgt.n	80097ce <_strtod_l+0x3d6>
 80097a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f43f ae5e 	beq.w	800946a <_strtod_l+0x72>
 80097ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b0:	dd78      	ble.n	80098a4 <_strtod_l+0x4ac>
 80097b2:	2b16      	cmp	r3, #22
 80097b4:	dc5f      	bgt.n	8009876 <_strtod_l+0x47e>
 80097b6:	4974      	ldr	r1, [pc, #464]	@ (8009988 <_strtod_l+0x590>)
 80097b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c0:	4652      	mov	r2, sl
 80097c2:	465b      	mov	r3, fp
 80097c4:	f7f6 ff18 	bl	80005f8 <__aeabi_dmul>
 80097c8:	4682      	mov	sl, r0
 80097ca:	468b      	mov	fp, r1
 80097cc:	e64d      	b.n	800946a <_strtod_l+0x72>
 80097ce:	4b6e      	ldr	r3, [pc, #440]	@ (8009988 <_strtod_l+0x590>)
 80097d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80097d8:	f7f6 ff0e 	bl	80005f8 <__aeabi_dmul>
 80097dc:	4682      	mov	sl, r0
 80097de:	9808      	ldr	r0, [sp, #32]
 80097e0:	468b      	mov	fp, r1
 80097e2:	f7f6 fe8f 	bl	8000504 <__aeabi_ui2d>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4650      	mov	r0, sl
 80097ec:	4659      	mov	r1, fp
 80097ee:	f7f6 fd4d 	bl	800028c <__adddf3>
 80097f2:	2d0f      	cmp	r5, #15
 80097f4:	4682      	mov	sl, r0
 80097f6:	468b      	mov	fp, r1
 80097f8:	ddd5      	ble.n	80097a6 <_strtod_l+0x3ae>
 80097fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097fc:	1b2c      	subs	r4, r5, r4
 80097fe:	441c      	add	r4, r3
 8009800:	2c00      	cmp	r4, #0
 8009802:	f340 8096 	ble.w	8009932 <_strtod_l+0x53a>
 8009806:	f014 030f 	ands.w	r3, r4, #15
 800980a:	d00a      	beq.n	8009822 <_strtod_l+0x42a>
 800980c:	495e      	ldr	r1, [pc, #376]	@ (8009988 <_strtod_l+0x590>)
 800980e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009812:	4652      	mov	r2, sl
 8009814:	465b      	mov	r3, fp
 8009816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800981a:	f7f6 feed 	bl	80005f8 <__aeabi_dmul>
 800981e:	4682      	mov	sl, r0
 8009820:	468b      	mov	fp, r1
 8009822:	f034 040f 	bics.w	r4, r4, #15
 8009826:	d073      	beq.n	8009910 <_strtod_l+0x518>
 8009828:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800982c:	dd48      	ble.n	80098c0 <_strtod_l+0x4c8>
 800982e:	2400      	movs	r4, #0
 8009830:	46a0      	mov	r8, r4
 8009832:	940a      	str	r4, [sp, #40]	@ 0x28
 8009834:	46a1      	mov	r9, r4
 8009836:	9a05      	ldr	r2, [sp, #20]
 8009838:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009990 <_strtod_l+0x598>
 800983c:	2322      	movs	r3, #34	@ 0x22
 800983e:	6013      	str	r3, [r2, #0]
 8009840:	f04f 0a00 	mov.w	sl, #0
 8009844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	f43f ae0f 	beq.w	800946a <_strtod_l+0x72>
 800984c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800984e:	9805      	ldr	r0, [sp, #20]
 8009850:	f001 f9f2 	bl	800ac38 <_Bfree>
 8009854:	9805      	ldr	r0, [sp, #20]
 8009856:	4649      	mov	r1, r9
 8009858:	f001 f9ee 	bl	800ac38 <_Bfree>
 800985c:	9805      	ldr	r0, [sp, #20]
 800985e:	4641      	mov	r1, r8
 8009860:	f001 f9ea 	bl	800ac38 <_Bfree>
 8009864:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009866:	9805      	ldr	r0, [sp, #20]
 8009868:	f001 f9e6 	bl	800ac38 <_Bfree>
 800986c:	9805      	ldr	r0, [sp, #20]
 800986e:	4621      	mov	r1, r4
 8009870:	f001 f9e2 	bl	800ac38 <_Bfree>
 8009874:	e5f9      	b.n	800946a <_strtod_l+0x72>
 8009876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009878:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800987c:	4293      	cmp	r3, r2
 800987e:	dbbc      	blt.n	80097fa <_strtod_l+0x402>
 8009880:	4c41      	ldr	r4, [pc, #260]	@ (8009988 <_strtod_l+0x590>)
 8009882:	f1c5 050f 	rsb	r5, r5, #15
 8009886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800988a:	4652      	mov	r2, sl
 800988c:	465b      	mov	r3, fp
 800988e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009892:	f7f6 feb1 	bl	80005f8 <__aeabi_dmul>
 8009896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009898:	1b5d      	subs	r5, r3, r5
 800989a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800989e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80098a2:	e78f      	b.n	80097c4 <_strtod_l+0x3cc>
 80098a4:	3316      	adds	r3, #22
 80098a6:	dba8      	blt.n	80097fa <_strtod_l+0x402>
 80098a8:	4b37      	ldr	r3, [pc, #220]	@ (8009988 <_strtod_l+0x590>)
 80098aa:	eba9 0808 	sub.w	r8, r9, r8
 80098ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80098b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80098b6:	4650      	mov	r0, sl
 80098b8:	4659      	mov	r1, fp
 80098ba:	f7f6 ffc7 	bl	800084c <__aeabi_ddiv>
 80098be:	e783      	b.n	80097c8 <_strtod_l+0x3d0>
 80098c0:	4b32      	ldr	r3, [pc, #200]	@ (800998c <_strtod_l+0x594>)
 80098c2:	9308      	str	r3, [sp, #32]
 80098c4:	2300      	movs	r3, #0
 80098c6:	1124      	asrs	r4, r4, #4
 80098c8:	4650      	mov	r0, sl
 80098ca:	4659      	mov	r1, fp
 80098cc:	461e      	mov	r6, r3
 80098ce:	2c01      	cmp	r4, #1
 80098d0:	dc21      	bgt.n	8009916 <_strtod_l+0x51e>
 80098d2:	b10b      	cbz	r3, 80098d8 <_strtod_l+0x4e0>
 80098d4:	4682      	mov	sl, r0
 80098d6:	468b      	mov	fp, r1
 80098d8:	492c      	ldr	r1, [pc, #176]	@ (800998c <_strtod_l+0x594>)
 80098da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80098de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80098e2:	4652      	mov	r2, sl
 80098e4:	465b      	mov	r3, fp
 80098e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ea:	f7f6 fe85 	bl	80005f8 <__aeabi_dmul>
 80098ee:	4b28      	ldr	r3, [pc, #160]	@ (8009990 <_strtod_l+0x598>)
 80098f0:	460a      	mov	r2, r1
 80098f2:	400b      	ands	r3, r1
 80098f4:	4927      	ldr	r1, [pc, #156]	@ (8009994 <_strtod_l+0x59c>)
 80098f6:	428b      	cmp	r3, r1
 80098f8:	4682      	mov	sl, r0
 80098fa:	d898      	bhi.n	800982e <_strtod_l+0x436>
 80098fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009900:	428b      	cmp	r3, r1
 8009902:	bf86      	itte	hi
 8009904:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009998 <_strtod_l+0x5a0>
 8009908:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800990c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009910:	2300      	movs	r3, #0
 8009912:	9308      	str	r3, [sp, #32]
 8009914:	e07a      	b.n	8009a0c <_strtod_l+0x614>
 8009916:	07e2      	lsls	r2, r4, #31
 8009918:	d505      	bpl.n	8009926 <_strtod_l+0x52e>
 800991a:	9b08      	ldr	r3, [sp, #32]
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f6 fe6a 	bl	80005f8 <__aeabi_dmul>
 8009924:	2301      	movs	r3, #1
 8009926:	9a08      	ldr	r2, [sp, #32]
 8009928:	3208      	adds	r2, #8
 800992a:	3601      	adds	r6, #1
 800992c:	1064      	asrs	r4, r4, #1
 800992e:	9208      	str	r2, [sp, #32]
 8009930:	e7cd      	b.n	80098ce <_strtod_l+0x4d6>
 8009932:	d0ed      	beq.n	8009910 <_strtod_l+0x518>
 8009934:	4264      	negs	r4, r4
 8009936:	f014 020f 	ands.w	r2, r4, #15
 800993a:	d00a      	beq.n	8009952 <_strtod_l+0x55a>
 800993c:	4b12      	ldr	r3, [pc, #72]	@ (8009988 <_strtod_l+0x590>)
 800993e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009942:	4650      	mov	r0, sl
 8009944:	4659      	mov	r1, fp
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f7f6 ff7f 	bl	800084c <__aeabi_ddiv>
 800994e:	4682      	mov	sl, r0
 8009950:	468b      	mov	fp, r1
 8009952:	1124      	asrs	r4, r4, #4
 8009954:	d0dc      	beq.n	8009910 <_strtod_l+0x518>
 8009956:	2c1f      	cmp	r4, #31
 8009958:	dd20      	ble.n	800999c <_strtod_l+0x5a4>
 800995a:	2400      	movs	r4, #0
 800995c:	46a0      	mov	r8, r4
 800995e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009960:	46a1      	mov	r9, r4
 8009962:	9a05      	ldr	r2, [sp, #20]
 8009964:	2322      	movs	r3, #34	@ 0x22
 8009966:	f04f 0a00 	mov.w	sl, #0
 800996a:	f04f 0b00 	mov.w	fp, #0
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	e768      	b.n	8009844 <_strtod_l+0x44c>
 8009972:	bf00      	nop
 8009974:	0800c033 	.word	0x0800c033
 8009978:	0800c038 	.word	0x0800c038
 800997c:	0800c02a 	.word	0x0800c02a
 8009980:	0800c02d 	.word	0x0800c02d
 8009984:	0800c3ac 	.word	0x0800c3ac
 8009988:	0800c1a8 	.word	0x0800c1a8
 800998c:	0800c180 	.word	0x0800c180
 8009990:	7ff00000 	.word	0x7ff00000
 8009994:	7ca00000 	.word	0x7ca00000
 8009998:	7fefffff 	.word	0x7fefffff
 800999c:	f014 0310 	ands.w	r3, r4, #16
 80099a0:	bf18      	it	ne
 80099a2:	236a      	movne	r3, #106	@ 0x6a
 80099a4:	4ea9      	ldr	r6, [pc, #676]	@ (8009c4c <_strtod_l+0x854>)
 80099a6:	9308      	str	r3, [sp, #32]
 80099a8:	4650      	mov	r0, sl
 80099aa:	4659      	mov	r1, fp
 80099ac:	2300      	movs	r3, #0
 80099ae:	07e2      	lsls	r2, r4, #31
 80099b0:	d504      	bpl.n	80099bc <_strtod_l+0x5c4>
 80099b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099b6:	f7f6 fe1f 	bl	80005f8 <__aeabi_dmul>
 80099ba:	2301      	movs	r3, #1
 80099bc:	1064      	asrs	r4, r4, #1
 80099be:	f106 0608 	add.w	r6, r6, #8
 80099c2:	d1f4      	bne.n	80099ae <_strtod_l+0x5b6>
 80099c4:	b10b      	cbz	r3, 80099ca <_strtod_l+0x5d2>
 80099c6:	4682      	mov	sl, r0
 80099c8:	468b      	mov	fp, r1
 80099ca:	9b08      	ldr	r3, [sp, #32]
 80099cc:	b1b3      	cbz	r3, 80099fc <_strtod_l+0x604>
 80099ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80099d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	4659      	mov	r1, fp
 80099da:	dd0f      	ble.n	80099fc <_strtod_l+0x604>
 80099dc:	2b1f      	cmp	r3, #31
 80099de:	dd55      	ble.n	8009a8c <_strtod_l+0x694>
 80099e0:	2b34      	cmp	r3, #52	@ 0x34
 80099e2:	bfde      	ittt	le
 80099e4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80099e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80099ec:	4093      	lslle	r3, r2
 80099ee:	f04f 0a00 	mov.w	sl, #0
 80099f2:	bfcc      	ite	gt
 80099f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80099f8:	ea03 0b01 	andle.w	fp, r3, r1
 80099fc:	2200      	movs	r2, #0
 80099fe:	2300      	movs	r3, #0
 8009a00:	4650      	mov	r0, sl
 8009a02:	4659      	mov	r1, fp
 8009a04:	f7f7 f860 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d1a6      	bne.n	800995a <_strtod_l+0x562>
 8009a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009a12:	9805      	ldr	r0, [sp, #20]
 8009a14:	462b      	mov	r3, r5
 8009a16:	463a      	mov	r2, r7
 8009a18:	f001 f976 	bl	800ad08 <__s2b>
 8009a1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f af05 	beq.w	800982e <_strtod_l+0x436>
 8009a24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a26:	2a00      	cmp	r2, #0
 8009a28:	eba9 0308 	sub.w	r3, r9, r8
 8009a2c:	bfa8      	it	ge
 8009a2e:	2300      	movge	r3, #0
 8009a30:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a32:	2400      	movs	r4, #0
 8009a34:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009a38:	9316      	str	r3, [sp, #88]	@ 0x58
 8009a3a:	46a0      	mov	r8, r4
 8009a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a3e:	9805      	ldr	r0, [sp, #20]
 8009a40:	6859      	ldr	r1, [r3, #4]
 8009a42:	f001 f8b9 	bl	800abb8 <_Balloc>
 8009a46:	4681      	mov	r9, r0
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	f43f aef4 	beq.w	8009836 <_strtod_l+0x43e>
 8009a4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a50:	691a      	ldr	r2, [r3, #16]
 8009a52:	3202      	adds	r2, #2
 8009a54:	f103 010c 	add.w	r1, r3, #12
 8009a58:	0092      	lsls	r2, r2, #2
 8009a5a:	300c      	adds	r0, #12
 8009a5c:	f000 fc4f 	bl	800a2fe <memcpy>
 8009a60:	ec4b ab10 	vmov	d0, sl, fp
 8009a64:	9805      	ldr	r0, [sp, #20]
 8009a66:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a68:	a91b      	add	r1, sp, #108	@ 0x6c
 8009a6a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009a6e:	f001 fc87 	bl	800b380 <__d2b>
 8009a72:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f43f aede 	beq.w	8009836 <_strtod_l+0x43e>
 8009a7a:	9805      	ldr	r0, [sp, #20]
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	f001 f9d9 	bl	800ae34 <__i2b>
 8009a82:	4680      	mov	r8, r0
 8009a84:	b948      	cbnz	r0, 8009a9a <_strtod_l+0x6a2>
 8009a86:	f04f 0800 	mov.w	r8, #0
 8009a8a:	e6d4      	b.n	8009836 <_strtod_l+0x43e>
 8009a8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a90:	fa02 f303 	lsl.w	r3, r2, r3
 8009a94:	ea03 0a0a 	and.w	sl, r3, sl
 8009a98:	e7b0      	b.n	80099fc <_strtod_l+0x604>
 8009a9a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009a9c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	bfab      	itete	ge
 8009aa2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009aa4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009aa6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009aa8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009aaa:	bfac      	ite	ge
 8009aac:	18ef      	addge	r7, r5, r3
 8009aae:	1b5e      	sublt	r6, r3, r5
 8009ab0:	9b08      	ldr	r3, [sp, #32]
 8009ab2:	1aed      	subs	r5, r5, r3
 8009ab4:	4415      	add	r5, r2
 8009ab6:	4b66      	ldr	r3, [pc, #408]	@ (8009c50 <_strtod_l+0x858>)
 8009ab8:	3d01      	subs	r5, #1
 8009aba:	429d      	cmp	r5, r3
 8009abc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009ac0:	da50      	bge.n	8009b64 <_strtod_l+0x76c>
 8009ac2:	1b5b      	subs	r3, r3, r5
 8009ac4:	2b1f      	cmp	r3, #31
 8009ac6:	eba2 0203 	sub.w	r2, r2, r3
 8009aca:	f04f 0101 	mov.w	r1, #1
 8009ace:	dc3d      	bgt.n	8009b4c <_strtod_l+0x754>
 8009ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ada:	18bd      	adds	r5, r7, r2
 8009adc:	9b08      	ldr	r3, [sp, #32]
 8009ade:	42af      	cmp	r7, r5
 8009ae0:	4416      	add	r6, r2
 8009ae2:	441e      	add	r6, r3
 8009ae4:	463b      	mov	r3, r7
 8009ae6:	bfa8      	it	ge
 8009ae8:	462b      	movge	r3, r5
 8009aea:	42b3      	cmp	r3, r6
 8009aec:	bfa8      	it	ge
 8009aee:	4633      	movge	r3, r6
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	bfc2      	ittt	gt
 8009af4:	1aed      	subgt	r5, r5, r3
 8009af6:	1af6      	subgt	r6, r6, r3
 8009af8:	1aff      	subgt	r7, r7, r3
 8009afa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	dd16      	ble.n	8009b2e <_strtod_l+0x736>
 8009b00:	4641      	mov	r1, r8
 8009b02:	9805      	ldr	r0, [sp, #20]
 8009b04:	461a      	mov	r2, r3
 8009b06:	f001 fa55 	bl	800afb4 <__pow5mult>
 8009b0a:	4680      	mov	r8, r0
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d0ba      	beq.n	8009a86 <_strtod_l+0x68e>
 8009b10:	4601      	mov	r1, r0
 8009b12:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b14:	9805      	ldr	r0, [sp, #20]
 8009b16:	f001 f9a3 	bl	800ae60 <__multiply>
 8009b1a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f43f ae8a 	beq.w	8009836 <_strtod_l+0x43e>
 8009b22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b24:	9805      	ldr	r0, [sp, #20]
 8009b26:	f001 f887 	bl	800ac38 <_Bfree>
 8009b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b2e:	2d00      	cmp	r5, #0
 8009b30:	dc1d      	bgt.n	8009b6e <_strtod_l+0x776>
 8009b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dd23      	ble.n	8009b80 <_strtod_l+0x788>
 8009b38:	4649      	mov	r1, r9
 8009b3a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009b3c:	9805      	ldr	r0, [sp, #20]
 8009b3e:	f001 fa39 	bl	800afb4 <__pow5mult>
 8009b42:	4681      	mov	r9, r0
 8009b44:	b9e0      	cbnz	r0, 8009b80 <_strtod_l+0x788>
 8009b46:	f04f 0900 	mov.w	r9, #0
 8009b4a:	e674      	b.n	8009836 <_strtod_l+0x43e>
 8009b4c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009b50:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009b54:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009b58:	35e2      	adds	r5, #226	@ 0xe2
 8009b5a:	fa01 f305 	lsl.w	r3, r1, r5
 8009b5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b60:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009b62:	e7ba      	b.n	8009ada <_strtod_l+0x6e2>
 8009b64:	2300      	movs	r3, #0
 8009b66:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b68:	2301      	movs	r3, #1
 8009b6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b6c:	e7b5      	b.n	8009ada <_strtod_l+0x6e2>
 8009b6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b70:	9805      	ldr	r0, [sp, #20]
 8009b72:	462a      	mov	r2, r5
 8009b74:	f001 fa78 	bl	800b068 <__lshift>
 8009b78:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d1d9      	bne.n	8009b32 <_strtod_l+0x73a>
 8009b7e:	e65a      	b.n	8009836 <_strtod_l+0x43e>
 8009b80:	2e00      	cmp	r6, #0
 8009b82:	dd07      	ble.n	8009b94 <_strtod_l+0x79c>
 8009b84:	4649      	mov	r1, r9
 8009b86:	9805      	ldr	r0, [sp, #20]
 8009b88:	4632      	mov	r2, r6
 8009b8a:	f001 fa6d 	bl	800b068 <__lshift>
 8009b8e:	4681      	mov	r9, r0
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d0d8      	beq.n	8009b46 <_strtod_l+0x74e>
 8009b94:	2f00      	cmp	r7, #0
 8009b96:	dd08      	ble.n	8009baa <_strtod_l+0x7b2>
 8009b98:	4641      	mov	r1, r8
 8009b9a:	9805      	ldr	r0, [sp, #20]
 8009b9c:	463a      	mov	r2, r7
 8009b9e:	f001 fa63 	bl	800b068 <__lshift>
 8009ba2:	4680      	mov	r8, r0
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	f43f ae46 	beq.w	8009836 <_strtod_l+0x43e>
 8009baa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bac:	9805      	ldr	r0, [sp, #20]
 8009bae:	464a      	mov	r2, r9
 8009bb0:	f001 fae2 	bl	800b178 <__mdiff>
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	f43f ae3d 	beq.w	8009836 <_strtod_l+0x43e>
 8009bbc:	68c3      	ldr	r3, [r0, #12]
 8009bbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60c3      	str	r3, [r0, #12]
 8009bc4:	4641      	mov	r1, r8
 8009bc6:	f001 fabb 	bl	800b140 <__mcmp>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	da46      	bge.n	8009c5c <_strtod_l+0x864>
 8009bce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd0:	ea53 030a 	orrs.w	r3, r3, sl
 8009bd4:	d16c      	bne.n	8009cb0 <_strtod_l+0x8b8>
 8009bd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d168      	bne.n	8009cb0 <_strtod_l+0x8b8>
 8009bde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009be2:	0d1b      	lsrs	r3, r3, #20
 8009be4:	051b      	lsls	r3, r3, #20
 8009be6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bea:	d961      	bls.n	8009cb0 <_strtod_l+0x8b8>
 8009bec:	6963      	ldr	r3, [r4, #20]
 8009bee:	b913      	cbnz	r3, 8009bf6 <_strtod_l+0x7fe>
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	dd5c      	ble.n	8009cb0 <_strtod_l+0x8b8>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	9805      	ldr	r0, [sp, #20]
 8009bfc:	f001 fa34 	bl	800b068 <__lshift>
 8009c00:	4641      	mov	r1, r8
 8009c02:	4604      	mov	r4, r0
 8009c04:	f001 fa9c 	bl	800b140 <__mcmp>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	dd51      	ble.n	8009cb0 <_strtod_l+0x8b8>
 8009c0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c10:	9a08      	ldr	r2, [sp, #32]
 8009c12:	0d1b      	lsrs	r3, r3, #20
 8009c14:	051b      	lsls	r3, r3, #20
 8009c16:	2a00      	cmp	r2, #0
 8009c18:	d06b      	beq.n	8009cf2 <_strtod_l+0x8fa>
 8009c1a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c1e:	d868      	bhi.n	8009cf2 <_strtod_l+0x8fa>
 8009c20:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009c24:	f67f ae9d 	bls.w	8009962 <_strtod_l+0x56a>
 8009c28:	4b0a      	ldr	r3, [pc, #40]	@ (8009c54 <_strtod_l+0x85c>)
 8009c2a:	4650      	mov	r0, sl
 8009c2c:	4659      	mov	r1, fp
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f7f6 fce2 	bl	80005f8 <__aeabi_dmul>
 8009c34:	4b08      	ldr	r3, [pc, #32]	@ (8009c58 <_strtod_l+0x860>)
 8009c36:	400b      	ands	r3, r1
 8009c38:	4682      	mov	sl, r0
 8009c3a:	468b      	mov	fp, r1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f47f ae05 	bne.w	800984c <_strtod_l+0x454>
 8009c42:	9a05      	ldr	r2, [sp, #20]
 8009c44:	2322      	movs	r3, #34	@ 0x22
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	e600      	b.n	800984c <_strtod_l+0x454>
 8009c4a:	bf00      	nop
 8009c4c:	0800c060 	.word	0x0800c060
 8009c50:	fffffc02 	.word	0xfffffc02
 8009c54:	39500000 	.word	0x39500000
 8009c58:	7ff00000 	.word	0x7ff00000
 8009c5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c60:	d165      	bne.n	8009d2e <_strtod_l+0x936>
 8009c62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c68:	b35a      	cbz	r2, 8009cc2 <_strtod_l+0x8ca>
 8009c6a:	4a9f      	ldr	r2, [pc, #636]	@ (8009ee8 <_strtod_l+0xaf0>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d12b      	bne.n	8009cc8 <_strtod_l+0x8d0>
 8009c70:	9b08      	ldr	r3, [sp, #32]
 8009c72:	4651      	mov	r1, sl
 8009c74:	b303      	cbz	r3, 8009cb8 <_strtod_l+0x8c0>
 8009c76:	4b9d      	ldr	r3, [pc, #628]	@ (8009eec <_strtod_l+0xaf4>)
 8009c78:	465a      	mov	r2, fp
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009c80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c84:	d81b      	bhi.n	8009cbe <_strtod_l+0x8c6>
 8009c86:	0d1b      	lsrs	r3, r3, #20
 8009c88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c90:	4299      	cmp	r1, r3
 8009c92:	d119      	bne.n	8009cc8 <_strtod_l+0x8d0>
 8009c94:	4b96      	ldr	r3, [pc, #600]	@ (8009ef0 <_strtod_l+0xaf8>)
 8009c96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d102      	bne.n	8009ca2 <_strtod_l+0x8aa>
 8009c9c:	3101      	adds	r1, #1
 8009c9e:	f43f adca 	beq.w	8009836 <_strtod_l+0x43e>
 8009ca2:	4b92      	ldr	r3, [pc, #584]	@ (8009eec <_strtod_l+0xaf4>)
 8009ca4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ca6:	401a      	ands	r2, r3
 8009ca8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009cac:	f04f 0a00 	mov.w	sl, #0
 8009cb0:	9b08      	ldr	r3, [sp, #32]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1b8      	bne.n	8009c28 <_strtod_l+0x830>
 8009cb6:	e5c9      	b.n	800984c <_strtod_l+0x454>
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cbc:	e7e8      	b.n	8009c90 <_strtod_l+0x898>
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	e7e6      	b.n	8009c90 <_strtod_l+0x898>
 8009cc2:	ea53 030a 	orrs.w	r3, r3, sl
 8009cc6:	d0a1      	beq.n	8009c0c <_strtod_l+0x814>
 8009cc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cca:	b1db      	cbz	r3, 8009d04 <_strtod_l+0x90c>
 8009ccc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cce:	4213      	tst	r3, r2
 8009cd0:	d0ee      	beq.n	8009cb0 <_strtod_l+0x8b8>
 8009cd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cd4:	9a08      	ldr	r2, [sp, #32]
 8009cd6:	4650      	mov	r0, sl
 8009cd8:	4659      	mov	r1, fp
 8009cda:	b1bb      	cbz	r3, 8009d0c <_strtod_l+0x914>
 8009cdc:	f7ff fb6c 	bl	80093b8 <sulp>
 8009ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ce4:	ec53 2b10 	vmov	r2, r3, d0
 8009ce8:	f7f6 fad0 	bl	800028c <__adddf3>
 8009cec:	4682      	mov	sl, r0
 8009cee:	468b      	mov	fp, r1
 8009cf0:	e7de      	b.n	8009cb0 <_strtod_l+0x8b8>
 8009cf2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009cf6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009cfa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009cfe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009d02:	e7d5      	b.n	8009cb0 <_strtod_l+0x8b8>
 8009d04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d06:	ea13 0f0a 	tst.w	r3, sl
 8009d0a:	e7e1      	b.n	8009cd0 <_strtod_l+0x8d8>
 8009d0c:	f7ff fb54 	bl	80093b8 <sulp>
 8009d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d14:	ec53 2b10 	vmov	r2, r3, d0
 8009d18:	f7f6 fab6 	bl	8000288 <__aeabi_dsub>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	4682      	mov	sl, r0
 8009d22:	468b      	mov	fp, r1
 8009d24:	f7f6 fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d0c1      	beq.n	8009cb0 <_strtod_l+0x8b8>
 8009d2c:	e619      	b.n	8009962 <_strtod_l+0x56a>
 8009d2e:	4641      	mov	r1, r8
 8009d30:	4620      	mov	r0, r4
 8009d32:	f001 fb7d 	bl	800b430 <__ratio>
 8009d36:	ec57 6b10 	vmov	r6, r7, d0
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d40:	4630      	mov	r0, r6
 8009d42:	4639      	mov	r1, r7
 8009d44:	f7f6 fed4 	bl	8000af0 <__aeabi_dcmple>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d06f      	beq.n	8009e2c <_strtod_l+0xa34>
 8009d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d17a      	bne.n	8009e48 <_strtod_l+0xa50>
 8009d52:	f1ba 0f00 	cmp.w	sl, #0
 8009d56:	d158      	bne.n	8009e0a <_strtod_l+0xa12>
 8009d58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d15a      	bne.n	8009e18 <_strtod_l+0xa20>
 8009d62:	4b64      	ldr	r3, [pc, #400]	@ (8009ef4 <_strtod_l+0xafc>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	4630      	mov	r0, r6
 8009d68:	4639      	mov	r1, r7
 8009d6a:	f7f6 feb7 	bl	8000adc <__aeabi_dcmplt>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d159      	bne.n	8009e26 <_strtod_l+0xa2e>
 8009d72:	4630      	mov	r0, r6
 8009d74:	4639      	mov	r1, r7
 8009d76:	4b60      	ldr	r3, [pc, #384]	@ (8009ef8 <_strtod_l+0xb00>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f7f6 fc3d 	bl	80005f8 <__aeabi_dmul>
 8009d7e:	4606      	mov	r6, r0
 8009d80:	460f      	mov	r7, r1
 8009d82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009d86:	9606      	str	r6, [sp, #24]
 8009d88:	9307      	str	r3, [sp, #28]
 8009d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d8e:	4d57      	ldr	r5, [pc, #348]	@ (8009eec <_strtod_l+0xaf4>)
 8009d90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d96:	401d      	ands	r5, r3
 8009d98:	4b58      	ldr	r3, [pc, #352]	@ (8009efc <_strtod_l+0xb04>)
 8009d9a:	429d      	cmp	r5, r3
 8009d9c:	f040 80b2 	bne.w	8009f04 <_strtod_l+0xb0c>
 8009da0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009da2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009da6:	ec4b ab10 	vmov	d0, sl, fp
 8009daa:	f001 fa79 	bl	800b2a0 <__ulp>
 8009dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009db2:	ec51 0b10 	vmov	r0, r1, d0
 8009db6:	f7f6 fc1f 	bl	80005f8 <__aeabi_dmul>
 8009dba:	4652      	mov	r2, sl
 8009dbc:	465b      	mov	r3, fp
 8009dbe:	f7f6 fa65 	bl	800028c <__adddf3>
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4949      	ldr	r1, [pc, #292]	@ (8009eec <_strtod_l+0xaf4>)
 8009dc6:	4a4e      	ldr	r2, [pc, #312]	@ (8009f00 <_strtod_l+0xb08>)
 8009dc8:	4019      	ands	r1, r3
 8009dca:	4291      	cmp	r1, r2
 8009dcc:	4682      	mov	sl, r0
 8009dce:	d942      	bls.n	8009e56 <_strtod_l+0xa5e>
 8009dd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009dd2:	4b47      	ldr	r3, [pc, #284]	@ (8009ef0 <_strtod_l+0xaf8>)
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d103      	bne.n	8009de0 <_strtod_l+0x9e8>
 8009dd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dda:	3301      	adds	r3, #1
 8009ddc:	f43f ad2b 	beq.w	8009836 <_strtod_l+0x43e>
 8009de0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ef0 <_strtod_l+0xaf8>
 8009de4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009de8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009dea:	9805      	ldr	r0, [sp, #20]
 8009dec:	f000 ff24 	bl	800ac38 <_Bfree>
 8009df0:	9805      	ldr	r0, [sp, #20]
 8009df2:	4649      	mov	r1, r9
 8009df4:	f000 ff20 	bl	800ac38 <_Bfree>
 8009df8:	9805      	ldr	r0, [sp, #20]
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	f000 ff1c 	bl	800ac38 <_Bfree>
 8009e00:	9805      	ldr	r0, [sp, #20]
 8009e02:	4621      	mov	r1, r4
 8009e04:	f000 ff18 	bl	800ac38 <_Bfree>
 8009e08:	e618      	b.n	8009a3c <_strtod_l+0x644>
 8009e0a:	f1ba 0f01 	cmp.w	sl, #1
 8009e0e:	d103      	bne.n	8009e18 <_strtod_l+0xa20>
 8009e10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f43f ada5 	beq.w	8009962 <_strtod_l+0x56a>
 8009e18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009ec8 <_strtod_l+0xad0>
 8009e1c:	4f35      	ldr	r7, [pc, #212]	@ (8009ef4 <_strtod_l+0xafc>)
 8009e1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e22:	2600      	movs	r6, #0
 8009e24:	e7b1      	b.n	8009d8a <_strtod_l+0x992>
 8009e26:	4f34      	ldr	r7, [pc, #208]	@ (8009ef8 <_strtod_l+0xb00>)
 8009e28:	2600      	movs	r6, #0
 8009e2a:	e7aa      	b.n	8009d82 <_strtod_l+0x98a>
 8009e2c:	4b32      	ldr	r3, [pc, #200]	@ (8009ef8 <_strtod_l+0xb00>)
 8009e2e:	4630      	mov	r0, r6
 8009e30:	4639      	mov	r1, r7
 8009e32:	2200      	movs	r2, #0
 8009e34:	f7f6 fbe0 	bl	80005f8 <__aeabi_dmul>
 8009e38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	460f      	mov	r7, r1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d09f      	beq.n	8009d82 <_strtod_l+0x98a>
 8009e42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009e46:	e7a0      	b.n	8009d8a <_strtod_l+0x992>
 8009e48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009ed0 <_strtod_l+0xad8>
 8009e4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e50:	ec57 6b17 	vmov	r6, r7, d7
 8009e54:	e799      	b.n	8009d8a <_strtod_l+0x992>
 8009e56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009e5a:	9b08      	ldr	r3, [sp, #32]
 8009e5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1c1      	bne.n	8009de8 <_strtod_l+0x9f0>
 8009e64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e68:	0d1b      	lsrs	r3, r3, #20
 8009e6a:	051b      	lsls	r3, r3, #20
 8009e6c:	429d      	cmp	r5, r3
 8009e6e:	d1bb      	bne.n	8009de8 <_strtod_l+0x9f0>
 8009e70:	4630      	mov	r0, r6
 8009e72:	4639      	mov	r1, r7
 8009e74:	f7f6 fe92 	bl	8000b9c <__aeabi_d2lz>
 8009e78:	f7f6 fb90 	bl	800059c <__aeabi_l2d>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4630      	mov	r0, r6
 8009e82:	4639      	mov	r1, r7
 8009e84:	f7f6 fa00 	bl	8000288 <__aeabi_dsub>
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009e90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e96:	ea46 060a 	orr.w	r6, r6, sl
 8009e9a:	431e      	orrs	r6, r3
 8009e9c:	d06f      	beq.n	8009f7e <_strtod_l+0xb86>
 8009e9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ed8 <_strtod_l+0xae0>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 fe1a 	bl	8000adc <__aeabi_dcmplt>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	f47f accf 	bne.w	800984c <_strtod_l+0x454>
 8009eae:	a30c      	add	r3, pc, #48	@ (adr r3, 8009ee0 <_strtod_l+0xae8>)
 8009eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009eb8:	f7f6 fe2e 	bl	8000b18 <__aeabi_dcmpgt>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d093      	beq.n	8009de8 <_strtod_l+0x9f0>
 8009ec0:	e4c4      	b.n	800984c <_strtod_l+0x454>
 8009ec2:	bf00      	nop
 8009ec4:	f3af 8000 	nop.w
 8009ec8:	00000000 	.word	0x00000000
 8009ecc:	bff00000 	.word	0xbff00000
 8009ed0:	00000000 	.word	0x00000000
 8009ed4:	3ff00000 	.word	0x3ff00000
 8009ed8:	94a03595 	.word	0x94a03595
 8009edc:	3fdfffff 	.word	0x3fdfffff
 8009ee0:	35afe535 	.word	0x35afe535
 8009ee4:	3fe00000 	.word	0x3fe00000
 8009ee8:	000fffff 	.word	0x000fffff
 8009eec:	7ff00000 	.word	0x7ff00000
 8009ef0:	7fefffff 	.word	0x7fefffff
 8009ef4:	3ff00000 	.word	0x3ff00000
 8009ef8:	3fe00000 	.word	0x3fe00000
 8009efc:	7fe00000 	.word	0x7fe00000
 8009f00:	7c9fffff 	.word	0x7c9fffff
 8009f04:	9b08      	ldr	r3, [sp, #32]
 8009f06:	b323      	cbz	r3, 8009f52 <_strtod_l+0xb5a>
 8009f08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009f0c:	d821      	bhi.n	8009f52 <_strtod_l+0xb5a>
 8009f0e:	a328      	add	r3, pc, #160	@ (adr r3, 8009fb0 <_strtod_l+0xbb8>)
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	4630      	mov	r0, r6
 8009f16:	4639      	mov	r1, r7
 8009f18:	f7f6 fdea 	bl	8000af0 <__aeabi_dcmple>
 8009f1c:	b1a0      	cbz	r0, 8009f48 <_strtod_l+0xb50>
 8009f1e:	4639      	mov	r1, r7
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7f6 fe03 	bl	8000b2c <__aeabi_d2uiz>
 8009f26:	2801      	cmp	r0, #1
 8009f28:	bf38      	it	cc
 8009f2a:	2001      	movcc	r0, #1
 8009f2c:	f7f6 faea 	bl	8000504 <__aeabi_ui2d>
 8009f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f32:	4606      	mov	r6, r0
 8009f34:	460f      	mov	r7, r1
 8009f36:	b9fb      	cbnz	r3, 8009f78 <_strtod_l+0xb80>
 8009f38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009f3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009f44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009f4e:	1b5b      	subs	r3, r3, r5
 8009f50:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009f5a:	f001 f9a1 	bl	800b2a0 <__ulp>
 8009f5e:	4650      	mov	r0, sl
 8009f60:	ec53 2b10 	vmov	r2, r3, d0
 8009f64:	4659      	mov	r1, fp
 8009f66:	f7f6 fb47 	bl	80005f8 <__aeabi_dmul>
 8009f6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009f6e:	f7f6 f98d 	bl	800028c <__adddf3>
 8009f72:	4682      	mov	sl, r0
 8009f74:	468b      	mov	fp, r1
 8009f76:	e770      	b.n	8009e5a <_strtod_l+0xa62>
 8009f78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009f7c:	e7e0      	b.n	8009f40 <_strtod_l+0xb48>
 8009f7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009fb8 <_strtod_l+0xbc0>)
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	f7f6 fdaa 	bl	8000adc <__aeabi_dcmplt>
 8009f88:	e798      	b.n	8009ebc <_strtod_l+0xac4>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009f90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	f7ff ba6d 	b.w	8009472 <_strtod_l+0x7a>
 8009f98:	2a65      	cmp	r2, #101	@ 0x65
 8009f9a:	f43f ab66 	beq.w	800966a <_strtod_l+0x272>
 8009f9e:	2a45      	cmp	r2, #69	@ 0x45
 8009fa0:	f43f ab63 	beq.w	800966a <_strtod_l+0x272>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	f7ff bb9e 	b.w	80096e6 <_strtod_l+0x2ee>
 8009faa:	bf00      	nop
 8009fac:	f3af 8000 	nop.w
 8009fb0:	ffc00000 	.word	0xffc00000
 8009fb4:	41dfffff 	.word	0x41dfffff
 8009fb8:	94a03595 	.word	0x94a03595
 8009fbc:	3fcfffff 	.word	0x3fcfffff

08009fc0 <strtod>:
 8009fc0:	460a      	mov	r2, r1
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	4802      	ldr	r0, [pc, #8]	@ (8009fd0 <strtod+0x10>)
 8009fc6:	4b03      	ldr	r3, [pc, #12]	@ (8009fd4 <strtod+0x14>)
 8009fc8:	6800      	ldr	r0, [r0, #0]
 8009fca:	f7ff ba15 	b.w	80093f8 <_strtod_l>
 8009fce:	bf00      	nop
 8009fd0:	20000274 	.word	0x20000274
 8009fd4:	20000108 	.word	0x20000108

08009fd8 <std>:
 8009fd8:	2300      	movs	r3, #0
 8009fda:	b510      	push	{r4, lr}
 8009fdc:	4604      	mov	r4, r0
 8009fde:	e9c0 3300 	strd	r3, r3, [r0]
 8009fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fe6:	6083      	str	r3, [r0, #8]
 8009fe8:	8181      	strh	r1, [r0, #12]
 8009fea:	6643      	str	r3, [r0, #100]	@ 0x64
 8009fec:	81c2      	strh	r2, [r0, #14]
 8009fee:	6183      	str	r3, [r0, #24]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	2208      	movs	r2, #8
 8009ff4:	305c      	adds	r0, #92	@ 0x5c
 8009ff6:	f000 f8f4 	bl	800a1e2 <memset>
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	@ (800a030 <std+0x58>)
 8009ffc:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ffe:	4b0d      	ldr	r3, [pc, #52]	@ (800a034 <std+0x5c>)
 800a000:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a002:	4b0d      	ldr	r3, [pc, #52]	@ (800a038 <std+0x60>)
 800a004:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a006:	4b0d      	ldr	r3, [pc, #52]	@ (800a03c <std+0x64>)
 800a008:	6323      	str	r3, [r4, #48]	@ 0x30
 800a00a:	4b0d      	ldr	r3, [pc, #52]	@ (800a040 <std+0x68>)
 800a00c:	6224      	str	r4, [r4, #32]
 800a00e:	429c      	cmp	r4, r3
 800a010:	d006      	beq.n	800a020 <std+0x48>
 800a012:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a016:	4294      	cmp	r4, r2
 800a018:	d002      	beq.n	800a020 <std+0x48>
 800a01a:	33d0      	adds	r3, #208	@ 0xd0
 800a01c:	429c      	cmp	r4, r3
 800a01e:	d105      	bne.n	800a02c <std+0x54>
 800a020:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a028:	f000 b966 	b.w	800a2f8 <__retarget_lock_init_recursive>
 800a02c:	bd10      	pop	{r4, pc}
 800a02e:	bf00      	nop
 800a030:	0800a15d 	.word	0x0800a15d
 800a034:	0800a17f 	.word	0x0800a17f
 800a038:	0800a1b7 	.word	0x0800a1b7
 800a03c:	0800a1db 	.word	0x0800a1db
 800a040:	2000200c 	.word	0x2000200c

0800a044 <stdio_exit_handler>:
 800a044:	4a02      	ldr	r2, [pc, #8]	@ (800a050 <stdio_exit_handler+0xc>)
 800a046:	4903      	ldr	r1, [pc, #12]	@ (800a054 <stdio_exit_handler+0x10>)
 800a048:	4803      	ldr	r0, [pc, #12]	@ (800a058 <stdio_exit_handler+0x14>)
 800a04a:	f000 b869 	b.w	800a120 <_fwalk_sglue>
 800a04e:	bf00      	nop
 800a050:	200000fc 	.word	0x200000fc
 800a054:	0800b641 	.word	0x0800b641
 800a058:	20000278 	.word	0x20000278

0800a05c <cleanup_stdio>:
 800a05c:	6841      	ldr	r1, [r0, #4]
 800a05e:	4b0c      	ldr	r3, [pc, #48]	@ (800a090 <cleanup_stdio+0x34>)
 800a060:	4299      	cmp	r1, r3
 800a062:	b510      	push	{r4, lr}
 800a064:	4604      	mov	r4, r0
 800a066:	d001      	beq.n	800a06c <cleanup_stdio+0x10>
 800a068:	f001 faea 	bl	800b640 <_fflush_r>
 800a06c:	68a1      	ldr	r1, [r4, #8]
 800a06e:	4b09      	ldr	r3, [pc, #36]	@ (800a094 <cleanup_stdio+0x38>)
 800a070:	4299      	cmp	r1, r3
 800a072:	d002      	beq.n	800a07a <cleanup_stdio+0x1e>
 800a074:	4620      	mov	r0, r4
 800a076:	f001 fae3 	bl	800b640 <_fflush_r>
 800a07a:	68e1      	ldr	r1, [r4, #12]
 800a07c:	4b06      	ldr	r3, [pc, #24]	@ (800a098 <cleanup_stdio+0x3c>)
 800a07e:	4299      	cmp	r1, r3
 800a080:	d004      	beq.n	800a08c <cleanup_stdio+0x30>
 800a082:	4620      	mov	r0, r4
 800a084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a088:	f001 bada 	b.w	800b640 <_fflush_r>
 800a08c:	bd10      	pop	{r4, pc}
 800a08e:	bf00      	nop
 800a090:	2000200c 	.word	0x2000200c
 800a094:	20002074 	.word	0x20002074
 800a098:	200020dc 	.word	0x200020dc

0800a09c <global_stdio_init.part.0>:
 800a09c:	b510      	push	{r4, lr}
 800a09e:	4b0b      	ldr	r3, [pc, #44]	@ (800a0cc <global_stdio_init.part.0+0x30>)
 800a0a0:	4c0b      	ldr	r4, [pc, #44]	@ (800a0d0 <global_stdio_init.part.0+0x34>)
 800a0a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a0d4 <global_stdio_init.part.0+0x38>)
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2104      	movs	r1, #4
 800a0ac:	f7ff ff94 	bl	8009fd8 <std>
 800a0b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	2109      	movs	r1, #9
 800a0b8:	f7ff ff8e 	bl	8009fd8 <std>
 800a0bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c6:	2112      	movs	r1, #18
 800a0c8:	f7ff bf86 	b.w	8009fd8 <std>
 800a0cc:	20002144 	.word	0x20002144
 800a0d0:	2000200c 	.word	0x2000200c
 800a0d4:	0800a045 	.word	0x0800a045

0800a0d8 <__sfp_lock_acquire>:
 800a0d8:	4801      	ldr	r0, [pc, #4]	@ (800a0e0 <__sfp_lock_acquire+0x8>)
 800a0da:	f000 b90e 	b.w	800a2fa <__retarget_lock_acquire_recursive>
 800a0de:	bf00      	nop
 800a0e0:	2000214d 	.word	0x2000214d

0800a0e4 <__sfp_lock_release>:
 800a0e4:	4801      	ldr	r0, [pc, #4]	@ (800a0ec <__sfp_lock_release+0x8>)
 800a0e6:	f000 b909 	b.w	800a2fc <__retarget_lock_release_recursive>
 800a0ea:	bf00      	nop
 800a0ec:	2000214d 	.word	0x2000214d

0800a0f0 <__sinit>:
 800a0f0:	b510      	push	{r4, lr}
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	f7ff fff0 	bl	800a0d8 <__sfp_lock_acquire>
 800a0f8:	6a23      	ldr	r3, [r4, #32]
 800a0fa:	b11b      	cbz	r3, 800a104 <__sinit+0x14>
 800a0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a100:	f7ff bff0 	b.w	800a0e4 <__sfp_lock_release>
 800a104:	4b04      	ldr	r3, [pc, #16]	@ (800a118 <__sinit+0x28>)
 800a106:	6223      	str	r3, [r4, #32]
 800a108:	4b04      	ldr	r3, [pc, #16]	@ (800a11c <__sinit+0x2c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1f5      	bne.n	800a0fc <__sinit+0xc>
 800a110:	f7ff ffc4 	bl	800a09c <global_stdio_init.part.0>
 800a114:	e7f2      	b.n	800a0fc <__sinit+0xc>
 800a116:	bf00      	nop
 800a118:	0800a05d 	.word	0x0800a05d
 800a11c:	20002144 	.word	0x20002144

0800a120 <_fwalk_sglue>:
 800a120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a124:	4607      	mov	r7, r0
 800a126:	4688      	mov	r8, r1
 800a128:	4614      	mov	r4, r2
 800a12a:	2600      	movs	r6, #0
 800a12c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a130:	f1b9 0901 	subs.w	r9, r9, #1
 800a134:	d505      	bpl.n	800a142 <_fwalk_sglue+0x22>
 800a136:	6824      	ldr	r4, [r4, #0]
 800a138:	2c00      	cmp	r4, #0
 800a13a:	d1f7      	bne.n	800a12c <_fwalk_sglue+0xc>
 800a13c:	4630      	mov	r0, r6
 800a13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a142:	89ab      	ldrh	r3, [r5, #12]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d907      	bls.n	800a158 <_fwalk_sglue+0x38>
 800a148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a14c:	3301      	adds	r3, #1
 800a14e:	d003      	beq.n	800a158 <_fwalk_sglue+0x38>
 800a150:	4629      	mov	r1, r5
 800a152:	4638      	mov	r0, r7
 800a154:	47c0      	blx	r8
 800a156:	4306      	orrs	r6, r0
 800a158:	3568      	adds	r5, #104	@ 0x68
 800a15a:	e7e9      	b.n	800a130 <_fwalk_sglue+0x10>

0800a15c <__sread>:
 800a15c:	b510      	push	{r4, lr}
 800a15e:	460c      	mov	r4, r1
 800a160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a164:	f000 f87a 	bl	800a25c <_read_r>
 800a168:	2800      	cmp	r0, #0
 800a16a:	bfab      	itete	ge
 800a16c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a16e:	89a3      	ldrhlt	r3, [r4, #12]
 800a170:	181b      	addge	r3, r3, r0
 800a172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a176:	bfac      	ite	ge
 800a178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a17a:	81a3      	strhlt	r3, [r4, #12]
 800a17c:	bd10      	pop	{r4, pc}

0800a17e <__swrite>:
 800a17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a182:	461f      	mov	r7, r3
 800a184:	898b      	ldrh	r3, [r1, #12]
 800a186:	05db      	lsls	r3, r3, #23
 800a188:	4605      	mov	r5, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	4616      	mov	r6, r2
 800a18e:	d505      	bpl.n	800a19c <__swrite+0x1e>
 800a190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a194:	2302      	movs	r3, #2
 800a196:	2200      	movs	r2, #0
 800a198:	f000 f84e 	bl	800a238 <_lseek_r>
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1a6:	81a3      	strh	r3, [r4, #12]
 800a1a8:	4632      	mov	r2, r6
 800a1aa:	463b      	mov	r3, r7
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b2:	f000 b865 	b.w	800a280 <_write_r>

0800a1b6 <__sseek>:
 800a1b6:	b510      	push	{r4, lr}
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1be:	f000 f83b 	bl	800a238 <_lseek_r>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	bf15      	itete	ne
 800a1c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a1ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a1ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a1d2:	81a3      	strheq	r3, [r4, #12]
 800a1d4:	bf18      	it	ne
 800a1d6:	81a3      	strhne	r3, [r4, #12]
 800a1d8:	bd10      	pop	{r4, pc}

0800a1da <__sclose>:
 800a1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1de:	f000 b81b 	b.w	800a218 <_close_r>

0800a1e2 <memset>:
 800a1e2:	4402      	add	r2, r0
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d100      	bne.n	800a1ec <memset+0xa>
 800a1ea:	4770      	bx	lr
 800a1ec:	f803 1b01 	strb.w	r1, [r3], #1
 800a1f0:	e7f9      	b.n	800a1e6 <memset+0x4>

0800a1f2 <strncmp>:
 800a1f2:	b510      	push	{r4, lr}
 800a1f4:	b16a      	cbz	r2, 800a212 <strncmp+0x20>
 800a1f6:	3901      	subs	r1, #1
 800a1f8:	1884      	adds	r4, r0, r2
 800a1fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a202:	429a      	cmp	r2, r3
 800a204:	d103      	bne.n	800a20e <strncmp+0x1c>
 800a206:	42a0      	cmp	r0, r4
 800a208:	d001      	beq.n	800a20e <strncmp+0x1c>
 800a20a:	2a00      	cmp	r2, #0
 800a20c:	d1f5      	bne.n	800a1fa <strncmp+0x8>
 800a20e:	1ad0      	subs	r0, r2, r3
 800a210:	bd10      	pop	{r4, pc}
 800a212:	4610      	mov	r0, r2
 800a214:	e7fc      	b.n	800a210 <strncmp+0x1e>
	...

0800a218 <_close_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4d06      	ldr	r5, [pc, #24]	@ (800a234 <_close_r+0x1c>)
 800a21c:	2300      	movs	r3, #0
 800a21e:	4604      	mov	r4, r0
 800a220:	4608      	mov	r0, r1
 800a222:	602b      	str	r3, [r5, #0]
 800a224:	f7f7 f9be 	bl	80015a4 <_close>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_close_r+0x1a>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_close_r+0x1a>
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	20002148 	.word	0x20002148

0800a238 <_lseek_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d07      	ldr	r5, [pc, #28]	@ (800a258 <_lseek_r+0x20>)
 800a23c:	4604      	mov	r4, r0
 800a23e:	4608      	mov	r0, r1
 800a240:	4611      	mov	r1, r2
 800a242:	2200      	movs	r2, #0
 800a244:	602a      	str	r2, [r5, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	f7f7 f9d3 	bl	80015f2 <_lseek>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_lseek_r+0x1e>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_lseek_r+0x1e>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	20002148 	.word	0x20002148

0800a25c <_read_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d07      	ldr	r5, [pc, #28]	@ (800a27c <_read_r+0x20>)
 800a260:	4604      	mov	r4, r0
 800a262:	4608      	mov	r0, r1
 800a264:	4611      	mov	r1, r2
 800a266:	2200      	movs	r2, #0
 800a268:	602a      	str	r2, [r5, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f7f7 f961 	bl	8001532 <_read>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_read_r+0x1e>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_read_r+0x1e>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	20002148 	.word	0x20002148

0800a280 <_write_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d07      	ldr	r5, [pc, #28]	@ (800a2a0 <_write_r+0x20>)
 800a284:	4604      	mov	r4, r0
 800a286:	4608      	mov	r0, r1
 800a288:	4611      	mov	r1, r2
 800a28a:	2200      	movs	r2, #0
 800a28c:	602a      	str	r2, [r5, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	f7f7 f96c 	bl	800156c <_write>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_write_r+0x1e>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_write_r+0x1e>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20002148 	.word	0x20002148

0800a2a4 <__errno>:
 800a2a4:	4b01      	ldr	r3, [pc, #4]	@ (800a2ac <__errno+0x8>)
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	20000274 	.word	0x20000274

0800a2b0 <__libc_init_array>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	4d0d      	ldr	r5, [pc, #52]	@ (800a2e8 <__libc_init_array+0x38>)
 800a2b4:	4c0d      	ldr	r4, [pc, #52]	@ (800a2ec <__libc_init_array+0x3c>)
 800a2b6:	1b64      	subs	r4, r4, r5
 800a2b8:	10a4      	asrs	r4, r4, #2
 800a2ba:	2600      	movs	r6, #0
 800a2bc:	42a6      	cmp	r6, r4
 800a2be:	d109      	bne.n	800a2d4 <__libc_init_array+0x24>
 800a2c0:	4d0b      	ldr	r5, [pc, #44]	@ (800a2f0 <__libc_init_array+0x40>)
 800a2c2:	4c0c      	ldr	r4, [pc, #48]	@ (800a2f4 <__libc_init_array+0x44>)
 800a2c4:	f001 fe72 	bl	800bfac <_init>
 800a2c8:	1b64      	subs	r4, r4, r5
 800a2ca:	10a4      	asrs	r4, r4, #2
 800a2cc:	2600      	movs	r6, #0
 800a2ce:	42a6      	cmp	r6, r4
 800a2d0:	d105      	bne.n	800a2de <__libc_init_array+0x2e>
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2d8:	4798      	blx	r3
 800a2da:	3601      	adds	r6, #1
 800a2dc:	e7ee      	b.n	800a2bc <__libc_init_array+0xc>
 800a2de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e2:	4798      	blx	r3
 800a2e4:	3601      	adds	r6, #1
 800a2e6:	e7f2      	b.n	800a2ce <__libc_init_array+0x1e>
 800a2e8:	0800c3e8 	.word	0x0800c3e8
 800a2ec:	0800c3e8 	.word	0x0800c3e8
 800a2f0:	0800c3e8 	.word	0x0800c3e8
 800a2f4:	0800c3ec 	.word	0x0800c3ec

0800a2f8 <__retarget_lock_init_recursive>:
 800a2f8:	4770      	bx	lr

0800a2fa <__retarget_lock_acquire_recursive>:
 800a2fa:	4770      	bx	lr

0800a2fc <__retarget_lock_release_recursive>:
 800a2fc:	4770      	bx	lr

0800a2fe <memcpy>:
 800a2fe:	440a      	add	r2, r1
 800a300:	4291      	cmp	r1, r2
 800a302:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a306:	d100      	bne.n	800a30a <memcpy+0xc>
 800a308:	4770      	bx	lr
 800a30a:	b510      	push	{r4, lr}
 800a30c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a310:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a314:	4291      	cmp	r1, r2
 800a316:	d1f9      	bne.n	800a30c <memcpy+0xe>
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	0000      	movs	r0, r0
 800a31c:	0000      	movs	r0, r0
	...

0800a320 <nan>:
 800a320:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a328 <nan+0x8>
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	00000000 	.word	0x00000000
 800a32c:	7ff80000 	.word	0x7ff80000

0800a330 <_free_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	4605      	mov	r5, r0
 800a334:	2900      	cmp	r1, #0
 800a336:	d041      	beq.n	800a3bc <_free_r+0x8c>
 800a338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a33c:	1f0c      	subs	r4, r1, #4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bfb8      	it	lt
 800a342:	18e4      	addlt	r4, r4, r3
 800a344:	f000 fc2c 	bl	800aba0 <__malloc_lock>
 800a348:	4a1d      	ldr	r2, [pc, #116]	@ (800a3c0 <_free_r+0x90>)
 800a34a:	6813      	ldr	r3, [r2, #0]
 800a34c:	b933      	cbnz	r3, 800a35c <_free_r+0x2c>
 800a34e:	6063      	str	r3, [r4, #4]
 800a350:	6014      	str	r4, [r2, #0]
 800a352:	4628      	mov	r0, r5
 800a354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a358:	f000 bc28 	b.w	800abac <__malloc_unlock>
 800a35c:	42a3      	cmp	r3, r4
 800a35e:	d908      	bls.n	800a372 <_free_r+0x42>
 800a360:	6820      	ldr	r0, [r4, #0]
 800a362:	1821      	adds	r1, r4, r0
 800a364:	428b      	cmp	r3, r1
 800a366:	bf01      	itttt	eq
 800a368:	6819      	ldreq	r1, [r3, #0]
 800a36a:	685b      	ldreq	r3, [r3, #4]
 800a36c:	1809      	addeq	r1, r1, r0
 800a36e:	6021      	streq	r1, [r4, #0]
 800a370:	e7ed      	b.n	800a34e <_free_r+0x1e>
 800a372:	461a      	mov	r2, r3
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	b10b      	cbz	r3, 800a37c <_free_r+0x4c>
 800a378:	42a3      	cmp	r3, r4
 800a37a:	d9fa      	bls.n	800a372 <_free_r+0x42>
 800a37c:	6811      	ldr	r1, [r2, #0]
 800a37e:	1850      	adds	r0, r2, r1
 800a380:	42a0      	cmp	r0, r4
 800a382:	d10b      	bne.n	800a39c <_free_r+0x6c>
 800a384:	6820      	ldr	r0, [r4, #0]
 800a386:	4401      	add	r1, r0
 800a388:	1850      	adds	r0, r2, r1
 800a38a:	4283      	cmp	r3, r0
 800a38c:	6011      	str	r1, [r2, #0]
 800a38e:	d1e0      	bne.n	800a352 <_free_r+0x22>
 800a390:	6818      	ldr	r0, [r3, #0]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	6053      	str	r3, [r2, #4]
 800a396:	4408      	add	r0, r1
 800a398:	6010      	str	r0, [r2, #0]
 800a39a:	e7da      	b.n	800a352 <_free_r+0x22>
 800a39c:	d902      	bls.n	800a3a4 <_free_r+0x74>
 800a39e:	230c      	movs	r3, #12
 800a3a0:	602b      	str	r3, [r5, #0]
 800a3a2:	e7d6      	b.n	800a352 <_free_r+0x22>
 800a3a4:	6820      	ldr	r0, [r4, #0]
 800a3a6:	1821      	adds	r1, r4, r0
 800a3a8:	428b      	cmp	r3, r1
 800a3aa:	bf04      	itt	eq
 800a3ac:	6819      	ldreq	r1, [r3, #0]
 800a3ae:	685b      	ldreq	r3, [r3, #4]
 800a3b0:	6063      	str	r3, [r4, #4]
 800a3b2:	bf04      	itt	eq
 800a3b4:	1809      	addeq	r1, r1, r0
 800a3b6:	6021      	streq	r1, [r4, #0]
 800a3b8:	6054      	str	r4, [r2, #4]
 800a3ba:	e7ca      	b.n	800a352 <_free_r+0x22>
 800a3bc:	bd38      	pop	{r3, r4, r5, pc}
 800a3be:	bf00      	nop
 800a3c0:	20002154 	.word	0x20002154

0800a3c4 <rshift>:
 800a3c4:	6903      	ldr	r3, [r0, #16]
 800a3c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3d2:	f100 0414 	add.w	r4, r0, #20
 800a3d6:	dd45      	ble.n	800a464 <rshift+0xa0>
 800a3d8:	f011 011f 	ands.w	r1, r1, #31
 800a3dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3e4:	d10c      	bne.n	800a400 <rshift+0x3c>
 800a3e6:	f100 0710 	add.w	r7, r0, #16
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	42b1      	cmp	r1, r6
 800a3ee:	d334      	bcc.n	800a45a <rshift+0x96>
 800a3f0:	1a9b      	subs	r3, r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	1eea      	subs	r2, r5, #3
 800a3f6:	4296      	cmp	r6, r2
 800a3f8:	bf38      	it	cc
 800a3fa:	2300      	movcc	r3, #0
 800a3fc:	4423      	add	r3, r4
 800a3fe:	e015      	b.n	800a42c <rshift+0x68>
 800a400:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a404:	f1c1 0820 	rsb	r8, r1, #32
 800a408:	40cf      	lsrs	r7, r1
 800a40a:	f105 0e04 	add.w	lr, r5, #4
 800a40e:	46a1      	mov	r9, r4
 800a410:	4576      	cmp	r6, lr
 800a412:	46f4      	mov	ip, lr
 800a414:	d815      	bhi.n	800a442 <rshift+0x7e>
 800a416:	1a9a      	subs	r2, r3, r2
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	3a04      	subs	r2, #4
 800a41c:	3501      	adds	r5, #1
 800a41e:	42ae      	cmp	r6, r5
 800a420:	bf38      	it	cc
 800a422:	2200      	movcc	r2, #0
 800a424:	18a3      	adds	r3, r4, r2
 800a426:	50a7      	str	r7, [r4, r2]
 800a428:	b107      	cbz	r7, 800a42c <rshift+0x68>
 800a42a:	3304      	adds	r3, #4
 800a42c:	1b1a      	subs	r2, r3, r4
 800a42e:	42a3      	cmp	r3, r4
 800a430:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a434:	bf08      	it	eq
 800a436:	2300      	moveq	r3, #0
 800a438:	6102      	str	r2, [r0, #16]
 800a43a:	bf08      	it	eq
 800a43c:	6143      	streq	r3, [r0, #20]
 800a43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a442:	f8dc c000 	ldr.w	ip, [ip]
 800a446:	fa0c fc08 	lsl.w	ip, ip, r8
 800a44a:	ea4c 0707 	orr.w	r7, ip, r7
 800a44e:	f849 7b04 	str.w	r7, [r9], #4
 800a452:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a456:	40cf      	lsrs	r7, r1
 800a458:	e7da      	b.n	800a410 <rshift+0x4c>
 800a45a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a45e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a462:	e7c3      	b.n	800a3ec <rshift+0x28>
 800a464:	4623      	mov	r3, r4
 800a466:	e7e1      	b.n	800a42c <rshift+0x68>

0800a468 <__hexdig_fun>:
 800a468:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a46c:	2b09      	cmp	r3, #9
 800a46e:	d802      	bhi.n	800a476 <__hexdig_fun+0xe>
 800a470:	3820      	subs	r0, #32
 800a472:	b2c0      	uxtb	r0, r0
 800a474:	4770      	bx	lr
 800a476:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	d801      	bhi.n	800a482 <__hexdig_fun+0x1a>
 800a47e:	3847      	subs	r0, #71	@ 0x47
 800a480:	e7f7      	b.n	800a472 <__hexdig_fun+0xa>
 800a482:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a486:	2b05      	cmp	r3, #5
 800a488:	d801      	bhi.n	800a48e <__hexdig_fun+0x26>
 800a48a:	3827      	subs	r0, #39	@ 0x27
 800a48c:	e7f1      	b.n	800a472 <__hexdig_fun+0xa>
 800a48e:	2000      	movs	r0, #0
 800a490:	4770      	bx	lr
	...

0800a494 <__gethex>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	b085      	sub	sp, #20
 800a49a:	468a      	mov	sl, r1
 800a49c:	9302      	str	r3, [sp, #8]
 800a49e:	680b      	ldr	r3, [r1, #0]
 800a4a0:	9001      	str	r0, [sp, #4]
 800a4a2:	4690      	mov	r8, r2
 800a4a4:	1c9c      	adds	r4, r3, #2
 800a4a6:	46a1      	mov	r9, r4
 800a4a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a4ac:	2830      	cmp	r0, #48	@ 0x30
 800a4ae:	d0fa      	beq.n	800a4a6 <__gethex+0x12>
 800a4b0:	eba9 0303 	sub.w	r3, r9, r3
 800a4b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a4b8:	f7ff ffd6 	bl	800a468 <__hexdig_fun>
 800a4bc:	4605      	mov	r5, r0
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d168      	bne.n	800a594 <__gethex+0x100>
 800a4c2:	49a0      	ldr	r1, [pc, #640]	@ (800a744 <__gethex+0x2b0>)
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	4648      	mov	r0, r9
 800a4c8:	f7ff fe93 	bl	800a1f2 <strncmp>
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d167      	bne.n	800a5a2 <__gethex+0x10e>
 800a4d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a4d6:	4626      	mov	r6, r4
 800a4d8:	f7ff ffc6 	bl	800a468 <__hexdig_fun>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d062      	beq.n	800a5a6 <__gethex+0x112>
 800a4e0:	4623      	mov	r3, r4
 800a4e2:	7818      	ldrb	r0, [r3, #0]
 800a4e4:	2830      	cmp	r0, #48	@ 0x30
 800a4e6:	4699      	mov	r9, r3
 800a4e8:	f103 0301 	add.w	r3, r3, #1
 800a4ec:	d0f9      	beq.n	800a4e2 <__gethex+0x4e>
 800a4ee:	f7ff ffbb 	bl	800a468 <__hexdig_fun>
 800a4f2:	fab0 f580 	clz	r5, r0
 800a4f6:	096d      	lsrs	r5, r5, #5
 800a4f8:	f04f 0b01 	mov.w	fp, #1
 800a4fc:	464a      	mov	r2, r9
 800a4fe:	4616      	mov	r6, r2
 800a500:	3201      	adds	r2, #1
 800a502:	7830      	ldrb	r0, [r6, #0]
 800a504:	f7ff ffb0 	bl	800a468 <__hexdig_fun>
 800a508:	2800      	cmp	r0, #0
 800a50a:	d1f8      	bne.n	800a4fe <__gethex+0x6a>
 800a50c:	498d      	ldr	r1, [pc, #564]	@ (800a744 <__gethex+0x2b0>)
 800a50e:	2201      	movs	r2, #1
 800a510:	4630      	mov	r0, r6
 800a512:	f7ff fe6e 	bl	800a1f2 <strncmp>
 800a516:	2800      	cmp	r0, #0
 800a518:	d13f      	bne.n	800a59a <__gethex+0x106>
 800a51a:	b944      	cbnz	r4, 800a52e <__gethex+0x9a>
 800a51c:	1c74      	adds	r4, r6, #1
 800a51e:	4622      	mov	r2, r4
 800a520:	4616      	mov	r6, r2
 800a522:	3201      	adds	r2, #1
 800a524:	7830      	ldrb	r0, [r6, #0]
 800a526:	f7ff ff9f 	bl	800a468 <__hexdig_fun>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d1f8      	bne.n	800a520 <__gethex+0x8c>
 800a52e:	1ba4      	subs	r4, r4, r6
 800a530:	00a7      	lsls	r7, r4, #2
 800a532:	7833      	ldrb	r3, [r6, #0]
 800a534:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a538:	2b50      	cmp	r3, #80	@ 0x50
 800a53a:	d13e      	bne.n	800a5ba <__gethex+0x126>
 800a53c:	7873      	ldrb	r3, [r6, #1]
 800a53e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a540:	d033      	beq.n	800a5aa <__gethex+0x116>
 800a542:	2b2d      	cmp	r3, #45	@ 0x2d
 800a544:	d034      	beq.n	800a5b0 <__gethex+0x11c>
 800a546:	1c71      	adds	r1, r6, #1
 800a548:	2400      	movs	r4, #0
 800a54a:	7808      	ldrb	r0, [r1, #0]
 800a54c:	f7ff ff8c 	bl	800a468 <__hexdig_fun>
 800a550:	1e43      	subs	r3, r0, #1
 800a552:	b2db      	uxtb	r3, r3
 800a554:	2b18      	cmp	r3, #24
 800a556:	d830      	bhi.n	800a5ba <__gethex+0x126>
 800a558:	f1a0 0210 	sub.w	r2, r0, #16
 800a55c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a560:	f7ff ff82 	bl	800a468 <__hexdig_fun>
 800a564:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a568:	fa5f fc8c 	uxtb.w	ip, ip
 800a56c:	f1bc 0f18 	cmp.w	ip, #24
 800a570:	f04f 030a 	mov.w	r3, #10
 800a574:	d91e      	bls.n	800a5b4 <__gethex+0x120>
 800a576:	b104      	cbz	r4, 800a57a <__gethex+0xe6>
 800a578:	4252      	negs	r2, r2
 800a57a:	4417      	add	r7, r2
 800a57c:	f8ca 1000 	str.w	r1, [sl]
 800a580:	b1ed      	cbz	r5, 800a5be <__gethex+0x12a>
 800a582:	f1bb 0f00 	cmp.w	fp, #0
 800a586:	bf0c      	ite	eq
 800a588:	2506      	moveq	r5, #6
 800a58a:	2500      	movne	r5, #0
 800a58c:	4628      	mov	r0, r5
 800a58e:	b005      	add	sp, #20
 800a590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a594:	2500      	movs	r5, #0
 800a596:	462c      	mov	r4, r5
 800a598:	e7b0      	b.n	800a4fc <__gethex+0x68>
 800a59a:	2c00      	cmp	r4, #0
 800a59c:	d1c7      	bne.n	800a52e <__gethex+0x9a>
 800a59e:	4627      	mov	r7, r4
 800a5a0:	e7c7      	b.n	800a532 <__gethex+0x9e>
 800a5a2:	464e      	mov	r6, r9
 800a5a4:	462f      	mov	r7, r5
 800a5a6:	2501      	movs	r5, #1
 800a5a8:	e7c3      	b.n	800a532 <__gethex+0x9e>
 800a5aa:	2400      	movs	r4, #0
 800a5ac:	1cb1      	adds	r1, r6, #2
 800a5ae:	e7cc      	b.n	800a54a <__gethex+0xb6>
 800a5b0:	2401      	movs	r4, #1
 800a5b2:	e7fb      	b.n	800a5ac <__gethex+0x118>
 800a5b4:	fb03 0002 	mla	r0, r3, r2, r0
 800a5b8:	e7ce      	b.n	800a558 <__gethex+0xc4>
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	e7de      	b.n	800a57c <__gethex+0xe8>
 800a5be:	eba6 0309 	sub.w	r3, r6, r9
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	2b07      	cmp	r3, #7
 800a5c8:	dc0a      	bgt.n	800a5e0 <__gethex+0x14c>
 800a5ca:	9801      	ldr	r0, [sp, #4]
 800a5cc:	f000 faf4 	bl	800abb8 <_Balloc>
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	b940      	cbnz	r0, 800a5e6 <__gethex+0x152>
 800a5d4:	4b5c      	ldr	r3, [pc, #368]	@ (800a748 <__gethex+0x2b4>)
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	21e4      	movs	r1, #228	@ 0xe4
 800a5da:	485c      	ldr	r0, [pc, #368]	@ (800a74c <__gethex+0x2b8>)
 800a5dc:	f001 f868 	bl	800b6b0 <__assert_func>
 800a5e0:	3101      	adds	r1, #1
 800a5e2:	105b      	asrs	r3, r3, #1
 800a5e4:	e7ef      	b.n	800a5c6 <__gethex+0x132>
 800a5e6:	f100 0a14 	add.w	sl, r0, #20
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	4655      	mov	r5, sl
 800a5ee:	469b      	mov	fp, r3
 800a5f0:	45b1      	cmp	r9, r6
 800a5f2:	d337      	bcc.n	800a664 <__gethex+0x1d0>
 800a5f4:	f845 bb04 	str.w	fp, [r5], #4
 800a5f8:	eba5 050a 	sub.w	r5, r5, sl
 800a5fc:	10ad      	asrs	r5, r5, #2
 800a5fe:	6125      	str	r5, [r4, #16]
 800a600:	4658      	mov	r0, fp
 800a602:	f000 fbcb 	bl	800ad9c <__hi0bits>
 800a606:	016d      	lsls	r5, r5, #5
 800a608:	f8d8 6000 	ldr.w	r6, [r8]
 800a60c:	1a2d      	subs	r5, r5, r0
 800a60e:	42b5      	cmp	r5, r6
 800a610:	dd54      	ble.n	800a6bc <__gethex+0x228>
 800a612:	1bad      	subs	r5, r5, r6
 800a614:	4629      	mov	r1, r5
 800a616:	4620      	mov	r0, r4
 800a618:	f000 ff5f 	bl	800b4da <__any_on>
 800a61c:	4681      	mov	r9, r0
 800a61e:	b178      	cbz	r0, 800a640 <__gethex+0x1ac>
 800a620:	1e6b      	subs	r3, r5, #1
 800a622:	1159      	asrs	r1, r3, #5
 800a624:	f003 021f 	and.w	r2, r3, #31
 800a628:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a62c:	f04f 0901 	mov.w	r9, #1
 800a630:	fa09 f202 	lsl.w	r2, r9, r2
 800a634:	420a      	tst	r2, r1
 800a636:	d003      	beq.n	800a640 <__gethex+0x1ac>
 800a638:	454b      	cmp	r3, r9
 800a63a:	dc36      	bgt.n	800a6aa <__gethex+0x216>
 800a63c:	f04f 0902 	mov.w	r9, #2
 800a640:	4629      	mov	r1, r5
 800a642:	4620      	mov	r0, r4
 800a644:	f7ff febe 	bl	800a3c4 <rshift>
 800a648:	442f      	add	r7, r5
 800a64a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a64e:	42bb      	cmp	r3, r7
 800a650:	da42      	bge.n	800a6d8 <__gethex+0x244>
 800a652:	9801      	ldr	r0, [sp, #4]
 800a654:	4621      	mov	r1, r4
 800a656:	f000 faef 	bl	800ac38 <_Bfree>
 800a65a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a65c:	2300      	movs	r3, #0
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	25a3      	movs	r5, #163	@ 0xa3
 800a662:	e793      	b.n	800a58c <__gethex+0xf8>
 800a664:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a668:	2a2e      	cmp	r2, #46	@ 0x2e
 800a66a:	d012      	beq.n	800a692 <__gethex+0x1fe>
 800a66c:	2b20      	cmp	r3, #32
 800a66e:	d104      	bne.n	800a67a <__gethex+0x1e6>
 800a670:	f845 bb04 	str.w	fp, [r5], #4
 800a674:	f04f 0b00 	mov.w	fp, #0
 800a678:	465b      	mov	r3, fp
 800a67a:	7830      	ldrb	r0, [r6, #0]
 800a67c:	9303      	str	r3, [sp, #12]
 800a67e:	f7ff fef3 	bl	800a468 <__hexdig_fun>
 800a682:	9b03      	ldr	r3, [sp, #12]
 800a684:	f000 000f 	and.w	r0, r0, #15
 800a688:	4098      	lsls	r0, r3
 800a68a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a68e:	3304      	adds	r3, #4
 800a690:	e7ae      	b.n	800a5f0 <__gethex+0x15c>
 800a692:	45b1      	cmp	r9, r6
 800a694:	d8ea      	bhi.n	800a66c <__gethex+0x1d8>
 800a696:	492b      	ldr	r1, [pc, #172]	@ (800a744 <__gethex+0x2b0>)
 800a698:	9303      	str	r3, [sp, #12]
 800a69a:	2201      	movs	r2, #1
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7ff fda8 	bl	800a1f2 <strncmp>
 800a6a2:	9b03      	ldr	r3, [sp, #12]
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d1e1      	bne.n	800a66c <__gethex+0x1d8>
 800a6a8:	e7a2      	b.n	800a5f0 <__gethex+0x15c>
 800a6aa:	1ea9      	subs	r1, r5, #2
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f000 ff14 	bl	800b4da <__any_on>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d0c2      	beq.n	800a63c <__gethex+0x1a8>
 800a6b6:	f04f 0903 	mov.w	r9, #3
 800a6ba:	e7c1      	b.n	800a640 <__gethex+0x1ac>
 800a6bc:	da09      	bge.n	800a6d2 <__gethex+0x23e>
 800a6be:	1b75      	subs	r5, r6, r5
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	9801      	ldr	r0, [sp, #4]
 800a6c4:	462a      	mov	r2, r5
 800a6c6:	f000 fccf 	bl	800b068 <__lshift>
 800a6ca:	1b7f      	subs	r7, r7, r5
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	f100 0a14 	add.w	sl, r0, #20
 800a6d2:	f04f 0900 	mov.w	r9, #0
 800a6d6:	e7b8      	b.n	800a64a <__gethex+0x1b6>
 800a6d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6dc:	42bd      	cmp	r5, r7
 800a6de:	dd6f      	ble.n	800a7c0 <__gethex+0x32c>
 800a6e0:	1bed      	subs	r5, r5, r7
 800a6e2:	42ae      	cmp	r6, r5
 800a6e4:	dc34      	bgt.n	800a750 <__gethex+0x2bc>
 800a6e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d022      	beq.n	800a734 <__gethex+0x2a0>
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d024      	beq.n	800a73c <__gethex+0x2a8>
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d115      	bne.n	800a722 <__gethex+0x28e>
 800a6f6:	42ae      	cmp	r6, r5
 800a6f8:	d113      	bne.n	800a722 <__gethex+0x28e>
 800a6fa:	2e01      	cmp	r6, #1
 800a6fc:	d10b      	bne.n	800a716 <__gethex+0x282>
 800a6fe:	9a02      	ldr	r2, [sp, #8]
 800a700:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a704:	6013      	str	r3, [r2, #0]
 800a706:	2301      	movs	r3, #1
 800a708:	6123      	str	r3, [r4, #16]
 800a70a:	f8ca 3000 	str.w	r3, [sl]
 800a70e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a710:	2562      	movs	r5, #98	@ 0x62
 800a712:	601c      	str	r4, [r3, #0]
 800a714:	e73a      	b.n	800a58c <__gethex+0xf8>
 800a716:	1e71      	subs	r1, r6, #1
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 fede 	bl	800b4da <__any_on>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d1ed      	bne.n	800a6fe <__gethex+0x26a>
 800a722:	9801      	ldr	r0, [sp, #4]
 800a724:	4621      	mov	r1, r4
 800a726:	f000 fa87 	bl	800ac38 <_Bfree>
 800a72a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a72c:	2300      	movs	r3, #0
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	2550      	movs	r5, #80	@ 0x50
 800a732:	e72b      	b.n	800a58c <__gethex+0xf8>
 800a734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1f3      	bne.n	800a722 <__gethex+0x28e>
 800a73a:	e7e0      	b.n	800a6fe <__gethex+0x26a>
 800a73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1dd      	bne.n	800a6fe <__gethex+0x26a>
 800a742:	e7ee      	b.n	800a722 <__gethex+0x28e>
 800a744:	0800c028 	.word	0x0800c028
 800a748:	0800c090 	.word	0x0800c090
 800a74c:	0800c0a1 	.word	0x0800c0a1
 800a750:	1e6f      	subs	r7, r5, #1
 800a752:	f1b9 0f00 	cmp.w	r9, #0
 800a756:	d130      	bne.n	800a7ba <__gethex+0x326>
 800a758:	b127      	cbz	r7, 800a764 <__gethex+0x2d0>
 800a75a:	4639      	mov	r1, r7
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 febc 	bl	800b4da <__any_on>
 800a762:	4681      	mov	r9, r0
 800a764:	117a      	asrs	r2, r7, #5
 800a766:	2301      	movs	r3, #1
 800a768:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a76c:	f007 071f 	and.w	r7, r7, #31
 800a770:	40bb      	lsls	r3, r7
 800a772:	4213      	tst	r3, r2
 800a774:	4629      	mov	r1, r5
 800a776:	4620      	mov	r0, r4
 800a778:	bf18      	it	ne
 800a77a:	f049 0902 	orrne.w	r9, r9, #2
 800a77e:	f7ff fe21 	bl	800a3c4 <rshift>
 800a782:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a786:	1b76      	subs	r6, r6, r5
 800a788:	2502      	movs	r5, #2
 800a78a:	f1b9 0f00 	cmp.w	r9, #0
 800a78e:	d047      	beq.n	800a820 <__gethex+0x38c>
 800a790:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a794:	2b02      	cmp	r3, #2
 800a796:	d015      	beq.n	800a7c4 <__gethex+0x330>
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d017      	beq.n	800a7cc <__gethex+0x338>
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d109      	bne.n	800a7b4 <__gethex+0x320>
 800a7a0:	f019 0f02 	tst.w	r9, #2
 800a7a4:	d006      	beq.n	800a7b4 <__gethex+0x320>
 800a7a6:	f8da 3000 	ldr.w	r3, [sl]
 800a7aa:	ea49 0903 	orr.w	r9, r9, r3
 800a7ae:	f019 0f01 	tst.w	r9, #1
 800a7b2:	d10e      	bne.n	800a7d2 <__gethex+0x33e>
 800a7b4:	f045 0510 	orr.w	r5, r5, #16
 800a7b8:	e032      	b.n	800a820 <__gethex+0x38c>
 800a7ba:	f04f 0901 	mov.w	r9, #1
 800a7be:	e7d1      	b.n	800a764 <__gethex+0x2d0>
 800a7c0:	2501      	movs	r5, #1
 800a7c2:	e7e2      	b.n	800a78a <__gethex+0x2f6>
 800a7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7c6:	f1c3 0301 	rsb	r3, r3, #1
 800a7ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0f0      	beq.n	800a7b4 <__gethex+0x320>
 800a7d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7d6:	f104 0314 	add.w	r3, r4, #20
 800a7da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7e2:	f04f 0c00 	mov.w	ip, #0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ec:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a7f0:	d01b      	beq.n	800a82a <__gethex+0x396>
 800a7f2:	3201      	adds	r2, #1
 800a7f4:	6002      	str	r2, [r0, #0]
 800a7f6:	2d02      	cmp	r5, #2
 800a7f8:	f104 0314 	add.w	r3, r4, #20
 800a7fc:	d13c      	bne.n	800a878 <__gethex+0x3e4>
 800a7fe:	f8d8 2000 	ldr.w	r2, [r8]
 800a802:	3a01      	subs	r2, #1
 800a804:	42b2      	cmp	r2, r6
 800a806:	d109      	bne.n	800a81c <__gethex+0x388>
 800a808:	1171      	asrs	r1, r6, #5
 800a80a:	2201      	movs	r2, #1
 800a80c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a810:	f006 061f 	and.w	r6, r6, #31
 800a814:	fa02 f606 	lsl.w	r6, r2, r6
 800a818:	421e      	tst	r6, r3
 800a81a:	d13a      	bne.n	800a892 <__gethex+0x3fe>
 800a81c:	f045 0520 	orr.w	r5, r5, #32
 800a820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a822:	601c      	str	r4, [r3, #0]
 800a824:	9b02      	ldr	r3, [sp, #8]
 800a826:	601f      	str	r7, [r3, #0]
 800a828:	e6b0      	b.n	800a58c <__gethex+0xf8>
 800a82a:	4299      	cmp	r1, r3
 800a82c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a830:	d8d9      	bhi.n	800a7e6 <__gethex+0x352>
 800a832:	68a3      	ldr	r3, [r4, #8]
 800a834:	459b      	cmp	fp, r3
 800a836:	db17      	blt.n	800a868 <__gethex+0x3d4>
 800a838:	6861      	ldr	r1, [r4, #4]
 800a83a:	9801      	ldr	r0, [sp, #4]
 800a83c:	3101      	adds	r1, #1
 800a83e:	f000 f9bb 	bl	800abb8 <_Balloc>
 800a842:	4681      	mov	r9, r0
 800a844:	b918      	cbnz	r0, 800a84e <__gethex+0x3ba>
 800a846:	4b1a      	ldr	r3, [pc, #104]	@ (800a8b0 <__gethex+0x41c>)
 800a848:	4602      	mov	r2, r0
 800a84a:	2184      	movs	r1, #132	@ 0x84
 800a84c:	e6c5      	b.n	800a5da <__gethex+0x146>
 800a84e:	6922      	ldr	r2, [r4, #16]
 800a850:	3202      	adds	r2, #2
 800a852:	f104 010c 	add.w	r1, r4, #12
 800a856:	0092      	lsls	r2, r2, #2
 800a858:	300c      	adds	r0, #12
 800a85a:	f7ff fd50 	bl	800a2fe <memcpy>
 800a85e:	4621      	mov	r1, r4
 800a860:	9801      	ldr	r0, [sp, #4]
 800a862:	f000 f9e9 	bl	800ac38 <_Bfree>
 800a866:	464c      	mov	r4, r9
 800a868:	6923      	ldr	r3, [r4, #16]
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a870:	6122      	str	r2, [r4, #16]
 800a872:	2201      	movs	r2, #1
 800a874:	615a      	str	r2, [r3, #20]
 800a876:	e7be      	b.n	800a7f6 <__gethex+0x362>
 800a878:	6922      	ldr	r2, [r4, #16]
 800a87a:	455a      	cmp	r2, fp
 800a87c:	dd0b      	ble.n	800a896 <__gethex+0x402>
 800a87e:	2101      	movs	r1, #1
 800a880:	4620      	mov	r0, r4
 800a882:	f7ff fd9f 	bl	800a3c4 <rshift>
 800a886:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a88a:	3701      	adds	r7, #1
 800a88c:	42bb      	cmp	r3, r7
 800a88e:	f6ff aee0 	blt.w	800a652 <__gethex+0x1be>
 800a892:	2501      	movs	r5, #1
 800a894:	e7c2      	b.n	800a81c <__gethex+0x388>
 800a896:	f016 061f 	ands.w	r6, r6, #31
 800a89a:	d0fa      	beq.n	800a892 <__gethex+0x3fe>
 800a89c:	4453      	add	r3, sl
 800a89e:	f1c6 0620 	rsb	r6, r6, #32
 800a8a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a8a6:	f000 fa79 	bl	800ad9c <__hi0bits>
 800a8aa:	42b0      	cmp	r0, r6
 800a8ac:	dbe7      	blt.n	800a87e <__gethex+0x3ea>
 800a8ae:	e7f0      	b.n	800a892 <__gethex+0x3fe>
 800a8b0:	0800c090 	.word	0x0800c090

0800a8b4 <L_shift>:
 800a8b4:	f1c2 0208 	rsb	r2, r2, #8
 800a8b8:	0092      	lsls	r2, r2, #2
 800a8ba:	b570      	push	{r4, r5, r6, lr}
 800a8bc:	f1c2 0620 	rsb	r6, r2, #32
 800a8c0:	6843      	ldr	r3, [r0, #4]
 800a8c2:	6804      	ldr	r4, [r0, #0]
 800a8c4:	fa03 f506 	lsl.w	r5, r3, r6
 800a8c8:	432c      	orrs	r4, r5
 800a8ca:	40d3      	lsrs	r3, r2
 800a8cc:	6004      	str	r4, [r0, #0]
 800a8ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8d2:	4288      	cmp	r0, r1
 800a8d4:	d3f4      	bcc.n	800a8c0 <L_shift+0xc>
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}

0800a8d8 <__match>:
 800a8d8:	b530      	push	{r4, r5, lr}
 800a8da:	6803      	ldr	r3, [r0, #0]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8e2:	b914      	cbnz	r4, 800a8ea <__match+0x12>
 800a8e4:	6003      	str	r3, [r0, #0]
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	bd30      	pop	{r4, r5, pc}
 800a8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8f2:	2d19      	cmp	r5, #25
 800a8f4:	bf98      	it	ls
 800a8f6:	3220      	addls	r2, #32
 800a8f8:	42a2      	cmp	r2, r4
 800a8fa:	d0f0      	beq.n	800a8de <__match+0x6>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e7f3      	b.n	800a8e8 <__match+0x10>

0800a900 <__hexnan>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	680b      	ldr	r3, [r1, #0]
 800a906:	6801      	ldr	r1, [r0, #0]
 800a908:	115e      	asrs	r6, r3, #5
 800a90a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a90e:	f013 031f 	ands.w	r3, r3, #31
 800a912:	b087      	sub	sp, #28
 800a914:	bf18      	it	ne
 800a916:	3604      	addne	r6, #4
 800a918:	2500      	movs	r5, #0
 800a91a:	1f37      	subs	r7, r6, #4
 800a91c:	4682      	mov	sl, r0
 800a91e:	4690      	mov	r8, r2
 800a920:	9301      	str	r3, [sp, #4]
 800a922:	f846 5c04 	str.w	r5, [r6, #-4]
 800a926:	46b9      	mov	r9, r7
 800a928:	463c      	mov	r4, r7
 800a92a:	9502      	str	r5, [sp, #8]
 800a92c:	46ab      	mov	fp, r5
 800a92e:	784a      	ldrb	r2, [r1, #1]
 800a930:	1c4b      	adds	r3, r1, #1
 800a932:	9303      	str	r3, [sp, #12]
 800a934:	b342      	cbz	r2, 800a988 <__hexnan+0x88>
 800a936:	4610      	mov	r0, r2
 800a938:	9105      	str	r1, [sp, #20]
 800a93a:	9204      	str	r2, [sp, #16]
 800a93c:	f7ff fd94 	bl	800a468 <__hexdig_fun>
 800a940:	2800      	cmp	r0, #0
 800a942:	d151      	bne.n	800a9e8 <__hexnan+0xe8>
 800a944:	9a04      	ldr	r2, [sp, #16]
 800a946:	9905      	ldr	r1, [sp, #20]
 800a948:	2a20      	cmp	r2, #32
 800a94a:	d818      	bhi.n	800a97e <__hexnan+0x7e>
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	459b      	cmp	fp, r3
 800a950:	dd13      	ble.n	800a97a <__hexnan+0x7a>
 800a952:	454c      	cmp	r4, r9
 800a954:	d206      	bcs.n	800a964 <__hexnan+0x64>
 800a956:	2d07      	cmp	r5, #7
 800a958:	dc04      	bgt.n	800a964 <__hexnan+0x64>
 800a95a:	462a      	mov	r2, r5
 800a95c:	4649      	mov	r1, r9
 800a95e:	4620      	mov	r0, r4
 800a960:	f7ff ffa8 	bl	800a8b4 <L_shift>
 800a964:	4544      	cmp	r4, r8
 800a966:	d952      	bls.n	800aa0e <__hexnan+0x10e>
 800a968:	2300      	movs	r3, #0
 800a96a:	f1a4 0904 	sub.w	r9, r4, #4
 800a96e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a972:	f8cd b008 	str.w	fp, [sp, #8]
 800a976:	464c      	mov	r4, r9
 800a978:	461d      	mov	r5, r3
 800a97a:	9903      	ldr	r1, [sp, #12]
 800a97c:	e7d7      	b.n	800a92e <__hexnan+0x2e>
 800a97e:	2a29      	cmp	r2, #41	@ 0x29
 800a980:	d157      	bne.n	800aa32 <__hexnan+0x132>
 800a982:	3102      	adds	r1, #2
 800a984:	f8ca 1000 	str.w	r1, [sl]
 800a988:	f1bb 0f00 	cmp.w	fp, #0
 800a98c:	d051      	beq.n	800aa32 <__hexnan+0x132>
 800a98e:	454c      	cmp	r4, r9
 800a990:	d206      	bcs.n	800a9a0 <__hexnan+0xa0>
 800a992:	2d07      	cmp	r5, #7
 800a994:	dc04      	bgt.n	800a9a0 <__hexnan+0xa0>
 800a996:	462a      	mov	r2, r5
 800a998:	4649      	mov	r1, r9
 800a99a:	4620      	mov	r0, r4
 800a99c:	f7ff ff8a 	bl	800a8b4 <L_shift>
 800a9a0:	4544      	cmp	r4, r8
 800a9a2:	d936      	bls.n	800aa12 <__hexnan+0x112>
 800a9a4:	f1a8 0204 	sub.w	r2, r8, #4
 800a9a8:	4623      	mov	r3, r4
 800a9aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9b2:	429f      	cmp	r7, r3
 800a9b4:	d2f9      	bcs.n	800a9aa <__hexnan+0xaa>
 800a9b6:	1b3b      	subs	r3, r7, r4
 800a9b8:	f023 0303 	bic.w	r3, r3, #3
 800a9bc:	3304      	adds	r3, #4
 800a9be:	3401      	adds	r4, #1
 800a9c0:	3e03      	subs	r6, #3
 800a9c2:	42b4      	cmp	r4, r6
 800a9c4:	bf88      	it	hi
 800a9c6:	2304      	movhi	r3, #4
 800a9c8:	4443      	add	r3, r8
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f843 2b04 	str.w	r2, [r3], #4
 800a9d0:	429f      	cmp	r7, r3
 800a9d2:	d2fb      	bcs.n	800a9cc <__hexnan+0xcc>
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	b91b      	cbnz	r3, 800a9e0 <__hexnan+0xe0>
 800a9d8:	4547      	cmp	r7, r8
 800a9da:	d128      	bne.n	800aa2e <__hexnan+0x12e>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	603b      	str	r3, [r7, #0]
 800a9e0:	2005      	movs	r0, #5
 800a9e2:	b007      	add	sp, #28
 800a9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e8:	3501      	adds	r5, #1
 800a9ea:	2d08      	cmp	r5, #8
 800a9ec:	f10b 0b01 	add.w	fp, fp, #1
 800a9f0:	dd06      	ble.n	800aa00 <__hexnan+0x100>
 800a9f2:	4544      	cmp	r4, r8
 800a9f4:	d9c1      	bls.n	800a97a <__hexnan+0x7a>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9fc:	2501      	movs	r5, #1
 800a9fe:	3c04      	subs	r4, #4
 800aa00:	6822      	ldr	r2, [r4, #0]
 800aa02:	f000 000f 	and.w	r0, r0, #15
 800aa06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa0a:	6020      	str	r0, [r4, #0]
 800aa0c:	e7b5      	b.n	800a97a <__hexnan+0x7a>
 800aa0e:	2508      	movs	r5, #8
 800aa10:	e7b3      	b.n	800a97a <__hexnan+0x7a>
 800aa12:	9b01      	ldr	r3, [sp, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d0dd      	beq.n	800a9d4 <__hexnan+0xd4>
 800aa18:	f1c3 0320 	rsb	r3, r3, #32
 800aa1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa20:	40da      	lsrs	r2, r3
 800aa22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aa26:	4013      	ands	r3, r2
 800aa28:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa2c:	e7d2      	b.n	800a9d4 <__hexnan+0xd4>
 800aa2e:	3f04      	subs	r7, #4
 800aa30:	e7d0      	b.n	800a9d4 <__hexnan+0xd4>
 800aa32:	2004      	movs	r0, #4
 800aa34:	e7d5      	b.n	800a9e2 <__hexnan+0xe2>
	...

0800aa38 <sbrk_aligned>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	4e0f      	ldr	r6, [pc, #60]	@ (800aa78 <sbrk_aligned+0x40>)
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	6831      	ldr	r1, [r6, #0]
 800aa40:	4605      	mov	r5, r0
 800aa42:	b911      	cbnz	r1, 800aa4a <sbrk_aligned+0x12>
 800aa44:	f000 fe24 	bl	800b690 <_sbrk_r>
 800aa48:	6030      	str	r0, [r6, #0]
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f000 fe1f 	bl	800b690 <_sbrk_r>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	d103      	bne.n	800aa5e <sbrk_aligned+0x26>
 800aa56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	bd70      	pop	{r4, r5, r6, pc}
 800aa5e:	1cc4      	adds	r4, r0, #3
 800aa60:	f024 0403 	bic.w	r4, r4, #3
 800aa64:	42a0      	cmp	r0, r4
 800aa66:	d0f8      	beq.n	800aa5a <sbrk_aligned+0x22>
 800aa68:	1a21      	subs	r1, r4, r0
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 fe10 	bl	800b690 <_sbrk_r>
 800aa70:	3001      	adds	r0, #1
 800aa72:	d1f2      	bne.n	800aa5a <sbrk_aligned+0x22>
 800aa74:	e7ef      	b.n	800aa56 <sbrk_aligned+0x1e>
 800aa76:	bf00      	nop
 800aa78:	20002150 	.word	0x20002150

0800aa7c <_malloc_r>:
 800aa7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa80:	1ccd      	adds	r5, r1, #3
 800aa82:	f025 0503 	bic.w	r5, r5, #3
 800aa86:	3508      	adds	r5, #8
 800aa88:	2d0c      	cmp	r5, #12
 800aa8a:	bf38      	it	cc
 800aa8c:	250c      	movcc	r5, #12
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	4606      	mov	r6, r0
 800aa92:	db01      	blt.n	800aa98 <_malloc_r+0x1c>
 800aa94:	42a9      	cmp	r1, r5
 800aa96:	d904      	bls.n	800aaa2 <_malloc_r+0x26>
 800aa98:	230c      	movs	r3, #12
 800aa9a:	6033      	str	r3, [r6, #0]
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab78 <_malloc_r+0xfc>
 800aaa6:	f000 f87b 	bl	800aba0 <__malloc_lock>
 800aaaa:	f8d8 3000 	ldr.w	r3, [r8]
 800aaae:	461c      	mov	r4, r3
 800aab0:	bb44      	cbnz	r4, 800ab04 <_malloc_r+0x88>
 800aab2:	4629      	mov	r1, r5
 800aab4:	4630      	mov	r0, r6
 800aab6:	f7ff ffbf 	bl	800aa38 <sbrk_aligned>
 800aaba:	1c43      	adds	r3, r0, #1
 800aabc:	4604      	mov	r4, r0
 800aabe:	d158      	bne.n	800ab72 <_malloc_r+0xf6>
 800aac0:	f8d8 4000 	ldr.w	r4, [r8]
 800aac4:	4627      	mov	r7, r4
 800aac6:	2f00      	cmp	r7, #0
 800aac8:	d143      	bne.n	800ab52 <_malloc_r+0xd6>
 800aaca:	2c00      	cmp	r4, #0
 800aacc:	d04b      	beq.n	800ab66 <_malloc_r+0xea>
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	4639      	mov	r1, r7
 800aad2:	4630      	mov	r0, r6
 800aad4:	eb04 0903 	add.w	r9, r4, r3
 800aad8:	f000 fdda 	bl	800b690 <_sbrk_r>
 800aadc:	4581      	cmp	r9, r0
 800aade:	d142      	bne.n	800ab66 <_malloc_r+0xea>
 800aae0:	6821      	ldr	r1, [r4, #0]
 800aae2:	1a6d      	subs	r5, r5, r1
 800aae4:	4629      	mov	r1, r5
 800aae6:	4630      	mov	r0, r6
 800aae8:	f7ff ffa6 	bl	800aa38 <sbrk_aligned>
 800aaec:	3001      	adds	r0, #1
 800aaee:	d03a      	beq.n	800ab66 <_malloc_r+0xea>
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	442b      	add	r3, r5
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	f8d8 3000 	ldr.w	r3, [r8]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	bb62      	cbnz	r2, 800ab58 <_malloc_r+0xdc>
 800aafe:	f8c8 7000 	str.w	r7, [r8]
 800ab02:	e00f      	b.n	800ab24 <_malloc_r+0xa8>
 800ab04:	6822      	ldr	r2, [r4, #0]
 800ab06:	1b52      	subs	r2, r2, r5
 800ab08:	d420      	bmi.n	800ab4c <_malloc_r+0xd0>
 800ab0a:	2a0b      	cmp	r2, #11
 800ab0c:	d917      	bls.n	800ab3e <_malloc_r+0xc2>
 800ab0e:	1961      	adds	r1, r4, r5
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	6025      	str	r5, [r4, #0]
 800ab14:	bf18      	it	ne
 800ab16:	6059      	strne	r1, [r3, #4]
 800ab18:	6863      	ldr	r3, [r4, #4]
 800ab1a:	bf08      	it	eq
 800ab1c:	f8c8 1000 	streq.w	r1, [r8]
 800ab20:	5162      	str	r2, [r4, r5]
 800ab22:	604b      	str	r3, [r1, #4]
 800ab24:	4630      	mov	r0, r6
 800ab26:	f000 f841 	bl	800abac <__malloc_unlock>
 800ab2a:	f104 000b 	add.w	r0, r4, #11
 800ab2e:	1d23      	adds	r3, r4, #4
 800ab30:	f020 0007 	bic.w	r0, r0, #7
 800ab34:	1ac2      	subs	r2, r0, r3
 800ab36:	bf1c      	itt	ne
 800ab38:	1a1b      	subne	r3, r3, r0
 800ab3a:	50a3      	strne	r3, [r4, r2]
 800ab3c:	e7af      	b.n	800aa9e <_malloc_r+0x22>
 800ab3e:	6862      	ldr	r2, [r4, #4]
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	bf0c      	ite	eq
 800ab44:	f8c8 2000 	streq.w	r2, [r8]
 800ab48:	605a      	strne	r2, [r3, #4]
 800ab4a:	e7eb      	b.n	800ab24 <_malloc_r+0xa8>
 800ab4c:	4623      	mov	r3, r4
 800ab4e:	6864      	ldr	r4, [r4, #4]
 800ab50:	e7ae      	b.n	800aab0 <_malloc_r+0x34>
 800ab52:	463c      	mov	r4, r7
 800ab54:	687f      	ldr	r7, [r7, #4]
 800ab56:	e7b6      	b.n	800aac6 <_malloc_r+0x4a>
 800ab58:	461a      	mov	r2, r3
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	d1fb      	bne.n	800ab58 <_malloc_r+0xdc>
 800ab60:	2300      	movs	r3, #0
 800ab62:	6053      	str	r3, [r2, #4]
 800ab64:	e7de      	b.n	800ab24 <_malloc_r+0xa8>
 800ab66:	230c      	movs	r3, #12
 800ab68:	6033      	str	r3, [r6, #0]
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f000 f81e 	bl	800abac <__malloc_unlock>
 800ab70:	e794      	b.n	800aa9c <_malloc_r+0x20>
 800ab72:	6005      	str	r5, [r0, #0]
 800ab74:	e7d6      	b.n	800ab24 <_malloc_r+0xa8>
 800ab76:	bf00      	nop
 800ab78:	20002154 	.word	0x20002154

0800ab7c <__ascii_mbtowc>:
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	b901      	cbnz	r1, 800ab82 <__ascii_mbtowc+0x6>
 800ab80:	a901      	add	r1, sp, #4
 800ab82:	b142      	cbz	r2, 800ab96 <__ascii_mbtowc+0x1a>
 800ab84:	b14b      	cbz	r3, 800ab9a <__ascii_mbtowc+0x1e>
 800ab86:	7813      	ldrb	r3, [r2, #0]
 800ab88:	600b      	str	r3, [r1, #0]
 800ab8a:	7812      	ldrb	r2, [r2, #0]
 800ab8c:	1e10      	subs	r0, r2, #0
 800ab8e:	bf18      	it	ne
 800ab90:	2001      	movne	r0, #1
 800ab92:	b002      	add	sp, #8
 800ab94:	4770      	bx	lr
 800ab96:	4610      	mov	r0, r2
 800ab98:	e7fb      	b.n	800ab92 <__ascii_mbtowc+0x16>
 800ab9a:	f06f 0001 	mvn.w	r0, #1
 800ab9e:	e7f8      	b.n	800ab92 <__ascii_mbtowc+0x16>

0800aba0 <__malloc_lock>:
 800aba0:	4801      	ldr	r0, [pc, #4]	@ (800aba8 <__malloc_lock+0x8>)
 800aba2:	f7ff bbaa 	b.w	800a2fa <__retarget_lock_acquire_recursive>
 800aba6:	bf00      	nop
 800aba8:	2000214c 	.word	0x2000214c

0800abac <__malloc_unlock>:
 800abac:	4801      	ldr	r0, [pc, #4]	@ (800abb4 <__malloc_unlock+0x8>)
 800abae:	f7ff bba5 	b.w	800a2fc <__retarget_lock_release_recursive>
 800abb2:	bf00      	nop
 800abb4:	2000214c 	.word	0x2000214c

0800abb8 <_Balloc>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	69c6      	ldr	r6, [r0, #28]
 800abbc:	4604      	mov	r4, r0
 800abbe:	460d      	mov	r5, r1
 800abc0:	b976      	cbnz	r6, 800abe0 <_Balloc+0x28>
 800abc2:	2010      	movs	r0, #16
 800abc4:	f000 fda6 	bl	800b714 <malloc>
 800abc8:	4602      	mov	r2, r0
 800abca:	61e0      	str	r0, [r4, #28]
 800abcc:	b920      	cbnz	r0, 800abd8 <_Balloc+0x20>
 800abce:	4b18      	ldr	r3, [pc, #96]	@ (800ac30 <_Balloc+0x78>)
 800abd0:	4818      	ldr	r0, [pc, #96]	@ (800ac34 <_Balloc+0x7c>)
 800abd2:	216b      	movs	r1, #107	@ 0x6b
 800abd4:	f000 fd6c 	bl	800b6b0 <__assert_func>
 800abd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abdc:	6006      	str	r6, [r0, #0]
 800abde:	60c6      	str	r6, [r0, #12]
 800abe0:	69e6      	ldr	r6, [r4, #28]
 800abe2:	68f3      	ldr	r3, [r6, #12]
 800abe4:	b183      	cbz	r3, 800ac08 <_Balloc+0x50>
 800abe6:	69e3      	ldr	r3, [r4, #28]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abee:	b9b8      	cbnz	r0, 800ac20 <_Balloc+0x68>
 800abf0:	2101      	movs	r1, #1
 800abf2:	fa01 f605 	lsl.w	r6, r1, r5
 800abf6:	1d72      	adds	r2, r6, #5
 800abf8:	0092      	lsls	r2, r2, #2
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 fd76 	bl	800b6ec <_calloc_r>
 800ac00:	b160      	cbz	r0, 800ac1c <_Balloc+0x64>
 800ac02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac06:	e00e      	b.n	800ac26 <_Balloc+0x6e>
 800ac08:	2221      	movs	r2, #33	@ 0x21
 800ac0a:	2104      	movs	r1, #4
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 fd6d 	bl	800b6ec <_calloc_r>
 800ac12:	69e3      	ldr	r3, [r4, #28]
 800ac14:	60f0      	str	r0, [r6, #12]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1e4      	bne.n	800abe6 <_Balloc+0x2e>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	6802      	ldr	r2, [r0, #0]
 800ac22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac26:	2300      	movs	r3, #0
 800ac28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac2c:	e7f7      	b.n	800ac1e <_Balloc+0x66>
 800ac2e:	bf00      	nop
 800ac30:	0800c101 	.word	0x0800c101
 800ac34:	0800c118 	.word	0x0800c118

0800ac38 <_Bfree>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	69c6      	ldr	r6, [r0, #28]
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	b976      	cbnz	r6, 800ac60 <_Bfree+0x28>
 800ac42:	2010      	movs	r0, #16
 800ac44:	f000 fd66 	bl	800b714 <malloc>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	61e8      	str	r0, [r5, #28]
 800ac4c:	b920      	cbnz	r0, 800ac58 <_Bfree+0x20>
 800ac4e:	4b09      	ldr	r3, [pc, #36]	@ (800ac74 <_Bfree+0x3c>)
 800ac50:	4809      	ldr	r0, [pc, #36]	@ (800ac78 <_Bfree+0x40>)
 800ac52:	218f      	movs	r1, #143	@ 0x8f
 800ac54:	f000 fd2c 	bl	800b6b0 <__assert_func>
 800ac58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac5c:	6006      	str	r6, [r0, #0]
 800ac5e:	60c6      	str	r6, [r0, #12]
 800ac60:	b13c      	cbz	r4, 800ac72 <_Bfree+0x3a>
 800ac62:	69eb      	ldr	r3, [r5, #28]
 800ac64:	6862      	ldr	r2, [r4, #4]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac6c:	6021      	str	r1, [r4, #0]
 800ac6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
 800ac74:	0800c101 	.word	0x0800c101
 800ac78:	0800c118 	.word	0x0800c118

0800ac7c <__multadd>:
 800ac7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac80:	690d      	ldr	r5, [r1, #16]
 800ac82:	4607      	mov	r7, r0
 800ac84:	460c      	mov	r4, r1
 800ac86:	461e      	mov	r6, r3
 800ac88:	f101 0c14 	add.w	ip, r1, #20
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac92:	b299      	uxth	r1, r3
 800ac94:	fb02 6101 	mla	r1, r2, r1, r6
 800ac98:	0c1e      	lsrs	r6, r3, #16
 800ac9a:	0c0b      	lsrs	r3, r1, #16
 800ac9c:	fb02 3306 	mla	r3, r2, r6, r3
 800aca0:	b289      	uxth	r1, r1
 800aca2:	3001      	adds	r0, #1
 800aca4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aca8:	4285      	cmp	r5, r0
 800acaa:	f84c 1b04 	str.w	r1, [ip], #4
 800acae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acb2:	dcec      	bgt.n	800ac8e <__multadd+0x12>
 800acb4:	b30e      	cbz	r6, 800acfa <__multadd+0x7e>
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	42ab      	cmp	r3, r5
 800acba:	dc19      	bgt.n	800acf0 <__multadd+0x74>
 800acbc:	6861      	ldr	r1, [r4, #4]
 800acbe:	4638      	mov	r0, r7
 800acc0:	3101      	adds	r1, #1
 800acc2:	f7ff ff79 	bl	800abb8 <_Balloc>
 800acc6:	4680      	mov	r8, r0
 800acc8:	b928      	cbnz	r0, 800acd6 <__multadd+0x5a>
 800acca:	4602      	mov	r2, r0
 800accc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad00 <__multadd+0x84>)
 800acce:	480d      	ldr	r0, [pc, #52]	@ (800ad04 <__multadd+0x88>)
 800acd0:	21ba      	movs	r1, #186	@ 0xba
 800acd2:	f000 fced 	bl	800b6b0 <__assert_func>
 800acd6:	6922      	ldr	r2, [r4, #16]
 800acd8:	3202      	adds	r2, #2
 800acda:	f104 010c 	add.w	r1, r4, #12
 800acde:	0092      	lsls	r2, r2, #2
 800ace0:	300c      	adds	r0, #12
 800ace2:	f7ff fb0c 	bl	800a2fe <memcpy>
 800ace6:	4621      	mov	r1, r4
 800ace8:	4638      	mov	r0, r7
 800acea:	f7ff ffa5 	bl	800ac38 <_Bfree>
 800acee:	4644      	mov	r4, r8
 800acf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acf4:	3501      	adds	r5, #1
 800acf6:	615e      	str	r6, [r3, #20]
 800acf8:	6125      	str	r5, [r4, #16]
 800acfa:	4620      	mov	r0, r4
 800acfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad00:	0800c090 	.word	0x0800c090
 800ad04:	0800c118 	.word	0x0800c118

0800ad08 <__s2b>:
 800ad08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	4615      	mov	r5, r2
 800ad10:	461f      	mov	r7, r3
 800ad12:	2209      	movs	r2, #9
 800ad14:	3308      	adds	r3, #8
 800ad16:	4606      	mov	r6, r0
 800ad18:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	2201      	movs	r2, #1
 800ad20:	429a      	cmp	r2, r3
 800ad22:	db09      	blt.n	800ad38 <__s2b+0x30>
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff ff47 	bl	800abb8 <_Balloc>
 800ad2a:	b940      	cbnz	r0, 800ad3e <__s2b+0x36>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	4b19      	ldr	r3, [pc, #100]	@ (800ad94 <__s2b+0x8c>)
 800ad30:	4819      	ldr	r0, [pc, #100]	@ (800ad98 <__s2b+0x90>)
 800ad32:	21d3      	movs	r1, #211	@ 0xd3
 800ad34:	f000 fcbc 	bl	800b6b0 <__assert_func>
 800ad38:	0052      	lsls	r2, r2, #1
 800ad3a:	3101      	adds	r1, #1
 800ad3c:	e7f0      	b.n	800ad20 <__s2b+0x18>
 800ad3e:	9b08      	ldr	r3, [sp, #32]
 800ad40:	6143      	str	r3, [r0, #20]
 800ad42:	2d09      	cmp	r5, #9
 800ad44:	f04f 0301 	mov.w	r3, #1
 800ad48:	6103      	str	r3, [r0, #16]
 800ad4a:	dd16      	ble.n	800ad7a <__s2b+0x72>
 800ad4c:	f104 0909 	add.w	r9, r4, #9
 800ad50:	46c8      	mov	r8, r9
 800ad52:	442c      	add	r4, r5
 800ad54:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad58:	4601      	mov	r1, r0
 800ad5a:	3b30      	subs	r3, #48	@ 0x30
 800ad5c:	220a      	movs	r2, #10
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7ff ff8c 	bl	800ac7c <__multadd>
 800ad64:	45a0      	cmp	r8, r4
 800ad66:	d1f5      	bne.n	800ad54 <__s2b+0x4c>
 800ad68:	f1a5 0408 	sub.w	r4, r5, #8
 800ad6c:	444c      	add	r4, r9
 800ad6e:	1b2d      	subs	r5, r5, r4
 800ad70:	1963      	adds	r3, r4, r5
 800ad72:	42bb      	cmp	r3, r7
 800ad74:	db04      	blt.n	800ad80 <__s2b+0x78>
 800ad76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad7a:	340a      	adds	r4, #10
 800ad7c:	2509      	movs	r5, #9
 800ad7e:	e7f6      	b.n	800ad6e <__s2b+0x66>
 800ad80:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad84:	4601      	mov	r1, r0
 800ad86:	3b30      	subs	r3, #48	@ 0x30
 800ad88:	220a      	movs	r2, #10
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f7ff ff76 	bl	800ac7c <__multadd>
 800ad90:	e7ee      	b.n	800ad70 <__s2b+0x68>
 800ad92:	bf00      	nop
 800ad94:	0800c090 	.word	0x0800c090
 800ad98:	0800c118 	.word	0x0800c118

0800ad9c <__hi0bits>:
 800ad9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ada0:	4603      	mov	r3, r0
 800ada2:	bf36      	itet	cc
 800ada4:	0403      	lslcc	r3, r0, #16
 800ada6:	2000      	movcs	r0, #0
 800ada8:	2010      	movcc	r0, #16
 800adaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adae:	bf3c      	itt	cc
 800adb0:	021b      	lslcc	r3, r3, #8
 800adb2:	3008      	addcc	r0, #8
 800adb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adb8:	bf3c      	itt	cc
 800adba:	011b      	lslcc	r3, r3, #4
 800adbc:	3004      	addcc	r0, #4
 800adbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adc2:	bf3c      	itt	cc
 800adc4:	009b      	lslcc	r3, r3, #2
 800adc6:	3002      	addcc	r0, #2
 800adc8:	2b00      	cmp	r3, #0
 800adca:	db05      	blt.n	800add8 <__hi0bits+0x3c>
 800adcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800add0:	f100 0001 	add.w	r0, r0, #1
 800add4:	bf08      	it	eq
 800add6:	2020      	moveq	r0, #32
 800add8:	4770      	bx	lr

0800adda <__lo0bits>:
 800adda:	6803      	ldr	r3, [r0, #0]
 800addc:	4602      	mov	r2, r0
 800adde:	f013 0007 	ands.w	r0, r3, #7
 800ade2:	d00b      	beq.n	800adfc <__lo0bits+0x22>
 800ade4:	07d9      	lsls	r1, r3, #31
 800ade6:	d421      	bmi.n	800ae2c <__lo0bits+0x52>
 800ade8:	0798      	lsls	r0, r3, #30
 800adea:	bf49      	itett	mi
 800adec:	085b      	lsrmi	r3, r3, #1
 800adee:	089b      	lsrpl	r3, r3, #2
 800adf0:	2001      	movmi	r0, #1
 800adf2:	6013      	strmi	r3, [r2, #0]
 800adf4:	bf5c      	itt	pl
 800adf6:	6013      	strpl	r3, [r2, #0]
 800adf8:	2002      	movpl	r0, #2
 800adfa:	4770      	bx	lr
 800adfc:	b299      	uxth	r1, r3
 800adfe:	b909      	cbnz	r1, 800ae04 <__lo0bits+0x2a>
 800ae00:	0c1b      	lsrs	r3, r3, #16
 800ae02:	2010      	movs	r0, #16
 800ae04:	b2d9      	uxtb	r1, r3
 800ae06:	b909      	cbnz	r1, 800ae0c <__lo0bits+0x32>
 800ae08:	3008      	adds	r0, #8
 800ae0a:	0a1b      	lsrs	r3, r3, #8
 800ae0c:	0719      	lsls	r1, r3, #28
 800ae0e:	bf04      	itt	eq
 800ae10:	091b      	lsreq	r3, r3, #4
 800ae12:	3004      	addeq	r0, #4
 800ae14:	0799      	lsls	r1, r3, #30
 800ae16:	bf04      	itt	eq
 800ae18:	089b      	lsreq	r3, r3, #2
 800ae1a:	3002      	addeq	r0, #2
 800ae1c:	07d9      	lsls	r1, r3, #31
 800ae1e:	d403      	bmi.n	800ae28 <__lo0bits+0x4e>
 800ae20:	085b      	lsrs	r3, r3, #1
 800ae22:	f100 0001 	add.w	r0, r0, #1
 800ae26:	d003      	beq.n	800ae30 <__lo0bits+0x56>
 800ae28:	6013      	str	r3, [r2, #0]
 800ae2a:	4770      	bx	lr
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	4770      	bx	lr
 800ae30:	2020      	movs	r0, #32
 800ae32:	4770      	bx	lr

0800ae34 <__i2b>:
 800ae34:	b510      	push	{r4, lr}
 800ae36:	460c      	mov	r4, r1
 800ae38:	2101      	movs	r1, #1
 800ae3a:	f7ff febd 	bl	800abb8 <_Balloc>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	b928      	cbnz	r0, 800ae4e <__i2b+0x1a>
 800ae42:	4b05      	ldr	r3, [pc, #20]	@ (800ae58 <__i2b+0x24>)
 800ae44:	4805      	ldr	r0, [pc, #20]	@ (800ae5c <__i2b+0x28>)
 800ae46:	f240 1145 	movw	r1, #325	@ 0x145
 800ae4a:	f000 fc31 	bl	800b6b0 <__assert_func>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	6144      	str	r4, [r0, #20]
 800ae52:	6103      	str	r3, [r0, #16]
 800ae54:	bd10      	pop	{r4, pc}
 800ae56:	bf00      	nop
 800ae58:	0800c090 	.word	0x0800c090
 800ae5c:	0800c118 	.word	0x0800c118

0800ae60 <__multiply>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	4614      	mov	r4, r2
 800ae66:	690a      	ldr	r2, [r1, #16]
 800ae68:	6923      	ldr	r3, [r4, #16]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	bfa8      	it	ge
 800ae6e:	4623      	movge	r3, r4
 800ae70:	460f      	mov	r7, r1
 800ae72:	bfa4      	itt	ge
 800ae74:	460c      	movge	r4, r1
 800ae76:	461f      	movge	r7, r3
 800ae78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ae7c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ae80:	68a3      	ldr	r3, [r4, #8]
 800ae82:	6861      	ldr	r1, [r4, #4]
 800ae84:	eb0a 0609 	add.w	r6, sl, r9
 800ae88:	42b3      	cmp	r3, r6
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	bfb8      	it	lt
 800ae8e:	3101      	addlt	r1, #1
 800ae90:	f7ff fe92 	bl	800abb8 <_Balloc>
 800ae94:	b930      	cbnz	r0, 800aea4 <__multiply+0x44>
 800ae96:	4602      	mov	r2, r0
 800ae98:	4b44      	ldr	r3, [pc, #272]	@ (800afac <__multiply+0x14c>)
 800ae9a:	4845      	ldr	r0, [pc, #276]	@ (800afb0 <__multiply+0x150>)
 800ae9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aea0:	f000 fc06 	bl	800b6b0 <__assert_func>
 800aea4:	f100 0514 	add.w	r5, r0, #20
 800aea8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aeac:	462b      	mov	r3, r5
 800aeae:	2200      	movs	r2, #0
 800aeb0:	4543      	cmp	r3, r8
 800aeb2:	d321      	bcc.n	800aef8 <__multiply+0x98>
 800aeb4:	f107 0114 	add.w	r1, r7, #20
 800aeb8:	f104 0214 	add.w	r2, r4, #20
 800aebc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aec0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aec4:	9302      	str	r3, [sp, #8]
 800aec6:	1b13      	subs	r3, r2, r4
 800aec8:	3b15      	subs	r3, #21
 800aeca:	f023 0303 	bic.w	r3, r3, #3
 800aece:	3304      	adds	r3, #4
 800aed0:	f104 0715 	add.w	r7, r4, #21
 800aed4:	42ba      	cmp	r2, r7
 800aed6:	bf38      	it	cc
 800aed8:	2304      	movcc	r3, #4
 800aeda:	9301      	str	r3, [sp, #4]
 800aedc:	9b02      	ldr	r3, [sp, #8]
 800aede:	9103      	str	r1, [sp, #12]
 800aee0:	428b      	cmp	r3, r1
 800aee2:	d80c      	bhi.n	800aefe <__multiply+0x9e>
 800aee4:	2e00      	cmp	r6, #0
 800aee6:	dd03      	ble.n	800aef0 <__multiply+0x90>
 800aee8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d05b      	beq.n	800afa8 <__multiply+0x148>
 800aef0:	6106      	str	r6, [r0, #16]
 800aef2:	b005      	add	sp, #20
 800aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef8:	f843 2b04 	str.w	r2, [r3], #4
 800aefc:	e7d8      	b.n	800aeb0 <__multiply+0x50>
 800aefe:	f8b1 a000 	ldrh.w	sl, [r1]
 800af02:	f1ba 0f00 	cmp.w	sl, #0
 800af06:	d024      	beq.n	800af52 <__multiply+0xf2>
 800af08:	f104 0e14 	add.w	lr, r4, #20
 800af0c:	46a9      	mov	r9, r5
 800af0e:	f04f 0c00 	mov.w	ip, #0
 800af12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af16:	f8d9 3000 	ldr.w	r3, [r9]
 800af1a:	fa1f fb87 	uxth.w	fp, r7
 800af1e:	b29b      	uxth	r3, r3
 800af20:	fb0a 330b 	mla	r3, sl, fp, r3
 800af24:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800af28:	f8d9 7000 	ldr.w	r7, [r9]
 800af2c:	4463      	add	r3, ip
 800af2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af32:	fb0a c70b 	mla	r7, sl, fp, ip
 800af36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af40:	4572      	cmp	r2, lr
 800af42:	f849 3b04 	str.w	r3, [r9], #4
 800af46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af4a:	d8e2      	bhi.n	800af12 <__multiply+0xb2>
 800af4c:	9b01      	ldr	r3, [sp, #4]
 800af4e:	f845 c003 	str.w	ip, [r5, r3]
 800af52:	9b03      	ldr	r3, [sp, #12]
 800af54:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af58:	3104      	adds	r1, #4
 800af5a:	f1b9 0f00 	cmp.w	r9, #0
 800af5e:	d021      	beq.n	800afa4 <__multiply+0x144>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	f104 0c14 	add.w	ip, r4, #20
 800af66:	46ae      	mov	lr, r5
 800af68:	f04f 0a00 	mov.w	sl, #0
 800af6c:	f8bc b000 	ldrh.w	fp, [ip]
 800af70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800af74:	fb09 770b 	mla	r7, r9, fp, r7
 800af78:	4457      	add	r7, sl
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af80:	f84e 3b04 	str.w	r3, [lr], #4
 800af84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af8c:	f8be 3000 	ldrh.w	r3, [lr]
 800af90:	fb09 330a 	mla	r3, r9, sl, r3
 800af94:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800af98:	4562      	cmp	r2, ip
 800af9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af9e:	d8e5      	bhi.n	800af6c <__multiply+0x10c>
 800afa0:	9f01      	ldr	r7, [sp, #4]
 800afa2:	51eb      	str	r3, [r5, r7]
 800afa4:	3504      	adds	r5, #4
 800afa6:	e799      	b.n	800aedc <__multiply+0x7c>
 800afa8:	3e01      	subs	r6, #1
 800afaa:	e79b      	b.n	800aee4 <__multiply+0x84>
 800afac:	0800c090 	.word	0x0800c090
 800afb0:	0800c118 	.word	0x0800c118

0800afb4 <__pow5mult>:
 800afb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb8:	4615      	mov	r5, r2
 800afba:	f012 0203 	ands.w	r2, r2, #3
 800afbe:	4607      	mov	r7, r0
 800afc0:	460e      	mov	r6, r1
 800afc2:	d007      	beq.n	800afd4 <__pow5mult+0x20>
 800afc4:	4c25      	ldr	r4, [pc, #148]	@ (800b05c <__pow5mult+0xa8>)
 800afc6:	3a01      	subs	r2, #1
 800afc8:	2300      	movs	r3, #0
 800afca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afce:	f7ff fe55 	bl	800ac7c <__multadd>
 800afd2:	4606      	mov	r6, r0
 800afd4:	10ad      	asrs	r5, r5, #2
 800afd6:	d03d      	beq.n	800b054 <__pow5mult+0xa0>
 800afd8:	69fc      	ldr	r4, [r7, #28]
 800afda:	b97c      	cbnz	r4, 800affc <__pow5mult+0x48>
 800afdc:	2010      	movs	r0, #16
 800afde:	f000 fb99 	bl	800b714 <malloc>
 800afe2:	4602      	mov	r2, r0
 800afe4:	61f8      	str	r0, [r7, #28]
 800afe6:	b928      	cbnz	r0, 800aff4 <__pow5mult+0x40>
 800afe8:	4b1d      	ldr	r3, [pc, #116]	@ (800b060 <__pow5mult+0xac>)
 800afea:	481e      	ldr	r0, [pc, #120]	@ (800b064 <__pow5mult+0xb0>)
 800afec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aff0:	f000 fb5e 	bl	800b6b0 <__assert_func>
 800aff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aff8:	6004      	str	r4, [r0, #0]
 800affa:	60c4      	str	r4, [r0, #12]
 800affc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b004:	b94c      	cbnz	r4, 800b01a <__pow5mult+0x66>
 800b006:	f240 2171 	movw	r1, #625	@ 0x271
 800b00a:	4638      	mov	r0, r7
 800b00c:	f7ff ff12 	bl	800ae34 <__i2b>
 800b010:	2300      	movs	r3, #0
 800b012:	f8c8 0008 	str.w	r0, [r8, #8]
 800b016:	4604      	mov	r4, r0
 800b018:	6003      	str	r3, [r0, #0]
 800b01a:	f04f 0900 	mov.w	r9, #0
 800b01e:	07eb      	lsls	r3, r5, #31
 800b020:	d50a      	bpl.n	800b038 <__pow5mult+0x84>
 800b022:	4631      	mov	r1, r6
 800b024:	4622      	mov	r2, r4
 800b026:	4638      	mov	r0, r7
 800b028:	f7ff ff1a 	bl	800ae60 <__multiply>
 800b02c:	4631      	mov	r1, r6
 800b02e:	4680      	mov	r8, r0
 800b030:	4638      	mov	r0, r7
 800b032:	f7ff fe01 	bl	800ac38 <_Bfree>
 800b036:	4646      	mov	r6, r8
 800b038:	106d      	asrs	r5, r5, #1
 800b03a:	d00b      	beq.n	800b054 <__pow5mult+0xa0>
 800b03c:	6820      	ldr	r0, [r4, #0]
 800b03e:	b938      	cbnz	r0, 800b050 <__pow5mult+0x9c>
 800b040:	4622      	mov	r2, r4
 800b042:	4621      	mov	r1, r4
 800b044:	4638      	mov	r0, r7
 800b046:	f7ff ff0b 	bl	800ae60 <__multiply>
 800b04a:	6020      	str	r0, [r4, #0]
 800b04c:	f8c0 9000 	str.w	r9, [r0]
 800b050:	4604      	mov	r4, r0
 800b052:	e7e4      	b.n	800b01e <__pow5mult+0x6a>
 800b054:	4630      	mov	r0, r6
 800b056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05a:	bf00      	nop
 800b05c:	0800c174 	.word	0x0800c174
 800b060:	0800c101 	.word	0x0800c101
 800b064:	0800c118 	.word	0x0800c118

0800b068 <__lshift>:
 800b068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b06c:	460c      	mov	r4, r1
 800b06e:	6849      	ldr	r1, [r1, #4]
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	4607      	mov	r7, r0
 800b07a:	4691      	mov	r9, r2
 800b07c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b080:	f108 0601 	add.w	r6, r8, #1
 800b084:	42b3      	cmp	r3, r6
 800b086:	db0b      	blt.n	800b0a0 <__lshift+0x38>
 800b088:	4638      	mov	r0, r7
 800b08a:	f7ff fd95 	bl	800abb8 <_Balloc>
 800b08e:	4605      	mov	r5, r0
 800b090:	b948      	cbnz	r0, 800b0a6 <__lshift+0x3e>
 800b092:	4602      	mov	r2, r0
 800b094:	4b28      	ldr	r3, [pc, #160]	@ (800b138 <__lshift+0xd0>)
 800b096:	4829      	ldr	r0, [pc, #164]	@ (800b13c <__lshift+0xd4>)
 800b098:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b09c:	f000 fb08 	bl	800b6b0 <__assert_func>
 800b0a0:	3101      	adds	r1, #1
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	e7ee      	b.n	800b084 <__lshift+0x1c>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f100 0114 	add.w	r1, r0, #20
 800b0ac:	f100 0210 	add.w	r2, r0, #16
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	4553      	cmp	r3, sl
 800b0b4:	db33      	blt.n	800b11e <__lshift+0xb6>
 800b0b6:	6920      	ldr	r0, [r4, #16]
 800b0b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0bc:	f104 0314 	add.w	r3, r4, #20
 800b0c0:	f019 091f 	ands.w	r9, r9, #31
 800b0c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0cc:	d02b      	beq.n	800b126 <__lshift+0xbe>
 800b0ce:	f1c9 0e20 	rsb	lr, r9, #32
 800b0d2:	468a      	mov	sl, r1
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	6818      	ldr	r0, [r3, #0]
 800b0d8:	fa00 f009 	lsl.w	r0, r0, r9
 800b0dc:	4310      	orrs	r0, r2
 800b0de:	f84a 0b04 	str.w	r0, [sl], #4
 800b0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e6:	459c      	cmp	ip, r3
 800b0e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0ec:	d8f3      	bhi.n	800b0d6 <__lshift+0x6e>
 800b0ee:	ebac 0304 	sub.w	r3, ip, r4
 800b0f2:	3b15      	subs	r3, #21
 800b0f4:	f023 0303 	bic.w	r3, r3, #3
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	f104 0015 	add.w	r0, r4, #21
 800b0fe:	4584      	cmp	ip, r0
 800b100:	bf38      	it	cc
 800b102:	2304      	movcc	r3, #4
 800b104:	50ca      	str	r2, [r1, r3]
 800b106:	b10a      	cbz	r2, 800b10c <__lshift+0xa4>
 800b108:	f108 0602 	add.w	r6, r8, #2
 800b10c:	3e01      	subs	r6, #1
 800b10e:	4638      	mov	r0, r7
 800b110:	612e      	str	r6, [r5, #16]
 800b112:	4621      	mov	r1, r4
 800b114:	f7ff fd90 	bl	800ac38 <_Bfree>
 800b118:	4628      	mov	r0, r5
 800b11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b122:	3301      	adds	r3, #1
 800b124:	e7c5      	b.n	800b0b2 <__lshift+0x4a>
 800b126:	3904      	subs	r1, #4
 800b128:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b130:	459c      	cmp	ip, r3
 800b132:	d8f9      	bhi.n	800b128 <__lshift+0xc0>
 800b134:	e7ea      	b.n	800b10c <__lshift+0xa4>
 800b136:	bf00      	nop
 800b138:	0800c090 	.word	0x0800c090
 800b13c:	0800c118 	.word	0x0800c118

0800b140 <__mcmp>:
 800b140:	690a      	ldr	r2, [r1, #16]
 800b142:	4603      	mov	r3, r0
 800b144:	6900      	ldr	r0, [r0, #16]
 800b146:	1a80      	subs	r0, r0, r2
 800b148:	b530      	push	{r4, r5, lr}
 800b14a:	d10e      	bne.n	800b16a <__mcmp+0x2a>
 800b14c:	3314      	adds	r3, #20
 800b14e:	3114      	adds	r1, #20
 800b150:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b154:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b158:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b15c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b160:	4295      	cmp	r5, r2
 800b162:	d003      	beq.n	800b16c <__mcmp+0x2c>
 800b164:	d205      	bcs.n	800b172 <__mcmp+0x32>
 800b166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b16a:	bd30      	pop	{r4, r5, pc}
 800b16c:	42a3      	cmp	r3, r4
 800b16e:	d3f3      	bcc.n	800b158 <__mcmp+0x18>
 800b170:	e7fb      	b.n	800b16a <__mcmp+0x2a>
 800b172:	2001      	movs	r0, #1
 800b174:	e7f9      	b.n	800b16a <__mcmp+0x2a>
	...

0800b178 <__mdiff>:
 800b178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	4689      	mov	r9, r1
 800b17e:	4606      	mov	r6, r0
 800b180:	4611      	mov	r1, r2
 800b182:	4648      	mov	r0, r9
 800b184:	4614      	mov	r4, r2
 800b186:	f7ff ffdb 	bl	800b140 <__mcmp>
 800b18a:	1e05      	subs	r5, r0, #0
 800b18c:	d112      	bne.n	800b1b4 <__mdiff+0x3c>
 800b18e:	4629      	mov	r1, r5
 800b190:	4630      	mov	r0, r6
 800b192:	f7ff fd11 	bl	800abb8 <_Balloc>
 800b196:	4602      	mov	r2, r0
 800b198:	b928      	cbnz	r0, 800b1a6 <__mdiff+0x2e>
 800b19a:	4b3f      	ldr	r3, [pc, #252]	@ (800b298 <__mdiff+0x120>)
 800b19c:	f240 2137 	movw	r1, #567	@ 0x237
 800b1a0:	483e      	ldr	r0, [pc, #248]	@ (800b29c <__mdiff+0x124>)
 800b1a2:	f000 fa85 	bl	800b6b0 <__assert_func>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1ac:	4610      	mov	r0, r2
 800b1ae:	b003      	add	sp, #12
 800b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b4:	bfbc      	itt	lt
 800b1b6:	464b      	movlt	r3, r9
 800b1b8:	46a1      	movlt	r9, r4
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b1c0:	bfba      	itte	lt
 800b1c2:	461c      	movlt	r4, r3
 800b1c4:	2501      	movlt	r5, #1
 800b1c6:	2500      	movge	r5, #0
 800b1c8:	f7ff fcf6 	bl	800abb8 <_Balloc>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	b918      	cbnz	r0, 800b1d8 <__mdiff+0x60>
 800b1d0:	4b31      	ldr	r3, [pc, #196]	@ (800b298 <__mdiff+0x120>)
 800b1d2:	f240 2145 	movw	r1, #581	@ 0x245
 800b1d6:	e7e3      	b.n	800b1a0 <__mdiff+0x28>
 800b1d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b1dc:	6926      	ldr	r6, [r4, #16]
 800b1de:	60c5      	str	r5, [r0, #12]
 800b1e0:	f109 0310 	add.w	r3, r9, #16
 800b1e4:	f109 0514 	add.w	r5, r9, #20
 800b1e8:	f104 0e14 	add.w	lr, r4, #20
 800b1ec:	f100 0b14 	add.w	fp, r0, #20
 800b1f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b1f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	46d9      	mov	r9, fp
 800b1fc:	f04f 0c00 	mov.w	ip, #0
 800b200:	9b01      	ldr	r3, [sp, #4]
 800b202:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b206:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b20a:	9301      	str	r3, [sp, #4]
 800b20c:	fa1f f38a 	uxth.w	r3, sl
 800b210:	4619      	mov	r1, r3
 800b212:	b283      	uxth	r3, r0
 800b214:	1acb      	subs	r3, r1, r3
 800b216:	0c00      	lsrs	r0, r0, #16
 800b218:	4463      	add	r3, ip
 800b21a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b21e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b222:	b29b      	uxth	r3, r3
 800b224:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b228:	4576      	cmp	r6, lr
 800b22a:	f849 3b04 	str.w	r3, [r9], #4
 800b22e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b232:	d8e5      	bhi.n	800b200 <__mdiff+0x88>
 800b234:	1b33      	subs	r3, r6, r4
 800b236:	3b15      	subs	r3, #21
 800b238:	f023 0303 	bic.w	r3, r3, #3
 800b23c:	3415      	adds	r4, #21
 800b23e:	3304      	adds	r3, #4
 800b240:	42a6      	cmp	r6, r4
 800b242:	bf38      	it	cc
 800b244:	2304      	movcc	r3, #4
 800b246:	441d      	add	r5, r3
 800b248:	445b      	add	r3, fp
 800b24a:	461e      	mov	r6, r3
 800b24c:	462c      	mov	r4, r5
 800b24e:	4544      	cmp	r4, r8
 800b250:	d30e      	bcc.n	800b270 <__mdiff+0xf8>
 800b252:	f108 0103 	add.w	r1, r8, #3
 800b256:	1b49      	subs	r1, r1, r5
 800b258:	f021 0103 	bic.w	r1, r1, #3
 800b25c:	3d03      	subs	r5, #3
 800b25e:	45a8      	cmp	r8, r5
 800b260:	bf38      	it	cc
 800b262:	2100      	movcc	r1, #0
 800b264:	440b      	add	r3, r1
 800b266:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b26a:	b191      	cbz	r1, 800b292 <__mdiff+0x11a>
 800b26c:	6117      	str	r7, [r2, #16]
 800b26e:	e79d      	b.n	800b1ac <__mdiff+0x34>
 800b270:	f854 1b04 	ldr.w	r1, [r4], #4
 800b274:	46e6      	mov	lr, ip
 800b276:	0c08      	lsrs	r0, r1, #16
 800b278:	fa1c fc81 	uxtah	ip, ip, r1
 800b27c:	4471      	add	r1, lr
 800b27e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b282:	b289      	uxth	r1, r1
 800b284:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b288:	f846 1b04 	str.w	r1, [r6], #4
 800b28c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b290:	e7dd      	b.n	800b24e <__mdiff+0xd6>
 800b292:	3f01      	subs	r7, #1
 800b294:	e7e7      	b.n	800b266 <__mdiff+0xee>
 800b296:	bf00      	nop
 800b298:	0800c090 	.word	0x0800c090
 800b29c:	0800c118 	.word	0x0800c118

0800b2a0 <__ulp>:
 800b2a0:	b082      	sub	sp, #8
 800b2a2:	ed8d 0b00 	vstr	d0, [sp]
 800b2a6:	9a01      	ldr	r2, [sp, #4]
 800b2a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b2e8 <__ulp+0x48>)
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	dc08      	bgt.n	800b2c6 <__ulp+0x26>
 800b2b4:	425b      	negs	r3, r3
 800b2b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b2ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b2be:	da04      	bge.n	800b2ca <__ulp+0x2a>
 800b2c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b2c4:	4113      	asrs	r3, r2
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	e008      	b.n	800b2dc <__ulp+0x3c>
 800b2ca:	f1a2 0314 	sub.w	r3, r2, #20
 800b2ce:	2b1e      	cmp	r3, #30
 800b2d0:	bfda      	itte	le
 800b2d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b2d6:	40da      	lsrle	r2, r3
 800b2d8:	2201      	movgt	r2, #1
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4619      	mov	r1, r3
 800b2de:	4610      	mov	r0, r2
 800b2e0:	ec41 0b10 	vmov	d0, r0, r1
 800b2e4:	b002      	add	sp, #8
 800b2e6:	4770      	bx	lr
 800b2e8:	7ff00000 	.word	0x7ff00000

0800b2ec <__b2d>:
 800b2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f0:	6906      	ldr	r6, [r0, #16]
 800b2f2:	f100 0814 	add.w	r8, r0, #20
 800b2f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b2fa:	1f37      	subs	r7, r6, #4
 800b2fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b300:	4610      	mov	r0, r2
 800b302:	f7ff fd4b 	bl	800ad9c <__hi0bits>
 800b306:	f1c0 0320 	rsb	r3, r0, #32
 800b30a:	280a      	cmp	r0, #10
 800b30c:	600b      	str	r3, [r1, #0]
 800b30e:	491b      	ldr	r1, [pc, #108]	@ (800b37c <__b2d+0x90>)
 800b310:	dc15      	bgt.n	800b33e <__b2d+0x52>
 800b312:	f1c0 0c0b 	rsb	ip, r0, #11
 800b316:	fa22 f30c 	lsr.w	r3, r2, ip
 800b31a:	45b8      	cmp	r8, r7
 800b31c:	ea43 0501 	orr.w	r5, r3, r1
 800b320:	bf34      	ite	cc
 800b322:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b326:	2300      	movcs	r3, #0
 800b328:	3015      	adds	r0, #21
 800b32a:	fa02 f000 	lsl.w	r0, r2, r0
 800b32e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b332:	4303      	orrs	r3, r0
 800b334:	461c      	mov	r4, r3
 800b336:	ec45 4b10 	vmov	d0, r4, r5
 800b33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33e:	45b8      	cmp	r8, r7
 800b340:	bf3a      	itte	cc
 800b342:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b346:	f1a6 0708 	subcc.w	r7, r6, #8
 800b34a:	2300      	movcs	r3, #0
 800b34c:	380b      	subs	r0, #11
 800b34e:	d012      	beq.n	800b376 <__b2d+0x8a>
 800b350:	f1c0 0120 	rsb	r1, r0, #32
 800b354:	fa23 f401 	lsr.w	r4, r3, r1
 800b358:	4082      	lsls	r2, r0
 800b35a:	4322      	orrs	r2, r4
 800b35c:	4547      	cmp	r7, r8
 800b35e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b362:	bf8c      	ite	hi
 800b364:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b368:	2200      	movls	r2, #0
 800b36a:	4083      	lsls	r3, r0
 800b36c:	40ca      	lsrs	r2, r1
 800b36e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b372:	4313      	orrs	r3, r2
 800b374:	e7de      	b.n	800b334 <__b2d+0x48>
 800b376:	ea42 0501 	orr.w	r5, r2, r1
 800b37a:	e7db      	b.n	800b334 <__b2d+0x48>
 800b37c:	3ff00000 	.word	0x3ff00000

0800b380 <__d2b>:
 800b380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b384:	460f      	mov	r7, r1
 800b386:	2101      	movs	r1, #1
 800b388:	ec59 8b10 	vmov	r8, r9, d0
 800b38c:	4616      	mov	r6, r2
 800b38e:	f7ff fc13 	bl	800abb8 <_Balloc>
 800b392:	4604      	mov	r4, r0
 800b394:	b930      	cbnz	r0, 800b3a4 <__d2b+0x24>
 800b396:	4602      	mov	r2, r0
 800b398:	4b23      	ldr	r3, [pc, #140]	@ (800b428 <__d2b+0xa8>)
 800b39a:	4824      	ldr	r0, [pc, #144]	@ (800b42c <__d2b+0xac>)
 800b39c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b3a0:	f000 f986 	bl	800b6b0 <__assert_func>
 800b3a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b3a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3ac:	b10d      	cbz	r5, 800b3b2 <__d2b+0x32>
 800b3ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3b2:	9301      	str	r3, [sp, #4]
 800b3b4:	f1b8 0300 	subs.w	r3, r8, #0
 800b3b8:	d023      	beq.n	800b402 <__d2b+0x82>
 800b3ba:	4668      	mov	r0, sp
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	f7ff fd0c 	bl	800adda <__lo0bits>
 800b3c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b3c6:	b1d0      	cbz	r0, 800b3fe <__d2b+0x7e>
 800b3c8:	f1c0 0320 	rsb	r3, r0, #32
 800b3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	40c2      	lsrs	r2, r0
 800b3d4:	6163      	str	r3, [r4, #20]
 800b3d6:	9201      	str	r2, [sp, #4]
 800b3d8:	9b01      	ldr	r3, [sp, #4]
 800b3da:	61a3      	str	r3, [r4, #24]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	bf0c      	ite	eq
 800b3e0:	2201      	moveq	r2, #1
 800b3e2:	2202      	movne	r2, #2
 800b3e4:	6122      	str	r2, [r4, #16]
 800b3e6:	b1a5      	cbz	r5, 800b412 <__d2b+0x92>
 800b3e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b3ec:	4405      	add	r5, r0
 800b3ee:	603d      	str	r5, [r7, #0]
 800b3f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b3f4:	6030      	str	r0, [r6, #0]
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	b003      	add	sp, #12
 800b3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3fe:	6161      	str	r1, [r4, #20]
 800b400:	e7ea      	b.n	800b3d8 <__d2b+0x58>
 800b402:	a801      	add	r0, sp, #4
 800b404:	f7ff fce9 	bl	800adda <__lo0bits>
 800b408:	9b01      	ldr	r3, [sp, #4]
 800b40a:	6163      	str	r3, [r4, #20]
 800b40c:	3020      	adds	r0, #32
 800b40e:	2201      	movs	r2, #1
 800b410:	e7e8      	b.n	800b3e4 <__d2b+0x64>
 800b412:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b416:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b41a:	6038      	str	r0, [r7, #0]
 800b41c:	6918      	ldr	r0, [r3, #16]
 800b41e:	f7ff fcbd 	bl	800ad9c <__hi0bits>
 800b422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b426:	e7e5      	b.n	800b3f4 <__d2b+0x74>
 800b428:	0800c090 	.word	0x0800c090
 800b42c:	0800c118 	.word	0x0800c118

0800b430 <__ratio>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	b085      	sub	sp, #20
 800b436:	e9cd 1000 	strd	r1, r0, [sp]
 800b43a:	a902      	add	r1, sp, #8
 800b43c:	f7ff ff56 	bl	800b2ec <__b2d>
 800b440:	9800      	ldr	r0, [sp, #0]
 800b442:	a903      	add	r1, sp, #12
 800b444:	ec55 4b10 	vmov	r4, r5, d0
 800b448:	f7ff ff50 	bl	800b2ec <__b2d>
 800b44c:	9b01      	ldr	r3, [sp, #4]
 800b44e:	6919      	ldr	r1, [r3, #16]
 800b450:	9b00      	ldr	r3, [sp, #0]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	1ac9      	subs	r1, r1, r3
 800b456:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b45a:	1a9b      	subs	r3, r3, r2
 800b45c:	ec5b ab10 	vmov	sl, fp, d0
 800b460:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b464:	2b00      	cmp	r3, #0
 800b466:	bfce      	itee	gt
 800b468:	462a      	movgt	r2, r5
 800b46a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b46e:	465a      	movle	r2, fp
 800b470:	462f      	mov	r7, r5
 800b472:	46d9      	mov	r9, fp
 800b474:	bfcc      	ite	gt
 800b476:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b47a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b47e:	464b      	mov	r3, r9
 800b480:	4652      	mov	r2, sl
 800b482:	4620      	mov	r0, r4
 800b484:	4639      	mov	r1, r7
 800b486:	f7f5 f9e1 	bl	800084c <__aeabi_ddiv>
 800b48a:	ec41 0b10 	vmov	d0, r0, r1
 800b48e:	b005      	add	sp, #20
 800b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b494 <__copybits>:
 800b494:	3901      	subs	r1, #1
 800b496:	b570      	push	{r4, r5, r6, lr}
 800b498:	1149      	asrs	r1, r1, #5
 800b49a:	6914      	ldr	r4, [r2, #16]
 800b49c:	3101      	adds	r1, #1
 800b49e:	f102 0314 	add.w	r3, r2, #20
 800b4a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b4a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b4aa:	1f05      	subs	r5, r0, #4
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	d30c      	bcc.n	800b4ca <__copybits+0x36>
 800b4b0:	1aa3      	subs	r3, r4, r2
 800b4b2:	3b11      	subs	r3, #17
 800b4b4:	f023 0303 	bic.w	r3, r3, #3
 800b4b8:	3211      	adds	r2, #17
 800b4ba:	42a2      	cmp	r2, r4
 800b4bc:	bf88      	it	hi
 800b4be:	2300      	movhi	r3, #0
 800b4c0:	4418      	add	r0, r3
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	4288      	cmp	r0, r1
 800b4c6:	d305      	bcc.n	800b4d4 <__copybits+0x40>
 800b4c8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ca:	f853 6b04 	ldr.w	r6, [r3], #4
 800b4ce:	f845 6f04 	str.w	r6, [r5, #4]!
 800b4d2:	e7eb      	b.n	800b4ac <__copybits+0x18>
 800b4d4:	f840 3b04 	str.w	r3, [r0], #4
 800b4d8:	e7f4      	b.n	800b4c4 <__copybits+0x30>

0800b4da <__any_on>:
 800b4da:	f100 0214 	add.w	r2, r0, #20
 800b4de:	6900      	ldr	r0, [r0, #16]
 800b4e0:	114b      	asrs	r3, r1, #5
 800b4e2:	4298      	cmp	r0, r3
 800b4e4:	b510      	push	{r4, lr}
 800b4e6:	db11      	blt.n	800b50c <__any_on+0x32>
 800b4e8:	dd0a      	ble.n	800b500 <__any_on+0x26>
 800b4ea:	f011 011f 	ands.w	r1, r1, #31
 800b4ee:	d007      	beq.n	800b500 <__any_on+0x26>
 800b4f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b4f4:	fa24 f001 	lsr.w	r0, r4, r1
 800b4f8:	fa00 f101 	lsl.w	r1, r0, r1
 800b4fc:	428c      	cmp	r4, r1
 800b4fe:	d10b      	bne.n	800b518 <__any_on+0x3e>
 800b500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b504:	4293      	cmp	r3, r2
 800b506:	d803      	bhi.n	800b510 <__any_on+0x36>
 800b508:	2000      	movs	r0, #0
 800b50a:	bd10      	pop	{r4, pc}
 800b50c:	4603      	mov	r3, r0
 800b50e:	e7f7      	b.n	800b500 <__any_on+0x26>
 800b510:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b514:	2900      	cmp	r1, #0
 800b516:	d0f5      	beq.n	800b504 <__any_on+0x2a>
 800b518:	2001      	movs	r0, #1
 800b51a:	e7f6      	b.n	800b50a <__any_on+0x30>

0800b51c <__ascii_wctomb>:
 800b51c:	4603      	mov	r3, r0
 800b51e:	4608      	mov	r0, r1
 800b520:	b141      	cbz	r1, 800b534 <__ascii_wctomb+0x18>
 800b522:	2aff      	cmp	r2, #255	@ 0xff
 800b524:	d904      	bls.n	800b530 <__ascii_wctomb+0x14>
 800b526:	228a      	movs	r2, #138	@ 0x8a
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b52e:	4770      	bx	lr
 800b530:	700a      	strb	r2, [r1, #0]
 800b532:	2001      	movs	r0, #1
 800b534:	4770      	bx	lr
	...

0800b538 <__sflush_r>:
 800b538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b540:	0716      	lsls	r6, r2, #28
 800b542:	4605      	mov	r5, r0
 800b544:	460c      	mov	r4, r1
 800b546:	d454      	bmi.n	800b5f2 <__sflush_r+0xba>
 800b548:	684b      	ldr	r3, [r1, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	dc02      	bgt.n	800b554 <__sflush_r+0x1c>
 800b54e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b550:	2b00      	cmp	r3, #0
 800b552:	dd48      	ble.n	800b5e6 <__sflush_r+0xae>
 800b554:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b556:	2e00      	cmp	r6, #0
 800b558:	d045      	beq.n	800b5e6 <__sflush_r+0xae>
 800b55a:	2300      	movs	r3, #0
 800b55c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b560:	682f      	ldr	r7, [r5, #0]
 800b562:	6a21      	ldr	r1, [r4, #32]
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	d030      	beq.n	800b5ca <__sflush_r+0x92>
 800b568:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	0759      	lsls	r1, r3, #29
 800b56e:	d505      	bpl.n	800b57c <__sflush_r+0x44>
 800b570:	6863      	ldr	r3, [r4, #4]
 800b572:	1ad2      	subs	r2, r2, r3
 800b574:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b576:	b10b      	cbz	r3, 800b57c <__sflush_r+0x44>
 800b578:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b57a:	1ad2      	subs	r2, r2, r3
 800b57c:	2300      	movs	r3, #0
 800b57e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b580:	6a21      	ldr	r1, [r4, #32]
 800b582:	4628      	mov	r0, r5
 800b584:	47b0      	blx	r6
 800b586:	1c43      	adds	r3, r0, #1
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	d106      	bne.n	800b59a <__sflush_r+0x62>
 800b58c:	6829      	ldr	r1, [r5, #0]
 800b58e:	291d      	cmp	r1, #29
 800b590:	d82b      	bhi.n	800b5ea <__sflush_r+0xb2>
 800b592:	4a2a      	ldr	r2, [pc, #168]	@ (800b63c <__sflush_r+0x104>)
 800b594:	410a      	asrs	r2, r1
 800b596:	07d6      	lsls	r6, r2, #31
 800b598:	d427      	bmi.n	800b5ea <__sflush_r+0xb2>
 800b59a:	2200      	movs	r2, #0
 800b59c:	6062      	str	r2, [r4, #4]
 800b59e:	04d9      	lsls	r1, r3, #19
 800b5a0:	6922      	ldr	r2, [r4, #16]
 800b5a2:	6022      	str	r2, [r4, #0]
 800b5a4:	d504      	bpl.n	800b5b0 <__sflush_r+0x78>
 800b5a6:	1c42      	adds	r2, r0, #1
 800b5a8:	d101      	bne.n	800b5ae <__sflush_r+0x76>
 800b5aa:	682b      	ldr	r3, [r5, #0]
 800b5ac:	b903      	cbnz	r3, 800b5b0 <__sflush_r+0x78>
 800b5ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800b5b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5b2:	602f      	str	r7, [r5, #0]
 800b5b4:	b1b9      	cbz	r1, 800b5e6 <__sflush_r+0xae>
 800b5b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5ba:	4299      	cmp	r1, r3
 800b5bc:	d002      	beq.n	800b5c4 <__sflush_r+0x8c>
 800b5be:	4628      	mov	r0, r5
 800b5c0:	f7fe feb6 	bl	800a330 <_free_r>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5c8:	e00d      	b.n	800b5e6 <__sflush_r+0xae>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b0      	blx	r6
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	1c50      	adds	r0, r2, #1
 800b5d4:	d1c9      	bne.n	800b56a <__sflush_r+0x32>
 800b5d6:	682b      	ldr	r3, [r5, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d0c6      	beq.n	800b56a <__sflush_r+0x32>
 800b5dc:	2b1d      	cmp	r3, #29
 800b5de:	d001      	beq.n	800b5e4 <__sflush_r+0xac>
 800b5e0:	2b16      	cmp	r3, #22
 800b5e2:	d11e      	bne.n	800b622 <__sflush_r+0xea>
 800b5e4:	602f      	str	r7, [r5, #0]
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	e022      	b.n	800b630 <__sflush_r+0xf8>
 800b5ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5ee:	b21b      	sxth	r3, r3
 800b5f0:	e01b      	b.n	800b62a <__sflush_r+0xf2>
 800b5f2:	690f      	ldr	r7, [r1, #16]
 800b5f4:	2f00      	cmp	r7, #0
 800b5f6:	d0f6      	beq.n	800b5e6 <__sflush_r+0xae>
 800b5f8:	0793      	lsls	r3, r2, #30
 800b5fa:	680e      	ldr	r6, [r1, #0]
 800b5fc:	bf08      	it	eq
 800b5fe:	694b      	ldreq	r3, [r1, #20]
 800b600:	600f      	str	r7, [r1, #0]
 800b602:	bf18      	it	ne
 800b604:	2300      	movne	r3, #0
 800b606:	eba6 0807 	sub.w	r8, r6, r7
 800b60a:	608b      	str	r3, [r1, #8]
 800b60c:	f1b8 0f00 	cmp.w	r8, #0
 800b610:	dde9      	ble.n	800b5e6 <__sflush_r+0xae>
 800b612:	6a21      	ldr	r1, [r4, #32]
 800b614:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b616:	4643      	mov	r3, r8
 800b618:	463a      	mov	r2, r7
 800b61a:	4628      	mov	r0, r5
 800b61c:	47b0      	blx	r6
 800b61e:	2800      	cmp	r0, #0
 800b620:	dc08      	bgt.n	800b634 <__sflush_r+0xfc>
 800b622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b634:	4407      	add	r7, r0
 800b636:	eba8 0800 	sub.w	r8, r8, r0
 800b63a:	e7e7      	b.n	800b60c <__sflush_r+0xd4>
 800b63c:	dfbffffe 	.word	0xdfbffffe

0800b640 <_fflush_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	690b      	ldr	r3, [r1, #16]
 800b644:	4605      	mov	r5, r0
 800b646:	460c      	mov	r4, r1
 800b648:	b913      	cbnz	r3, 800b650 <_fflush_r+0x10>
 800b64a:	2500      	movs	r5, #0
 800b64c:	4628      	mov	r0, r5
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	b118      	cbz	r0, 800b65a <_fflush_r+0x1a>
 800b652:	6a03      	ldr	r3, [r0, #32]
 800b654:	b90b      	cbnz	r3, 800b65a <_fflush_r+0x1a>
 800b656:	f7fe fd4b 	bl	800a0f0 <__sinit>
 800b65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d0f3      	beq.n	800b64a <_fflush_r+0xa>
 800b662:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b664:	07d0      	lsls	r0, r2, #31
 800b666:	d404      	bmi.n	800b672 <_fflush_r+0x32>
 800b668:	0599      	lsls	r1, r3, #22
 800b66a:	d402      	bmi.n	800b672 <_fflush_r+0x32>
 800b66c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b66e:	f7fe fe44 	bl	800a2fa <__retarget_lock_acquire_recursive>
 800b672:	4628      	mov	r0, r5
 800b674:	4621      	mov	r1, r4
 800b676:	f7ff ff5f 	bl	800b538 <__sflush_r>
 800b67a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b67c:	07da      	lsls	r2, r3, #31
 800b67e:	4605      	mov	r5, r0
 800b680:	d4e4      	bmi.n	800b64c <_fflush_r+0xc>
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	059b      	lsls	r3, r3, #22
 800b686:	d4e1      	bmi.n	800b64c <_fflush_r+0xc>
 800b688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b68a:	f7fe fe37 	bl	800a2fc <__retarget_lock_release_recursive>
 800b68e:	e7dd      	b.n	800b64c <_fflush_r+0xc>

0800b690 <_sbrk_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d06      	ldr	r5, [pc, #24]	@ (800b6ac <_sbrk_r+0x1c>)
 800b694:	2300      	movs	r3, #0
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	602b      	str	r3, [r5, #0]
 800b69c:	f7f5 ffb6 	bl	800160c <_sbrk>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <_sbrk_r+0x1a>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	b103      	cbz	r3, 800b6aa <_sbrk_r+0x1a>
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	20002148 	.word	0x20002148

0800b6b0 <__assert_func>:
 800b6b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6b2:	4614      	mov	r4, r2
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	4b09      	ldr	r3, [pc, #36]	@ (800b6dc <__assert_func+0x2c>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	68d8      	ldr	r0, [r3, #12]
 800b6be:	b954      	cbnz	r4, 800b6d6 <__assert_func+0x26>
 800b6c0:	4b07      	ldr	r3, [pc, #28]	@ (800b6e0 <__assert_func+0x30>)
 800b6c2:	461c      	mov	r4, r3
 800b6c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6c8:	9100      	str	r1, [sp, #0]
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	4905      	ldr	r1, [pc, #20]	@ (800b6e4 <__assert_func+0x34>)
 800b6ce:	f000 f829 	bl	800b724 <fiprintf>
 800b6d2:	f000 f839 	bl	800b748 <abort>
 800b6d6:	4b04      	ldr	r3, [pc, #16]	@ (800b6e8 <__assert_func+0x38>)
 800b6d8:	e7f4      	b.n	800b6c4 <__assert_func+0x14>
 800b6da:	bf00      	nop
 800b6dc:	20000274 	.word	0x20000274
 800b6e0:	0800c3ac 	.word	0x0800c3ac
 800b6e4:	0800c37e 	.word	0x0800c37e
 800b6e8:	0800c371 	.word	0x0800c371

0800b6ec <_calloc_r>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	fba1 5402 	umull	r5, r4, r1, r2
 800b6f2:	b93c      	cbnz	r4, 800b704 <_calloc_r+0x18>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7ff f9c1 	bl	800aa7c <_malloc_r>
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	b928      	cbnz	r0, 800b70a <_calloc_r+0x1e>
 800b6fe:	2600      	movs	r6, #0
 800b700:	4630      	mov	r0, r6
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	220c      	movs	r2, #12
 800b706:	6002      	str	r2, [r0, #0]
 800b708:	e7f9      	b.n	800b6fe <_calloc_r+0x12>
 800b70a:	462a      	mov	r2, r5
 800b70c:	4621      	mov	r1, r4
 800b70e:	f7fe fd68 	bl	800a1e2 <memset>
 800b712:	e7f5      	b.n	800b700 <_calloc_r+0x14>

0800b714 <malloc>:
 800b714:	4b02      	ldr	r3, [pc, #8]	@ (800b720 <malloc+0xc>)
 800b716:	4601      	mov	r1, r0
 800b718:	6818      	ldr	r0, [r3, #0]
 800b71a:	f7ff b9af 	b.w	800aa7c <_malloc_r>
 800b71e:	bf00      	nop
 800b720:	20000274 	.word	0x20000274

0800b724 <fiprintf>:
 800b724:	b40e      	push	{r1, r2, r3}
 800b726:	b503      	push	{r0, r1, lr}
 800b728:	4601      	mov	r1, r0
 800b72a:	ab03      	add	r3, sp, #12
 800b72c:	4805      	ldr	r0, [pc, #20]	@ (800b744 <fiprintf+0x20>)
 800b72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b732:	6800      	ldr	r0, [r0, #0]
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	f000 f837 	bl	800b7a8 <_vfiprintf_r>
 800b73a:	b002      	add	sp, #8
 800b73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b740:	b003      	add	sp, #12
 800b742:	4770      	bx	lr
 800b744:	20000274 	.word	0x20000274

0800b748 <abort>:
 800b748:	b508      	push	{r3, lr}
 800b74a:	2006      	movs	r0, #6
 800b74c:	f000 fb8e 	bl	800be6c <raise>
 800b750:	2001      	movs	r0, #1
 800b752:	f7f5 fee3 	bl	800151c <_exit>

0800b756 <__sfputc_r>:
 800b756:	6893      	ldr	r3, [r2, #8]
 800b758:	3b01      	subs	r3, #1
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	b410      	push	{r4}
 800b75e:	6093      	str	r3, [r2, #8]
 800b760:	da08      	bge.n	800b774 <__sfputc_r+0x1e>
 800b762:	6994      	ldr	r4, [r2, #24]
 800b764:	42a3      	cmp	r3, r4
 800b766:	db01      	blt.n	800b76c <__sfputc_r+0x16>
 800b768:	290a      	cmp	r1, #10
 800b76a:	d103      	bne.n	800b774 <__sfputc_r+0x1e>
 800b76c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b770:	f000 bac0 	b.w	800bcf4 <__swbuf_r>
 800b774:	6813      	ldr	r3, [r2, #0]
 800b776:	1c58      	adds	r0, r3, #1
 800b778:	6010      	str	r0, [r2, #0]
 800b77a:	7019      	strb	r1, [r3, #0]
 800b77c:	4608      	mov	r0, r1
 800b77e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <__sfputs_r>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	4606      	mov	r6, r0
 800b788:	460f      	mov	r7, r1
 800b78a:	4614      	mov	r4, r2
 800b78c:	18d5      	adds	r5, r2, r3
 800b78e:	42ac      	cmp	r4, r5
 800b790:	d101      	bne.n	800b796 <__sfputs_r+0x12>
 800b792:	2000      	movs	r0, #0
 800b794:	e007      	b.n	800b7a6 <__sfputs_r+0x22>
 800b796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79a:	463a      	mov	r2, r7
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7ff ffda 	bl	800b756 <__sfputc_r>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	d1f3      	bne.n	800b78e <__sfputs_r+0xa>
 800b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7a8 <_vfiprintf_r>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	460d      	mov	r5, r1
 800b7ae:	b09d      	sub	sp, #116	@ 0x74
 800b7b0:	4614      	mov	r4, r2
 800b7b2:	4698      	mov	r8, r3
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	b118      	cbz	r0, 800b7c0 <_vfiprintf_r+0x18>
 800b7b8:	6a03      	ldr	r3, [r0, #32]
 800b7ba:	b90b      	cbnz	r3, 800b7c0 <_vfiprintf_r+0x18>
 800b7bc:	f7fe fc98 	bl	800a0f0 <__sinit>
 800b7c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7c2:	07d9      	lsls	r1, r3, #31
 800b7c4:	d405      	bmi.n	800b7d2 <_vfiprintf_r+0x2a>
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	059a      	lsls	r2, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_vfiprintf_r+0x2a>
 800b7cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7ce:	f7fe fd94 	bl	800a2fa <__retarget_lock_acquire_recursive>
 800b7d2:	89ab      	ldrh	r3, [r5, #12]
 800b7d4:	071b      	lsls	r3, r3, #28
 800b7d6:	d501      	bpl.n	800b7dc <_vfiprintf_r+0x34>
 800b7d8:	692b      	ldr	r3, [r5, #16]
 800b7da:	b99b      	cbnz	r3, 800b804 <_vfiprintf_r+0x5c>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f000 fac6 	bl	800bd70 <__swsetup_r>
 800b7e4:	b170      	cbz	r0, 800b804 <_vfiprintf_r+0x5c>
 800b7e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7e8:	07dc      	lsls	r4, r3, #31
 800b7ea:	d504      	bpl.n	800b7f6 <_vfiprintf_r+0x4e>
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7f0:	b01d      	add	sp, #116	@ 0x74
 800b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f6:	89ab      	ldrh	r3, [r5, #12]
 800b7f8:	0598      	lsls	r0, r3, #22
 800b7fa:	d4f7      	bmi.n	800b7ec <_vfiprintf_r+0x44>
 800b7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7fe:	f7fe fd7d 	bl	800a2fc <__retarget_lock_release_recursive>
 800b802:	e7f3      	b.n	800b7ec <_vfiprintf_r+0x44>
 800b804:	2300      	movs	r3, #0
 800b806:	9309      	str	r3, [sp, #36]	@ 0x24
 800b808:	2320      	movs	r3, #32
 800b80a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b80e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b812:	2330      	movs	r3, #48	@ 0x30
 800b814:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b9c4 <_vfiprintf_r+0x21c>
 800b818:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b81c:	f04f 0901 	mov.w	r9, #1
 800b820:	4623      	mov	r3, r4
 800b822:	469a      	mov	sl, r3
 800b824:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b828:	b10a      	cbz	r2, 800b82e <_vfiprintf_r+0x86>
 800b82a:	2a25      	cmp	r2, #37	@ 0x25
 800b82c:	d1f9      	bne.n	800b822 <_vfiprintf_r+0x7a>
 800b82e:	ebba 0b04 	subs.w	fp, sl, r4
 800b832:	d00b      	beq.n	800b84c <_vfiprintf_r+0xa4>
 800b834:	465b      	mov	r3, fp
 800b836:	4622      	mov	r2, r4
 800b838:	4629      	mov	r1, r5
 800b83a:	4630      	mov	r0, r6
 800b83c:	f7ff ffa2 	bl	800b784 <__sfputs_r>
 800b840:	3001      	adds	r0, #1
 800b842:	f000 80a7 	beq.w	800b994 <_vfiprintf_r+0x1ec>
 800b846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b848:	445a      	add	r2, fp
 800b84a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b84c:	f89a 3000 	ldrb.w	r3, [sl]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 809f 	beq.w	800b994 <_vfiprintf_r+0x1ec>
 800b856:	2300      	movs	r3, #0
 800b858:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b85c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b860:	f10a 0a01 	add.w	sl, sl, #1
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	9307      	str	r3, [sp, #28]
 800b868:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b86c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b86e:	4654      	mov	r4, sl
 800b870:	2205      	movs	r2, #5
 800b872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b876:	4853      	ldr	r0, [pc, #332]	@ (800b9c4 <_vfiprintf_r+0x21c>)
 800b878:	f7f4 fcb2 	bl	80001e0 <memchr>
 800b87c:	9a04      	ldr	r2, [sp, #16]
 800b87e:	b9d8      	cbnz	r0, 800b8b8 <_vfiprintf_r+0x110>
 800b880:	06d1      	lsls	r1, r2, #27
 800b882:	bf44      	itt	mi
 800b884:	2320      	movmi	r3, #32
 800b886:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b88a:	0713      	lsls	r3, r2, #28
 800b88c:	bf44      	itt	mi
 800b88e:	232b      	movmi	r3, #43	@ 0x2b
 800b890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b894:	f89a 3000 	ldrb.w	r3, [sl]
 800b898:	2b2a      	cmp	r3, #42	@ 0x2a
 800b89a:	d015      	beq.n	800b8c8 <_vfiprintf_r+0x120>
 800b89c:	9a07      	ldr	r2, [sp, #28]
 800b89e:	4654      	mov	r4, sl
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	f04f 0c0a 	mov.w	ip, #10
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ac:	3b30      	subs	r3, #48	@ 0x30
 800b8ae:	2b09      	cmp	r3, #9
 800b8b0:	d94b      	bls.n	800b94a <_vfiprintf_r+0x1a2>
 800b8b2:	b1b0      	cbz	r0, 800b8e2 <_vfiprintf_r+0x13a>
 800b8b4:	9207      	str	r2, [sp, #28]
 800b8b6:	e014      	b.n	800b8e2 <_vfiprintf_r+0x13a>
 800b8b8:	eba0 0308 	sub.w	r3, r0, r8
 800b8bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	46a2      	mov	sl, r4
 800b8c6:	e7d2      	b.n	800b86e <_vfiprintf_r+0xc6>
 800b8c8:	9b03      	ldr	r3, [sp, #12]
 800b8ca:	1d19      	adds	r1, r3, #4
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	9103      	str	r1, [sp, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	bfbb      	ittet	lt
 800b8d4:	425b      	neglt	r3, r3
 800b8d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8da:	9307      	strge	r3, [sp, #28]
 800b8dc:	9307      	strlt	r3, [sp, #28]
 800b8de:	bfb8      	it	lt
 800b8e0:	9204      	strlt	r2, [sp, #16]
 800b8e2:	7823      	ldrb	r3, [r4, #0]
 800b8e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8e6:	d10a      	bne.n	800b8fe <_vfiprintf_r+0x156>
 800b8e8:	7863      	ldrb	r3, [r4, #1]
 800b8ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8ec:	d132      	bne.n	800b954 <_vfiprintf_r+0x1ac>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	1d1a      	adds	r2, r3, #4
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	9203      	str	r2, [sp, #12]
 800b8f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8fa:	3402      	adds	r4, #2
 800b8fc:	9305      	str	r3, [sp, #20]
 800b8fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9d4 <_vfiprintf_r+0x22c>
 800b902:	7821      	ldrb	r1, [r4, #0]
 800b904:	2203      	movs	r2, #3
 800b906:	4650      	mov	r0, sl
 800b908:	f7f4 fc6a 	bl	80001e0 <memchr>
 800b90c:	b138      	cbz	r0, 800b91e <_vfiprintf_r+0x176>
 800b90e:	9b04      	ldr	r3, [sp, #16]
 800b910:	eba0 000a 	sub.w	r0, r0, sl
 800b914:	2240      	movs	r2, #64	@ 0x40
 800b916:	4082      	lsls	r2, r0
 800b918:	4313      	orrs	r3, r2
 800b91a:	3401      	adds	r4, #1
 800b91c:	9304      	str	r3, [sp, #16]
 800b91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b922:	4829      	ldr	r0, [pc, #164]	@ (800b9c8 <_vfiprintf_r+0x220>)
 800b924:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b928:	2206      	movs	r2, #6
 800b92a:	f7f4 fc59 	bl	80001e0 <memchr>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d03f      	beq.n	800b9b2 <_vfiprintf_r+0x20a>
 800b932:	4b26      	ldr	r3, [pc, #152]	@ (800b9cc <_vfiprintf_r+0x224>)
 800b934:	bb1b      	cbnz	r3, 800b97e <_vfiprintf_r+0x1d6>
 800b936:	9b03      	ldr	r3, [sp, #12]
 800b938:	3307      	adds	r3, #7
 800b93a:	f023 0307 	bic.w	r3, r3, #7
 800b93e:	3308      	adds	r3, #8
 800b940:	9303      	str	r3, [sp, #12]
 800b942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b944:	443b      	add	r3, r7
 800b946:	9309      	str	r3, [sp, #36]	@ 0x24
 800b948:	e76a      	b.n	800b820 <_vfiprintf_r+0x78>
 800b94a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b94e:	460c      	mov	r4, r1
 800b950:	2001      	movs	r0, #1
 800b952:	e7a8      	b.n	800b8a6 <_vfiprintf_r+0xfe>
 800b954:	2300      	movs	r3, #0
 800b956:	3401      	adds	r4, #1
 800b958:	9305      	str	r3, [sp, #20]
 800b95a:	4619      	mov	r1, r3
 800b95c:	f04f 0c0a 	mov.w	ip, #10
 800b960:	4620      	mov	r0, r4
 800b962:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b966:	3a30      	subs	r2, #48	@ 0x30
 800b968:	2a09      	cmp	r2, #9
 800b96a:	d903      	bls.n	800b974 <_vfiprintf_r+0x1cc>
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0c6      	beq.n	800b8fe <_vfiprintf_r+0x156>
 800b970:	9105      	str	r1, [sp, #20]
 800b972:	e7c4      	b.n	800b8fe <_vfiprintf_r+0x156>
 800b974:	fb0c 2101 	mla	r1, ip, r1, r2
 800b978:	4604      	mov	r4, r0
 800b97a:	2301      	movs	r3, #1
 800b97c:	e7f0      	b.n	800b960 <_vfiprintf_r+0x1b8>
 800b97e:	ab03      	add	r3, sp, #12
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	462a      	mov	r2, r5
 800b984:	4b12      	ldr	r3, [pc, #72]	@ (800b9d0 <_vfiprintf_r+0x228>)
 800b986:	a904      	add	r1, sp, #16
 800b988:	4630      	mov	r0, r6
 800b98a:	f3af 8000 	nop.w
 800b98e:	4607      	mov	r7, r0
 800b990:	1c78      	adds	r0, r7, #1
 800b992:	d1d6      	bne.n	800b942 <_vfiprintf_r+0x19a>
 800b994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b996:	07d9      	lsls	r1, r3, #31
 800b998:	d405      	bmi.n	800b9a6 <_vfiprintf_r+0x1fe>
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	059a      	lsls	r2, r3, #22
 800b99e:	d402      	bmi.n	800b9a6 <_vfiprintf_r+0x1fe>
 800b9a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9a2:	f7fe fcab 	bl	800a2fc <__retarget_lock_release_recursive>
 800b9a6:	89ab      	ldrh	r3, [r5, #12]
 800b9a8:	065b      	lsls	r3, r3, #25
 800b9aa:	f53f af1f 	bmi.w	800b7ec <_vfiprintf_r+0x44>
 800b9ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9b0:	e71e      	b.n	800b7f0 <_vfiprintf_r+0x48>
 800b9b2:	ab03      	add	r3, sp, #12
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	4b05      	ldr	r3, [pc, #20]	@ (800b9d0 <_vfiprintf_r+0x228>)
 800b9ba:	a904      	add	r1, sp, #16
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f000 f879 	bl	800bab4 <_printf_i>
 800b9c2:	e7e4      	b.n	800b98e <_vfiprintf_r+0x1e6>
 800b9c4:	0800c3ad 	.word	0x0800c3ad
 800b9c8:	0800c3b7 	.word	0x0800c3b7
 800b9cc:	00000000 	.word	0x00000000
 800b9d0:	0800b785 	.word	0x0800b785
 800b9d4:	0800c3b3 	.word	0x0800c3b3

0800b9d8 <_printf_common>:
 800b9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9dc:	4616      	mov	r6, r2
 800b9de:	4698      	mov	r8, r3
 800b9e0:	688a      	ldr	r2, [r1, #8]
 800b9e2:	690b      	ldr	r3, [r1, #16]
 800b9e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	bfb8      	it	lt
 800b9ec:	4613      	movlt	r3, r2
 800b9ee:	6033      	str	r3, [r6, #0]
 800b9f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9f4:	4607      	mov	r7, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	b10a      	cbz	r2, 800b9fe <_printf_common+0x26>
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	6033      	str	r3, [r6, #0]
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	0699      	lsls	r1, r3, #26
 800ba02:	bf42      	ittt	mi
 800ba04:	6833      	ldrmi	r3, [r6, #0]
 800ba06:	3302      	addmi	r3, #2
 800ba08:	6033      	strmi	r3, [r6, #0]
 800ba0a:	6825      	ldr	r5, [r4, #0]
 800ba0c:	f015 0506 	ands.w	r5, r5, #6
 800ba10:	d106      	bne.n	800ba20 <_printf_common+0x48>
 800ba12:	f104 0a19 	add.w	sl, r4, #25
 800ba16:	68e3      	ldr	r3, [r4, #12]
 800ba18:	6832      	ldr	r2, [r6, #0]
 800ba1a:	1a9b      	subs	r3, r3, r2
 800ba1c:	42ab      	cmp	r3, r5
 800ba1e:	dc26      	bgt.n	800ba6e <_printf_common+0x96>
 800ba20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba24:	6822      	ldr	r2, [r4, #0]
 800ba26:	3b00      	subs	r3, #0
 800ba28:	bf18      	it	ne
 800ba2a:	2301      	movne	r3, #1
 800ba2c:	0692      	lsls	r2, r2, #26
 800ba2e:	d42b      	bmi.n	800ba88 <_printf_common+0xb0>
 800ba30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba34:	4641      	mov	r1, r8
 800ba36:	4638      	mov	r0, r7
 800ba38:	47c8      	blx	r9
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	d01e      	beq.n	800ba7c <_printf_common+0xa4>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	6922      	ldr	r2, [r4, #16]
 800ba42:	f003 0306 	and.w	r3, r3, #6
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	bf02      	ittt	eq
 800ba4a:	68e5      	ldreq	r5, [r4, #12]
 800ba4c:	6833      	ldreq	r3, [r6, #0]
 800ba4e:	1aed      	subeq	r5, r5, r3
 800ba50:	68a3      	ldr	r3, [r4, #8]
 800ba52:	bf0c      	ite	eq
 800ba54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba58:	2500      	movne	r5, #0
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	bfc4      	itt	gt
 800ba5e:	1a9b      	subgt	r3, r3, r2
 800ba60:	18ed      	addgt	r5, r5, r3
 800ba62:	2600      	movs	r6, #0
 800ba64:	341a      	adds	r4, #26
 800ba66:	42b5      	cmp	r5, r6
 800ba68:	d11a      	bne.n	800baa0 <_printf_common+0xc8>
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	e008      	b.n	800ba80 <_printf_common+0xa8>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	4652      	mov	r2, sl
 800ba72:	4641      	mov	r1, r8
 800ba74:	4638      	mov	r0, r7
 800ba76:	47c8      	blx	r9
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d103      	bne.n	800ba84 <_printf_common+0xac>
 800ba7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba84:	3501      	adds	r5, #1
 800ba86:	e7c6      	b.n	800ba16 <_printf_common+0x3e>
 800ba88:	18e1      	adds	r1, r4, r3
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	2030      	movs	r0, #48	@ 0x30
 800ba8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba92:	4422      	add	r2, r4
 800ba94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba9c:	3302      	adds	r3, #2
 800ba9e:	e7c7      	b.n	800ba30 <_printf_common+0x58>
 800baa0:	2301      	movs	r3, #1
 800baa2:	4622      	mov	r2, r4
 800baa4:	4641      	mov	r1, r8
 800baa6:	4638      	mov	r0, r7
 800baa8:	47c8      	blx	r9
 800baaa:	3001      	adds	r0, #1
 800baac:	d0e6      	beq.n	800ba7c <_printf_common+0xa4>
 800baae:	3601      	adds	r6, #1
 800bab0:	e7d9      	b.n	800ba66 <_printf_common+0x8e>
	...

0800bab4 <_printf_i>:
 800bab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bab8:	7e0f      	ldrb	r7, [r1, #24]
 800baba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800babc:	2f78      	cmp	r7, #120	@ 0x78
 800babe:	4691      	mov	r9, r2
 800bac0:	4680      	mov	r8, r0
 800bac2:	460c      	mov	r4, r1
 800bac4:	469a      	mov	sl, r3
 800bac6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800baca:	d807      	bhi.n	800badc <_printf_i+0x28>
 800bacc:	2f62      	cmp	r7, #98	@ 0x62
 800bace:	d80a      	bhi.n	800bae6 <_printf_i+0x32>
 800bad0:	2f00      	cmp	r7, #0
 800bad2:	f000 80d2 	beq.w	800bc7a <_printf_i+0x1c6>
 800bad6:	2f58      	cmp	r7, #88	@ 0x58
 800bad8:	f000 80b9 	beq.w	800bc4e <_printf_i+0x19a>
 800badc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bae0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bae4:	e03a      	b.n	800bb5c <_printf_i+0xa8>
 800bae6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800baea:	2b15      	cmp	r3, #21
 800baec:	d8f6      	bhi.n	800badc <_printf_i+0x28>
 800baee:	a101      	add	r1, pc, #4	@ (adr r1, 800baf4 <_printf_i+0x40>)
 800baf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baf4:	0800bb4d 	.word	0x0800bb4d
 800baf8:	0800bb61 	.word	0x0800bb61
 800bafc:	0800badd 	.word	0x0800badd
 800bb00:	0800badd 	.word	0x0800badd
 800bb04:	0800badd 	.word	0x0800badd
 800bb08:	0800badd 	.word	0x0800badd
 800bb0c:	0800bb61 	.word	0x0800bb61
 800bb10:	0800badd 	.word	0x0800badd
 800bb14:	0800badd 	.word	0x0800badd
 800bb18:	0800badd 	.word	0x0800badd
 800bb1c:	0800badd 	.word	0x0800badd
 800bb20:	0800bc61 	.word	0x0800bc61
 800bb24:	0800bb8b 	.word	0x0800bb8b
 800bb28:	0800bc1b 	.word	0x0800bc1b
 800bb2c:	0800badd 	.word	0x0800badd
 800bb30:	0800badd 	.word	0x0800badd
 800bb34:	0800bc83 	.word	0x0800bc83
 800bb38:	0800badd 	.word	0x0800badd
 800bb3c:	0800bb8b 	.word	0x0800bb8b
 800bb40:	0800badd 	.word	0x0800badd
 800bb44:	0800badd 	.word	0x0800badd
 800bb48:	0800bc23 	.word	0x0800bc23
 800bb4c:	6833      	ldr	r3, [r6, #0]
 800bb4e:	1d1a      	adds	r2, r3, #4
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	6032      	str	r2, [r6, #0]
 800bb54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e09d      	b.n	800bc9c <_printf_i+0x1e8>
 800bb60:	6833      	ldr	r3, [r6, #0]
 800bb62:	6820      	ldr	r0, [r4, #0]
 800bb64:	1d19      	adds	r1, r3, #4
 800bb66:	6031      	str	r1, [r6, #0]
 800bb68:	0606      	lsls	r6, r0, #24
 800bb6a:	d501      	bpl.n	800bb70 <_printf_i+0xbc>
 800bb6c:	681d      	ldr	r5, [r3, #0]
 800bb6e:	e003      	b.n	800bb78 <_printf_i+0xc4>
 800bb70:	0645      	lsls	r5, r0, #25
 800bb72:	d5fb      	bpl.n	800bb6c <_printf_i+0xb8>
 800bb74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb78:	2d00      	cmp	r5, #0
 800bb7a:	da03      	bge.n	800bb84 <_printf_i+0xd0>
 800bb7c:	232d      	movs	r3, #45	@ 0x2d
 800bb7e:	426d      	negs	r5, r5
 800bb80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb84:	4859      	ldr	r0, [pc, #356]	@ (800bcec <_printf_i+0x238>)
 800bb86:	230a      	movs	r3, #10
 800bb88:	e011      	b.n	800bbae <_printf_i+0xfa>
 800bb8a:	6821      	ldr	r1, [r4, #0]
 800bb8c:	6833      	ldr	r3, [r6, #0]
 800bb8e:	0608      	lsls	r0, r1, #24
 800bb90:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb94:	d402      	bmi.n	800bb9c <_printf_i+0xe8>
 800bb96:	0649      	lsls	r1, r1, #25
 800bb98:	bf48      	it	mi
 800bb9a:	b2ad      	uxthmi	r5, r5
 800bb9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb9e:	4853      	ldr	r0, [pc, #332]	@ (800bcec <_printf_i+0x238>)
 800bba0:	6033      	str	r3, [r6, #0]
 800bba2:	bf14      	ite	ne
 800bba4:	230a      	movne	r3, #10
 800bba6:	2308      	moveq	r3, #8
 800bba8:	2100      	movs	r1, #0
 800bbaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbae:	6866      	ldr	r6, [r4, #4]
 800bbb0:	60a6      	str	r6, [r4, #8]
 800bbb2:	2e00      	cmp	r6, #0
 800bbb4:	bfa2      	ittt	ge
 800bbb6:	6821      	ldrge	r1, [r4, #0]
 800bbb8:	f021 0104 	bicge.w	r1, r1, #4
 800bbbc:	6021      	strge	r1, [r4, #0]
 800bbbe:	b90d      	cbnz	r5, 800bbc4 <_printf_i+0x110>
 800bbc0:	2e00      	cmp	r6, #0
 800bbc2:	d04b      	beq.n	800bc5c <_printf_i+0x1a8>
 800bbc4:	4616      	mov	r6, r2
 800bbc6:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbca:	fb03 5711 	mls	r7, r3, r1, r5
 800bbce:	5dc7      	ldrb	r7, [r0, r7]
 800bbd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbd4:	462f      	mov	r7, r5
 800bbd6:	42bb      	cmp	r3, r7
 800bbd8:	460d      	mov	r5, r1
 800bbda:	d9f4      	bls.n	800bbc6 <_printf_i+0x112>
 800bbdc:	2b08      	cmp	r3, #8
 800bbde:	d10b      	bne.n	800bbf8 <_printf_i+0x144>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	07df      	lsls	r7, r3, #31
 800bbe4:	d508      	bpl.n	800bbf8 <_printf_i+0x144>
 800bbe6:	6923      	ldr	r3, [r4, #16]
 800bbe8:	6861      	ldr	r1, [r4, #4]
 800bbea:	4299      	cmp	r1, r3
 800bbec:	bfde      	ittt	le
 800bbee:	2330      	movle	r3, #48	@ 0x30
 800bbf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbf4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bbf8:	1b92      	subs	r2, r2, r6
 800bbfa:	6122      	str	r2, [r4, #16]
 800bbfc:	f8cd a000 	str.w	sl, [sp]
 800bc00:	464b      	mov	r3, r9
 800bc02:	aa03      	add	r2, sp, #12
 800bc04:	4621      	mov	r1, r4
 800bc06:	4640      	mov	r0, r8
 800bc08:	f7ff fee6 	bl	800b9d8 <_printf_common>
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d14a      	bne.n	800bca6 <_printf_i+0x1f2>
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc14:	b004      	add	sp, #16
 800bc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	f043 0320 	orr.w	r3, r3, #32
 800bc20:	6023      	str	r3, [r4, #0]
 800bc22:	4833      	ldr	r0, [pc, #204]	@ (800bcf0 <_printf_i+0x23c>)
 800bc24:	2778      	movs	r7, #120	@ 0x78
 800bc26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	6831      	ldr	r1, [r6, #0]
 800bc2e:	061f      	lsls	r7, r3, #24
 800bc30:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc34:	d402      	bmi.n	800bc3c <_printf_i+0x188>
 800bc36:	065f      	lsls	r7, r3, #25
 800bc38:	bf48      	it	mi
 800bc3a:	b2ad      	uxthmi	r5, r5
 800bc3c:	6031      	str	r1, [r6, #0]
 800bc3e:	07d9      	lsls	r1, r3, #31
 800bc40:	bf44      	itt	mi
 800bc42:	f043 0320 	orrmi.w	r3, r3, #32
 800bc46:	6023      	strmi	r3, [r4, #0]
 800bc48:	b11d      	cbz	r5, 800bc52 <_printf_i+0x19e>
 800bc4a:	2310      	movs	r3, #16
 800bc4c:	e7ac      	b.n	800bba8 <_printf_i+0xf4>
 800bc4e:	4827      	ldr	r0, [pc, #156]	@ (800bcec <_printf_i+0x238>)
 800bc50:	e7e9      	b.n	800bc26 <_printf_i+0x172>
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	f023 0320 	bic.w	r3, r3, #32
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	e7f6      	b.n	800bc4a <_printf_i+0x196>
 800bc5c:	4616      	mov	r6, r2
 800bc5e:	e7bd      	b.n	800bbdc <_printf_i+0x128>
 800bc60:	6833      	ldr	r3, [r6, #0]
 800bc62:	6825      	ldr	r5, [r4, #0]
 800bc64:	6961      	ldr	r1, [r4, #20]
 800bc66:	1d18      	adds	r0, r3, #4
 800bc68:	6030      	str	r0, [r6, #0]
 800bc6a:	062e      	lsls	r6, r5, #24
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	d501      	bpl.n	800bc74 <_printf_i+0x1c0>
 800bc70:	6019      	str	r1, [r3, #0]
 800bc72:	e002      	b.n	800bc7a <_printf_i+0x1c6>
 800bc74:	0668      	lsls	r0, r5, #25
 800bc76:	d5fb      	bpl.n	800bc70 <_printf_i+0x1bc>
 800bc78:	8019      	strh	r1, [r3, #0]
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	6123      	str	r3, [r4, #16]
 800bc7e:	4616      	mov	r6, r2
 800bc80:	e7bc      	b.n	800bbfc <_printf_i+0x148>
 800bc82:	6833      	ldr	r3, [r6, #0]
 800bc84:	1d1a      	adds	r2, r3, #4
 800bc86:	6032      	str	r2, [r6, #0]
 800bc88:	681e      	ldr	r6, [r3, #0]
 800bc8a:	6862      	ldr	r2, [r4, #4]
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	4630      	mov	r0, r6
 800bc90:	f7f4 faa6 	bl	80001e0 <memchr>
 800bc94:	b108      	cbz	r0, 800bc9a <_printf_i+0x1e6>
 800bc96:	1b80      	subs	r0, r0, r6
 800bc98:	6060      	str	r0, [r4, #4]
 800bc9a:	6863      	ldr	r3, [r4, #4]
 800bc9c:	6123      	str	r3, [r4, #16]
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bca4:	e7aa      	b.n	800bbfc <_printf_i+0x148>
 800bca6:	6923      	ldr	r3, [r4, #16]
 800bca8:	4632      	mov	r2, r6
 800bcaa:	4649      	mov	r1, r9
 800bcac:	4640      	mov	r0, r8
 800bcae:	47d0      	blx	sl
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	d0ad      	beq.n	800bc10 <_printf_i+0x15c>
 800bcb4:	6823      	ldr	r3, [r4, #0]
 800bcb6:	079b      	lsls	r3, r3, #30
 800bcb8:	d413      	bmi.n	800bce2 <_printf_i+0x22e>
 800bcba:	68e0      	ldr	r0, [r4, #12]
 800bcbc:	9b03      	ldr	r3, [sp, #12]
 800bcbe:	4298      	cmp	r0, r3
 800bcc0:	bfb8      	it	lt
 800bcc2:	4618      	movlt	r0, r3
 800bcc4:	e7a6      	b.n	800bc14 <_printf_i+0x160>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	4632      	mov	r2, r6
 800bcca:	4649      	mov	r1, r9
 800bccc:	4640      	mov	r0, r8
 800bcce:	47d0      	blx	sl
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d09d      	beq.n	800bc10 <_printf_i+0x15c>
 800bcd4:	3501      	adds	r5, #1
 800bcd6:	68e3      	ldr	r3, [r4, #12]
 800bcd8:	9903      	ldr	r1, [sp, #12]
 800bcda:	1a5b      	subs	r3, r3, r1
 800bcdc:	42ab      	cmp	r3, r5
 800bcde:	dcf2      	bgt.n	800bcc6 <_printf_i+0x212>
 800bce0:	e7eb      	b.n	800bcba <_printf_i+0x206>
 800bce2:	2500      	movs	r5, #0
 800bce4:	f104 0619 	add.w	r6, r4, #25
 800bce8:	e7f5      	b.n	800bcd6 <_printf_i+0x222>
 800bcea:	bf00      	nop
 800bcec:	0800c3be 	.word	0x0800c3be
 800bcf0:	0800c3cf 	.word	0x0800c3cf

0800bcf4 <__swbuf_r>:
 800bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf6:	460e      	mov	r6, r1
 800bcf8:	4614      	mov	r4, r2
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	b118      	cbz	r0, 800bd06 <__swbuf_r+0x12>
 800bcfe:	6a03      	ldr	r3, [r0, #32]
 800bd00:	b90b      	cbnz	r3, 800bd06 <__swbuf_r+0x12>
 800bd02:	f7fe f9f5 	bl	800a0f0 <__sinit>
 800bd06:	69a3      	ldr	r3, [r4, #24]
 800bd08:	60a3      	str	r3, [r4, #8]
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	071a      	lsls	r2, r3, #28
 800bd0e:	d501      	bpl.n	800bd14 <__swbuf_r+0x20>
 800bd10:	6923      	ldr	r3, [r4, #16]
 800bd12:	b943      	cbnz	r3, 800bd26 <__swbuf_r+0x32>
 800bd14:	4621      	mov	r1, r4
 800bd16:	4628      	mov	r0, r5
 800bd18:	f000 f82a 	bl	800bd70 <__swsetup_r>
 800bd1c:	b118      	cbz	r0, 800bd26 <__swbuf_r+0x32>
 800bd1e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bd22:	4638      	mov	r0, r7
 800bd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	6922      	ldr	r2, [r4, #16]
 800bd2a:	1a98      	subs	r0, r3, r2
 800bd2c:	6963      	ldr	r3, [r4, #20]
 800bd2e:	b2f6      	uxtb	r6, r6
 800bd30:	4283      	cmp	r3, r0
 800bd32:	4637      	mov	r7, r6
 800bd34:	dc05      	bgt.n	800bd42 <__swbuf_r+0x4e>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f7ff fc81 	bl	800b640 <_fflush_r>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d1ed      	bne.n	800bd1e <__swbuf_r+0x2a>
 800bd42:	68a3      	ldr	r3, [r4, #8]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	60a3      	str	r3, [r4, #8]
 800bd48:	6823      	ldr	r3, [r4, #0]
 800bd4a:	1c5a      	adds	r2, r3, #1
 800bd4c:	6022      	str	r2, [r4, #0]
 800bd4e:	701e      	strb	r6, [r3, #0]
 800bd50:	6962      	ldr	r2, [r4, #20]
 800bd52:	1c43      	adds	r3, r0, #1
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d004      	beq.n	800bd62 <__swbuf_r+0x6e>
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	07db      	lsls	r3, r3, #31
 800bd5c:	d5e1      	bpl.n	800bd22 <__swbuf_r+0x2e>
 800bd5e:	2e0a      	cmp	r6, #10
 800bd60:	d1df      	bne.n	800bd22 <__swbuf_r+0x2e>
 800bd62:	4621      	mov	r1, r4
 800bd64:	4628      	mov	r0, r5
 800bd66:	f7ff fc6b 	bl	800b640 <_fflush_r>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d0d9      	beq.n	800bd22 <__swbuf_r+0x2e>
 800bd6e:	e7d6      	b.n	800bd1e <__swbuf_r+0x2a>

0800bd70 <__swsetup_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4b29      	ldr	r3, [pc, #164]	@ (800be18 <__swsetup_r+0xa8>)
 800bd74:	4605      	mov	r5, r0
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	460c      	mov	r4, r1
 800bd7a:	b118      	cbz	r0, 800bd84 <__swsetup_r+0x14>
 800bd7c:	6a03      	ldr	r3, [r0, #32]
 800bd7e:	b90b      	cbnz	r3, 800bd84 <__swsetup_r+0x14>
 800bd80:	f7fe f9b6 	bl	800a0f0 <__sinit>
 800bd84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd88:	0719      	lsls	r1, r3, #28
 800bd8a:	d422      	bmi.n	800bdd2 <__swsetup_r+0x62>
 800bd8c:	06da      	lsls	r2, r3, #27
 800bd8e:	d407      	bmi.n	800bda0 <__swsetup_r+0x30>
 800bd90:	2209      	movs	r2, #9
 800bd92:	602a      	str	r2, [r5, #0]
 800bd94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd98:	81a3      	strh	r3, [r4, #12]
 800bd9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd9e:	e033      	b.n	800be08 <__swsetup_r+0x98>
 800bda0:	0758      	lsls	r0, r3, #29
 800bda2:	d512      	bpl.n	800bdca <__swsetup_r+0x5a>
 800bda4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bda6:	b141      	cbz	r1, 800bdba <__swsetup_r+0x4a>
 800bda8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdac:	4299      	cmp	r1, r3
 800bdae:	d002      	beq.n	800bdb6 <__swsetup_r+0x46>
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f7fe fabd 	bl	800a330 <_free_r>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdc0:	81a3      	strh	r3, [r4, #12]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	6063      	str	r3, [r4, #4]
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	f043 0308 	orr.w	r3, r3, #8
 800bdd0:	81a3      	strh	r3, [r4, #12]
 800bdd2:	6923      	ldr	r3, [r4, #16]
 800bdd4:	b94b      	cbnz	r3, 800bdea <__swsetup_r+0x7a>
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bde0:	d003      	beq.n	800bdea <__swsetup_r+0x7a>
 800bde2:	4621      	mov	r1, r4
 800bde4:	4628      	mov	r0, r5
 800bde6:	f000 f883 	bl	800bef0 <__smakebuf_r>
 800bdea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdee:	f013 0201 	ands.w	r2, r3, #1
 800bdf2:	d00a      	beq.n	800be0a <__swsetup_r+0x9a>
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	60a2      	str	r2, [r4, #8]
 800bdf8:	6962      	ldr	r2, [r4, #20]
 800bdfa:	4252      	negs	r2, r2
 800bdfc:	61a2      	str	r2, [r4, #24]
 800bdfe:	6922      	ldr	r2, [r4, #16]
 800be00:	b942      	cbnz	r2, 800be14 <__swsetup_r+0xa4>
 800be02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be06:	d1c5      	bne.n	800bd94 <__swsetup_r+0x24>
 800be08:	bd38      	pop	{r3, r4, r5, pc}
 800be0a:	0799      	lsls	r1, r3, #30
 800be0c:	bf58      	it	pl
 800be0e:	6962      	ldrpl	r2, [r4, #20]
 800be10:	60a2      	str	r2, [r4, #8]
 800be12:	e7f4      	b.n	800bdfe <__swsetup_r+0x8e>
 800be14:	2000      	movs	r0, #0
 800be16:	e7f7      	b.n	800be08 <__swsetup_r+0x98>
 800be18:	20000274 	.word	0x20000274

0800be1c <_raise_r>:
 800be1c:	291f      	cmp	r1, #31
 800be1e:	b538      	push	{r3, r4, r5, lr}
 800be20:	4605      	mov	r5, r0
 800be22:	460c      	mov	r4, r1
 800be24:	d904      	bls.n	800be30 <_raise_r+0x14>
 800be26:	2316      	movs	r3, #22
 800be28:	6003      	str	r3, [r0, #0]
 800be2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be2e:	bd38      	pop	{r3, r4, r5, pc}
 800be30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be32:	b112      	cbz	r2, 800be3a <_raise_r+0x1e>
 800be34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be38:	b94b      	cbnz	r3, 800be4e <_raise_r+0x32>
 800be3a:	4628      	mov	r0, r5
 800be3c:	f000 f830 	bl	800bea0 <_getpid_r>
 800be40:	4622      	mov	r2, r4
 800be42:	4601      	mov	r1, r0
 800be44:	4628      	mov	r0, r5
 800be46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be4a:	f000 b817 	b.w	800be7c <_kill_r>
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d00a      	beq.n	800be68 <_raise_r+0x4c>
 800be52:	1c59      	adds	r1, r3, #1
 800be54:	d103      	bne.n	800be5e <_raise_r+0x42>
 800be56:	2316      	movs	r3, #22
 800be58:	6003      	str	r3, [r0, #0]
 800be5a:	2001      	movs	r0, #1
 800be5c:	e7e7      	b.n	800be2e <_raise_r+0x12>
 800be5e:	2100      	movs	r1, #0
 800be60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be64:	4620      	mov	r0, r4
 800be66:	4798      	blx	r3
 800be68:	2000      	movs	r0, #0
 800be6a:	e7e0      	b.n	800be2e <_raise_r+0x12>

0800be6c <raise>:
 800be6c:	4b02      	ldr	r3, [pc, #8]	@ (800be78 <raise+0xc>)
 800be6e:	4601      	mov	r1, r0
 800be70:	6818      	ldr	r0, [r3, #0]
 800be72:	f7ff bfd3 	b.w	800be1c <_raise_r>
 800be76:	bf00      	nop
 800be78:	20000274 	.word	0x20000274

0800be7c <_kill_r>:
 800be7c:	b538      	push	{r3, r4, r5, lr}
 800be7e:	4d07      	ldr	r5, [pc, #28]	@ (800be9c <_kill_r+0x20>)
 800be80:	2300      	movs	r3, #0
 800be82:	4604      	mov	r4, r0
 800be84:	4608      	mov	r0, r1
 800be86:	4611      	mov	r1, r2
 800be88:	602b      	str	r3, [r5, #0]
 800be8a:	f7f5 fb37 	bl	80014fc <_kill>
 800be8e:	1c43      	adds	r3, r0, #1
 800be90:	d102      	bne.n	800be98 <_kill_r+0x1c>
 800be92:	682b      	ldr	r3, [r5, #0]
 800be94:	b103      	cbz	r3, 800be98 <_kill_r+0x1c>
 800be96:	6023      	str	r3, [r4, #0]
 800be98:	bd38      	pop	{r3, r4, r5, pc}
 800be9a:	bf00      	nop
 800be9c:	20002148 	.word	0x20002148

0800bea0 <_getpid_r>:
 800bea0:	f7f5 bb24 	b.w	80014ec <_getpid>

0800bea4 <__swhatbuf_r>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	460c      	mov	r4, r1
 800bea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beac:	2900      	cmp	r1, #0
 800beae:	b096      	sub	sp, #88	@ 0x58
 800beb0:	4615      	mov	r5, r2
 800beb2:	461e      	mov	r6, r3
 800beb4:	da0d      	bge.n	800bed2 <__swhatbuf_r+0x2e>
 800beb6:	89a3      	ldrh	r3, [r4, #12]
 800beb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bebc:	f04f 0100 	mov.w	r1, #0
 800bec0:	bf14      	ite	ne
 800bec2:	2340      	movne	r3, #64	@ 0x40
 800bec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bec8:	2000      	movs	r0, #0
 800beca:	6031      	str	r1, [r6, #0]
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	b016      	add	sp, #88	@ 0x58
 800bed0:	bd70      	pop	{r4, r5, r6, pc}
 800bed2:	466a      	mov	r2, sp
 800bed4:	f000 f848 	bl	800bf68 <_fstat_r>
 800bed8:	2800      	cmp	r0, #0
 800beda:	dbec      	blt.n	800beb6 <__swhatbuf_r+0x12>
 800bedc:	9901      	ldr	r1, [sp, #4]
 800bede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bee6:	4259      	negs	r1, r3
 800bee8:	4159      	adcs	r1, r3
 800beea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800beee:	e7eb      	b.n	800bec8 <__swhatbuf_r+0x24>

0800bef0 <__smakebuf_r>:
 800bef0:	898b      	ldrh	r3, [r1, #12]
 800bef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bef4:	079d      	lsls	r5, r3, #30
 800bef6:	4606      	mov	r6, r0
 800bef8:	460c      	mov	r4, r1
 800befa:	d507      	bpl.n	800bf0c <__smakebuf_r+0x1c>
 800befc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	6123      	str	r3, [r4, #16]
 800bf04:	2301      	movs	r3, #1
 800bf06:	6163      	str	r3, [r4, #20]
 800bf08:	b003      	add	sp, #12
 800bf0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf0c:	ab01      	add	r3, sp, #4
 800bf0e:	466a      	mov	r2, sp
 800bf10:	f7ff ffc8 	bl	800bea4 <__swhatbuf_r>
 800bf14:	9f00      	ldr	r7, [sp, #0]
 800bf16:	4605      	mov	r5, r0
 800bf18:	4639      	mov	r1, r7
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	f7fe fdae 	bl	800aa7c <_malloc_r>
 800bf20:	b948      	cbnz	r0, 800bf36 <__smakebuf_r+0x46>
 800bf22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf26:	059a      	lsls	r2, r3, #22
 800bf28:	d4ee      	bmi.n	800bf08 <__smakebuf_r+0x18>
 800bf2a:	f023 0303 	bic.w	r3, r3, #3
 800bf2e:	f043 0302 	orr.w	r3, r3, #2
 800bf32:	81a3      	strh	r3, [r4, #12]
 800bf34:	e7e2      	b.n	800befc <__smakebuf_r+0xc>
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	6020      	str	r0, [r4, #0]
 800bf3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf3e:	81a3      	strh	r3, [r4, #12]
 800bf40:	9b01      	ldr	r3, [sp, #4]
 800bf42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf46:	b15b      	cbz	r3, 800bf60 <__smakebuf_r+0x70>
 800bf48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	f000 f81d 	bl	800bf8c <_isatty_r>
 800bf52:	b128      	cbz	r0, 800bf60 <__smakebuf_r+0x70>
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	f023 0303 	bic.w	r3, r3, #3
 800bf5a:	f043 0301 	orr.w	r3, r3, #1
 800bf5e:	81a3      	strh	r3, [r4, #12]
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	431d      	orrs	r5, r3
 800bf64:	81a5      	strh	r5, [r4, #12]
 800bf66:	e7cf      	b.n	800bf08 <__smakebuf_r+0x18>

0800bf68 <_fstat_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4d07      	ldr	r5, [pc, #28]	@ (800bf88 <_fstat_r+0x20>)
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	4604      	mov	r4, r0
 800bf70:	4608      	mov	r0, r1
 800bf72:	4611      	mov	r1, r2
 800bf74:	602b      	str	r3, [r5, #0]
 800bf76:	f7f5 fb21 	bl	80015bc <_fstat>
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	d102      	bne.n	800bf84 <_fstat_r+0x1c>
 800bf7e:	682b      	ldr	r3, [r5, #0]
 800bf80:	b103      	cbz	r3, 800bf84 <_fstat_r+0x1c>
 800bf82:	6023      	str	r3, [r4, #0]
 800bf84:	bd38      	pop	{r3, r4, r5, pc}
 800bf86:	bf00      	nop
 800bf88:	20002148 	.word	0x20002148

0800bf8c <_isatty_r>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	4d06      	ldr	r5, [pc, #24]	@ (800bfa8 <_isatty_r+0x1c>)
 800bf90:	2300      	movs	r3, #0
 800bf92:	4604      	mov	r4, r0
 800bf94:	4608      	mov	r0, r1
 800bf96:	602b      	str	r3, [r5, #0]
 800bf98:	f7f5 fb20 	bl	80015dc <_isatty>
 800bf9c:	1c43      	adds	r3, r0, #1
 800bf9e:	d102      	bne.n	800bfa6 <_isatty_r+0x1a>
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	b103      	cbz	r3, 800bfa6 <_isatty_r+0x1a>
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	bd38      	pop	{r3, r4, r5, pc}
 800bfa8:	20002148 	.word	0x20002148

0800bfac <_init>:
 800bfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfae:	bf00      	nop
 800bfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb2:	bc08      	pop	{r3}
 800bfb4:	469e      	mov	lr, r3
 800bfb6:	4770      	bx	lr

0800bfb8 <_fini>:
 800bfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfba:	bf00      	nop
 800bfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfbe:	bc08      	pop	{r3}
 800bfc0:	469e      	mov	lr, r3
 800bfc2:	4770      	bx	lr
